what's going on everyone this is another Chris course with your host Chris and in this episode I'm going teaching you guys how to code gravity with HTML canvas and JavaScript as many of you may know gravity is a natural force that causes things to fall downwards towards the earth if we hold a ball up in the air and let it go gravity will take effect causing the ball to fall downwards until it hit some sort of surface beneath it this explains how gravity works from a high-level standpoint but it's important that we also understand it from the technical side of things if we were to effectively translate this effect over to code from a technical standpoint the force of gravity causes objects to accelerate in a downwards direction over time objects can have varying velocities but if no force such as gravity is acting upon them the objects don't accelerate they move at a constant speed giving off the illusion of a linear motion however if we begin to increase our object's velocities over time we are effectively creating the illusion of acceleration and if gravity is what causes objects to accelerate downwards over time well we basically just created the effect of gravity so gravity is the constant downward force applied to objects philosophies over time but to truly make a more realistic intriguing physics simulation we need to take into account what happens when a falling object hits service beneath it which is one the object will lose some of its energy due to friction and to the objects Y velocity traverses causing it to travel in the opposite direction and with those concepts in mind we should now be able to create a semi realistic gravity simulation so let's head on over to our text editors and I'll show you how to create gravity with canvas and JavaScript yay all right welcome everybody so in this episode I'm going to be teaching you guys how to create gravity using HTML canvas and JavaScript so let's start off from the very beginning let's go ahead and open up a terminal window and if you're new to terminal don't be scared with what you're about to see here so your terminal window will probably look white mine is black because I added a few customizations here but basically you can think of terminal as a representation of our Finder window over here so you'll see if I bring this on over line it up I am currently in my home directory by clicking on this little home icon with my name on it and it has a few folders that represent all the files associated with my computer basically when you open up your terminal you're going to be sent your home directory right away as represented by this tilde and if I list out all my files using LS you'll see that I have the exact same folders that are present within my finer directory over here so the reason we're using terminal is it's a quicker way to do certain things with on your computer and we're going to need it to run specific commands in order to get started up with this web peg project so I'm going to CD change directories to a directory which I like to code my projects in so I have one for web specifically you'll see web is over here as well I'm going to CD into that and I'm not going to create any new directory as of yet I'm actually going to be cloning a repo using git clone and this is a repo I created for starting up on any canvas project basically it contains your typical index.html file and it also contains a file or our JavaScript we're actually going to be writing our canvas code but it also contains a few optimizations such as allowing us to write JavaScript using es6 allowing us to write CSS using sass and I'll also refresh our page automatically whenever we make a change to one of our files so I'm going to hit the clone button over here and I'm going to copy this link and paste it within my terminal like so and then I'm going to specify what folder I want this go into so I want this to go into a folder called gravity and then just go on hit enter it's going to download everything into a folder called gravity you see if I list out the files we now have a folder called gravity over here if we look at our finer gravity is there as well and it just contains all the files that we need in order to get started with this canvas project so I'm going to go ahead and side of this by saying CD gravity and I need to do one thing before we actually get started first thing we're going to do is I'm going to open this up in sublime text just by grabbing my folder over here and dragging on to my sublime text icon you'll see it opened up in my other window and in order to get started with this we need to download all the dependencies listed within our package.json file basically these are all the things that we'll need in order to make use of all those cool features I was talking about such as automatic page refreshes and so forth so to install these I'm going to type NPM install under the terminal or you can type yarn if you have that downloaded as well so NPM and yarn they're just package managers if you don't have them download at the moment do a quick google search on how to download them and then just type in those commands directly in that terminal you can use NPM you can use yarn my preference is yarn because I find it to be a bit faster than NPM but which one you want to use is pretty much up to you it's up in there they both do the same thing so as soon as we install all of our packages you'll see we now have a folder for known modules and to actually get this running up in our terminal we're just going to type webpack press enter and you'll see that it opens up a page for us automatically and what do you know it just so happens that this page has a canvas that accepts the full width and height of the browser as we learned how to do within our html5 canvas course for our beginners so this is where we're going to start off what's still a little deeper into the files here you'll see within canvas J's this is a bunch of template code that I use with in pretty much every canvas project that I end up coding so this contains things that we've already gone over within html5 canvas course for beginners so you'll see we have things such as automatic browser resizing we're tracking our mouse is positioning we have event listener it's the only thing that's different here really are these two functions these are some utility functions that will make our canvas development that much simpler rather than having to do a bunch of math to find a random integer from a specific range this function will give it to you automatically you just have to input the memo number and maximum number and this will give you a random color as long as we put an array of colors through it so some pretty helpful functions there we have the outline for an object which we'll be using later on and we also have an animate loop which will pretty much run over and over and over again until we tell it to stop continuing onwards if you look within disks we have an index.html file nothing you haven't seen here before we have a canvas tag and we also have a script which is linking in all the code that we're writing right here so as long as you have webpack running in the background we shouldn't have a problem getting started coding so to get started coding actual gravity the first thing we're going to do is we're going to create a circle in the middle of our screen and then we're going to be adding gravitational force to it so that when it drops it bounces back upwards and keeps on getting pulled down as long as gravity is in effect so to create a ball in the middle of our screen we're going to head on over to our object right here and since this is we're going to be calling this eight ball let's go ahead and replace our object with just that so we're going to be creating our ball as an object so later on we can actually create multiple balls because we need to make sure each ball has its own individual X&Y coordinates as well as its own color and so forth so you'll see within this draw function right here we're actually drawing out a circle which is perfect that's exactly what we want we're using the arc function and we're filling it in using C dot fill so to actually create a ball we have the outline for it but we need to make sure that we're actually instantiating it and to instantiate eight ball we're going to head on over to our knit function and we're going to create a variable saying our is equal to a new ball this will go ahead and load all the values that we put into our ball function right here into our actual balls properties so let's go ahead and say we want to give it a x-coordinate of canvas dot with / - let's give it a y-coordinate of canvas height / - and this will put it in the center of the screen and let's go ahead and give it a radius of 30 for now and a color of let's just say red okay so let's go ahead and console.log this out just make sure that we have a ball actually being loaded into the variable called ball and you'll see we do so now we just need to make sure that we're drawing this out so we have our net function which is creating the ball but to actually draw this out we need to go inside of our animate function and we need to make sure that we're drawing it after it is clear rect right here otherwise let's see what happens when we don't have a clear rect function in place when we don't have this I start drawing on a screen you'll see if the canvas is never actually refreshed it's never actually cleared each time we draw on the screen that kind of creates a cool effect but it's not really what we're going for if we're trying to animate a ball that falls down due to gravity so we need to make sure that we have this clear rec function in there and we need to make sure that we're calling this update function on this ball that we just created so I'm going to go ahead and get rid of this text that's drawing around the screen clean up our code a little bit and then I'm going to say ball update and watch what happens you're going to see that we're getting air saying ball is not define and that is because we're declaring our ball variable within this init function we need to make sure that we're first declaring it outside of it so that we can make use of it within this animation loop right here so to do so we are going to declare our ball variable outside of the submit function and once we do so you'll see our ball is now being drawn on screen looks like we have some errors left over let's refresh manually and there we go we have a perfect read done in the middle of our screen kind of looks like this like add Japan at the moment so what we need to do now is we need to actually add some gravity onto this to the balls Y velocity so that when the ball starts falling downwards it hits the bottom and then it goes back upwards gravity keeps on pulling on it and the ball will never keep on traveling upwards till it goes past the screen it'll just keep getting cold down by gravity so let's go ahead and change this balls Y velocity change this balls Y velocity we're going to head to our update function right here and we're going to say this y plus equal to 1 and that's going to be adding a velocity of 1 onto our Y value as long as this update function keeps getting called over and over and over again so let's go ahead and save that you'll see the ball is slowly going downwards until it goes off the screen so we don't want it to go off the screen we want to make sure that it's reversing whenever it hits the bottom of it so to do that we need to add a conditional here that says if the ball is Y value plus the balls radius it's greater than the cam is height hide out the screen then we want to reverse this value right here we want to reverse the balls velocity so in order to reverse this we need make sure that we're declaring it variable this variable is going to be called this dy dy stands for velocity and physics times so we need to declare a property up here as well that says this dot dy is equal to dy and these variables on the right hand side over here they're being passed through his arguments so we need to add an argument as well a little bit of work that goes into this and once we have an argument here we need to actually pass through a velocity for our y-value would end our instantiation function so this is where our dy would go let's give it a dy of two for now so now our ball has a velocity of two and we're adding that onto our balls current y-value so as soon as the ball is y-value plus it's radius is greater than the candidates height we are going to be reversing this velocity right here causing the ball go upwards in the opposite direction so let's go ahead and do that now we'll say this dot dy is equal to negative this dot dy and let's see what happens you'll see the ball hits bum and it starts going back upwards but this is without gravity applied as I mentioned within the intro we're currently adding a constant velocity on to our balls Y value this velocity isn't actually changing at all we're not actually adding gravity onto it to ensure that it's accelerating and following downwards once it hits a certain point up here so to add gravity on to this what we're going to do is we're going to add an else statement and to simulate the effect of gravity it's actually really really simple all we're going to say is add on to our balls current velocity a specific value so if we were to give a gravity of 1 let's see what happens all right and just like that we now have gravity being added onto our ball and that's really all there is to it we're creating acceleration with gravity by adding a specific value onto our balls current wide velocity so to help you visualize this a little better let's go ahead and console.log out our balls Y velocity and you'll see exactly what I mean and I'll go ahead and do my best to try to try to describe this whole effect for you so let's go ahead and console.log this out right here and this is what's happening I'm going to scroll up to the top so it's not continuously going on over and over again but you'll see our ball starts off with the velocity of three I think just some of our numbers weren't tracked right away it starts off with three and it's going it's getting faster and faster and faster and once it reaches its peak down here it's traveling at a rate of 16 pixels of second which means it's really really fast at the bottom as soon as it hits the bottom of our screen though the velocity reverses as you can see right here and that's going to send it upwards in the opposite direction it's going to start it off going upwards very quickly because this is a fast velocity it's 15 pixels per second once it reaches the top of its peak right here it's going to be going very very slowly because we keep on adding one onto our current Y velocity so once it hits its peak the direction is going to reverse and it's going to start falling downwards and that's going to give it the illusion of gravity basically so that's pretty cool we have a gravity simulation here but it's not it's not true it's not a true physics simulation there are a few things that we can do to make this a little more realistic including adding friction on those so to add friction on is actually let's start off by changing this one to a variable called gravity just to better describe our code so we can understand what's really happening here so if we're going to be changing one to gravity let's go ahead and add a variable to the top of our code called gravity as well this is going to be equal to a gravity of 1 for the time being this is just for readability purposes round make sure that code is readable and easy to understand if we ever come back to this forget what's really going on here so we have gravity being added honor code but now we need to actually implement friction onto this so that our ball stops bouncing all the way back up because in a real world physics simulation the ball is going to lose energy once it hits the bottom of our screen let me exit out of this for now and to add friction on to this friction is basically its energy being transferred into the ground right here so we need to make sure that our balls velocity decreases each time the ball hits the ground by a specific fraction so this fraction is going to be called friction and basically all we're going to do is we're going to multiply our balls current Y velocity by a fraction such as your 0.8 0.9 and so forth and the closer and this number is to 1 so the ball will bounce at a higher point compared to if we were to change our friction to 0.2 or something let's see what happens when we add a friction of 0.5 so you'll see the ball falls down pretty quickly it looses a lot of energy very very quickly but let's go ahead and give it a nice little bouncy effect of 0.9 you'll see it takes a little longer for the ball to actually stop bouncing near the bottom of the screen which is pretty much the effect we want we may even want to go higher kind of make sure that our balls are bouncing for a good period of time and I think I think I'm going to stick with 0.99 for now because it's going to make our gravitational effects look that much cooler once we actually get to adding more and more balls to the screen so our friction is going to be 0.99 for the time being I'm going to cut this out and I'm going to replace it with a variable called friction so since I'm doing that I need to go to the top at a new variable called friction and set it equal to 0.99 okay so you'll see that our ball eventually loses velocity the more it hits the bottom of the screen so we have the effect of gravity with one bouncing ball but to actually make this a visually interesting canvas piece we can take this one step further but detectives one step further let's go ahead and create multiple balls in the process so to create multiple balls we are going to be creating an array near an implementation section called ball array this is going to be equal to an empty array basically this is going to contain all the balls we're going to be using within our simulation and eventually we're going to be accessing them one by one within this animate loop and they're going we're going to be drawing them in different directions randomize la cities and so forth and it's going to give us a nice randomized really interesting feel in the process so we're going to be creating a ball array and now we need to actually get objects within this ball array so to do that within our net function we're going to create a for loop like so this is going to be bar I equal to zero I'm not writing any as6 here for now because I want make sure this is accessible as possible but if you want to write es6 you totally can thanks to web pack running in the background so this is going to be equal to ball array dot length actually no no no no this is going to be equal to let's just say 500 for now so this just represents the amount of balls we want to draw on the screen so we are saying we want to draw 500 but now we need to actually get some balls within this ball array so to do that we are going to say ball array push - equal to new ball then we need to specify the X Y the D Y coordinates radius and as well as the color so rather than give all these the same X&Y coordinates let's go ahead and randomize them to randomize these coordinates we're going to be creating a variable each time we run through his for loop and it's going to be equal to actually we have some helper functions up here as well as mentioning we can just go ahead and grab this random int from range x-coordinate is going to be a random integer and let's just start off with zero pick an is that width so it's going to be storing that within this X variable but now we need to actually put this within our instantiate objects so we can say X and let's just start off with a hard-coded value of 200 for our Y our D Y will be equal to two radius 30 and then we'll make all these red just for the time being and we can go ahead and get rid of this right here and let's make sure we're also deleting this within our animate loop so if we save this we're not going to see anything as of yet this is our net function we're not actually animating anything which is R which is where pretty much everything takes place but what we can do is we can console.log out our ball array to make sure things are actually being created within this and if we look within our console over here you'll see we are creating sometimes the logs a little off dated browsersync but just refresh the page if it is and you'll see exactly what's happening with minute code here so we're creating 500 balls and if we dig a little deeper into this you'll see that each ball has a randomized x-coordinate this one's 223 this one's 265 so we're effectively creating balls and random locations over here we just need to animate them on the screen now so to animate them we're going to be taking our ball rate let's go ahead and copy this head on over to our animate loop and we're going to be running another for loop so we're going to be creating our for loop like so say var I is equal to zero and then we want to run through this 500 times but if we ever want to change this number right here and we want to run through this a different amount of times well we can go ahead and ensure that this is always equal to this number right here by saying ball array length and since there are 500 balls with our ball arrays the length gets that number and automatically tells us for loop to run 500 times so this is running 500 time to each time this animate function is being called but now we need to animate each individual ball so to animate each individual ball we're going to be selecting our ball array and then we need to access each individual one using the ball arrays index so we're going to be putting this variable right here I within our index and that's going to select every single ball for us as long as this for loop is being ran so what we can do is we can say update to the end of this and let's watch what happens once we save this and we're not seeing anything else again that's because we're trying to draw all of our balls before actually clearing our canvas let's go ahead and grab this right here and we're going to make sure that we're pacing this after our clear rect function and as soon as we do that let's see what happens all right you're going to see a long line just bounce to the bottom of the screen that is because all of our balls have the same Y positioning and since they have the same Y positioning well they pretty much look like one giant strip going on right here so let's go ahead and randomize our Y positioning as well we have this x coordinate right here let's go ahead and copy this line of code paste it and change this X to Y like so so instead of getting a random value from zero to the canvases width we want to make sure that we're getting a random value from zero to the canvases height so we're going to change this to height right here and we're not seeing anything as of yet we need to make sure that we're actually inserting this Y value into our instantiation object right here so let's go ahead and do that and you'll see this is looking a lot better than it was before you can kind of make out the balls but it's still kind of hard to because we don't actually have a stroke they're kind of the colors are kind of merging in together so let's go ahead and add a stroke over here we'll just say at the end of C dot fill within our draw function which is responsible for drawing our ball we want to add a stroke whenever this is called so if you say that let's see this is looking a lot cooler a lot better looking but we're still having a few issues here a few these balls are getting caught on the bottom of our page and a few of them well if we want to add X velocity onto these while they're going to go off the screen which you'll see in a second so let's go ahead and make sure that these aren't getting stuck on the bottom the reason these are getting stuck on the bottom is because a randomization function right here is spawning our balls so that the edges are actually getting caught on the bottom of the screen we all make sure that we're only spawning our balls from the balls radius to 0 and that's going to prevent them from getting caught down here like they are right now so instead of getting a random coordinate from 0 to the campus's height we'll get a random coordinate from 0 to canvas height - the balls radius if we're going to be using a variable here we need to make sure that we declare a variable within our for loop let's go ahead and hard code it let's just say our radius is going to be equal to 30 what will do same 1/4 now I need to actually create a variable first called radius and since those are going to be hard-coded value for the time being we can actually put outside of our for loop eventually we're going to put it back in here but let's go ahead and put it outside for now for good coding purposes and will replace our 30 right here with radius as well let's go ahead and see if those don't get stuck anymore and it looks like it's hard to tell with all these going on let's go ahead and decrease the amount to a hundred so we can better make out whether or not they're getting stuck and I think we're almost good to go so that prevents them from getting spawned down there but eventually it looks like if you look closely that eventually they get they get stuck anyways as soon as I hit the bottom of the screen so this is happening due to the this not update function we need to make sure that this is also taking into account the ball's current Y velocity so if you say it's not Y plus ladies plus dy like so it's going to prevent the balls from actually getting stuck like you were seeing before you'll see if I go how to enter move this save it all it gets stuck right away because we're not taking into account our radius and they're just getting caught on the edge past our canvas is height but if we add this eventually they're going to hit the bottom it doesn't look like they're hitting the bottom right now just cuz they're going so fast with such a high friction but eventually they're going to hit the bottom you're going to see they'll be touching the very bottom of the screen right here so that fixes that issue but let's go ahead and make this a little more interesting let's go ahead and get these actually bouncing off to the left and right hand edges of our screen so in order to do this we need to add not a Y velocity but we need to add an extra velocity on it is so we'll go ahead and create a property called this DX we're going to specify that it's equal to DX and since we're adding it right here we need to make sure that we're also adding it within our arguments up at the top and if we're adding a DX onto our balls we need to make sure that within our update function now we're altering the balls x-coordinate so that has an X velocity so that'll take care of moving the balls and whatever direction we specify when we pass through a velocity through our instantiate your object so let's go ahead and do that now we'll say let's go ahead and create a new variable called DX and let's set this random so I can go one or two ways it can go to the left or it can go to the right in order to do this same thing we're just going to be grabbing this helper function right here I'll specify give us a random value a random range from negative two to two and then we just need to grab this the X put it before our dy since that's where we specified it up here and if we save this you'll see that our balls are now moving from the left and the right but eventually they go off the side of the screen which is probably it's not something that we really want we want to make sure that our balls are confined to a specific space because there's no point of putting a mouse a screen if we can't see them so let's go ahead and make sure that our balls bounce off the left and right hand side of the screen similar to bouncing off the bottom of the screen we're going to be adding a conditional with our update function right here that says if the ball's x-coordinate plus the balls radius is greater than the campus's height or not the height but the width then we're going to be reversing the balls wide velocity so DX is going to be equal to negative DX we also need to take into account our balls X velocity so it doesn't get hung up on the right hand side of screen like it was on the bottom down here we're also going to saying this dot radius plus is dot DX and let's watch what happens all right so we're getting the same issue that we're getting originally down here the balls are getting spawned on the right hand side screen and in combination with our conditional here they're getting hung up and they can't actually bounce off the right hand side so we need to make sure that our balls aren't getting spun over here to the point where they can get caught up so to do that we're going to head on over to x-coordinate and we'll say canvas not width - our balls radius will prevent them from getting spawn taxes and just like that you'll see they're no longer getting caught over there we need to make sure that our balls are only being spawned from this play sometime where the radius is all the way over here to where the radius might be headed to spawned over here okay so now our balls keep going past the left-hand side of screen let's go ahead and prevent that as well within our conditional we'll say reverse our balls X velocity the balls xvalue + the balls radius is greater than the campuses width but also reverse it if this dot X - our balls radius it's less than zero let's go see let's see what happens when we do that all right so we're looking and we're looking a lot better and let's go ahead and add our velocity in here just to be safe all right but we're still getting we're still getting spawned on the left-hand side of screen so to prevent getting spawned on the left-hand side of screen we'll head on over to our X function and we'll say instead of spawning anywhere from zero to canvases height or the canvases width - Paul's radius we need to make sure that we're spawning a ball anywhere from 30 the canvases with - the balls radius so if 30 is our radius we'll go ahead and take that replace here with radius now you see we don't have any problems getting spawned on the left hand side screen but we're still getting some issues with the ball is not actually bouncing and reversing their velocity so let's see what's happening on over here all right so they're still getting caught because we're saying refers to velocity if it's lessons here we want to make sure that we're reversing it if it's less than or equal to zero and excuse me we don't need to actually subtract the Y velocity from this so we're going to go ahead and get rid of that make sure it's not interfering and there we go all right so this is starting to look a lot more visually interesting than it was but we can take these one step further let's go ahead and randomize our dy and also randomize our color so to randomize our Y velocity we're going to be taking this line of code pasting it copy and paste it and we're just going to be saying give us a random y value of negative two to two and now we have balls moving quickly and also more slowly but let's go ahead and change the radius of these so the radii is so that they're actually different as well so we're going to be taking a radius placing it within our for loop and same thing we're just going to be taking this function right here specifying the random range that we want to go to so we'll just say 4 to 20 and I think these are a little too small for a let's go ahead and do 824 now since we're only creating a hundred there's not they're not taking up that much space it's not too interesting let's go ahead and up this amount to 400 and you'll see that's pretty pretty interesting looking and once we change the color of these we'll really get that visually pleasing effect so to get a random color will save our dot color this is going to be equal to not this function right here but it's going to be equal to this random color function which we have within our utility functions instead so we'll go ahead back down here and we'll say our color is going to be equal to random color and this is going to return a random color from an array so you'll see I already have an array of colors up here we're just going to copy this paste it within this function and this is going to return a random color from the colors list down this array for us so if we save this nothing just yet we need to make sure we're actually putting this within our instantiation function like so once we do now you can see we actually have a nice-looking canvas piece over here so to finish this off let's make sure that we can eventually restart this because if we if we go ahead and edit our friction up here let's just go ahead and edit something like something lower let's just say 5 4 now you're going to see that this animation ends really quickly and that's meant that may be what you want but you may want to actually restart this animation somehow but actually restart this let's restart it whenever we click the page to do that we're going to say add an event listener for whenever the user clicks so click and once the user clicks the page we're going to be calling this function whatever code is within this function we're going to activate so you'll see each time we resize the page we're calling an it over again and we're actually we're actually adding more and more and more balls and/or array to the point where it's actually unbearable this is too laggy for pretty much any project so to make sure that that's not happening first I know we need to make sure that we're calling an it whenever we click let's go ahead and focus on that bug with resize I know we're going to take a little detour right here but we need to make sure we do this before we add our click functionality so right now we have our ball array but whenever we resize the page will recalling this init function which just means we're pushing more and more balls into it non-stop we need to make sure that we're actually restarting our ball race so that's empty whenever we resize the screen so to do that it's very simple whenever we call init we want to reset our ball array equal to a new array since we're doing this we can just do away with this declaration code up here if we save it you'll see that our animation is still in tank but once we start resizing we're not adding more and more balls on our screen which is what we want because otherwise we just that laggy animation which is not not ideal at all so we want to make sure that been happening whenever we click the page so we have this admit function right here which is calling pretty much all of our initialization code that creates the balls will just say whenever we cook the page reinitialize so I'm clicking right now you'll see that we're reinitializing everything and whenever our animation ends we can just restart it which is pretty freakin cool all right so I think that's going to be for this one folks we learn how gravity works how to implement friction how to respond to collisions and we even took things one step further by implementing the effects of many objects instead of just one so if you enjoyed this video be sure to special' like button subscribe and I'll be sure to produce the most badass videos I can in the meantime otherwise I hope you guys have a great day and I'll explore attitude in the next video [Music] [Applause]		