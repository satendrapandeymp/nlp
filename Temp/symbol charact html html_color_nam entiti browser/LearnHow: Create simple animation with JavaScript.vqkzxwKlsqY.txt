[Music] hey everyone Leander here and today we're going to learn how to make some simple animation using JavaScript this tutorial requires some basic knowledge of HTML CSS and a little JavaScript if you need that you can check out my previous tutorials on those topics in the last tutorial which introduced JavaScript we learned how to change the position of an image today we're going to learn how to move an image smoothly across the screen let's begin though by erasing our previous code and images so that we can have a fresh start the only thing we'll leave here is our index.html file and let's delete everything from the body of our page except the style and script tags also let's change the title of our page to j/s animation so now we have a nice blank page there are a couple new things we have to learn before we can get started with our animation to learn those things we're going to start by making two applications a stopwatch and a fortune teller we'll start with the fortune teller so in our HTML let's add a heading and we'll have it's a fortune teller so the way the fortune teller is going to work is it's going to have the user ask a yes-or-no question push a button and then the answer to that question will appear yes or no so let's create some instructions for the user and we'll say think of a yes-or-no question and click tell fortune to get the answer next let's create our tell fortune button and let's use CSS to make the font size bigger for our body and buttons and of course we need a place for our answer to appear so here's how we'll do that answer we'll have a span and we'll give the span the ID answer and that's where our answer is going to appear when users click the tell fortune button it's going to call the tell fortune function and now let's get started defining that function down between our script tags now the way our tell fortune function is going to work is it's just going to randomly give a yes or a No to do that with JavaScript we need to first generate a random number here's how we do that we first create a variable and we'll call it random number we set that equal to math dot random and make sure you capitalize the M on math let's see what this gives us by console logging our random number hmm that's strange nothing's happening and we're not getting any errors either maybe I need to check my spelling so tell fortune down here looks okay same spelling here on uh-oh instead of on click we have on lick we better change that okay now it's working notice that these numbers always seem to be between 0 and 1 in fact they can go as low as 0 and as high as 1 so if you click long enough you might get a 1 or a 0 so how can we use such numbers to generate a yes or no answer with our fortune teller well first we need to create another variable and we'll call it answer and we'll set it equal to empty quotations next we're going to write some code that will check if our random number is higher than 0.5 if it is we're going to make the answer yes if random number greater than 0.5 curly brackets answer equals yes this is called a conditional statement because it's checking to see if this condition is true is random number greater than 0.5 and if it is it does something let's output the answer to our answer span to see if it works so document.getelementbyid e answer dot inner HTML equals answer okay the random number was less than or equal to 0.5 so no answer yet oh it's greater than 0.5 point nine six blah blah so we get a yes it's working now let's work on generating the know answer if we wanted to we could use another if statement for that but we don't have to all we have to do is add this to our current if statement else curly brackets and then answer equals no let's see if this works all right so we're getting yes and no answers fantastic technically though we should make our condition here greater than or equal to point five in order to make the probability of yes coming up equal to the probability of no coming up so this is how you do that you simply add an equal sign after the greater than sign and it's the same for less than if I wanted to do less than I just do it less than sign and then equal to we could stop here if we wanted to but I'd like to show you another cleaner way we could write this function and that is by using math dot round let me show you we'll take our random number and we'll set it equal to math dot round random number let's see what that gives us 1 1 0 1 so as you can see math dot round rounds are random number to the nearest integer either 0 or 1 math dot round changes all the random numbers that are greater than or equal to 0.5 to 1 so we can actually change this part of our conditional statement we can simplify it and just check to see if random number is equal to 1 but how do we do that let's try random number equals 1 for our condition oh we've got a 0 but our fortune teller is telling us yes and the same thing for 1 so everything becomes yes now what's going on well maybe we can get a hint by console logging our random number after we're finished with our conditional statement so with this console log our random number again and we'll add in before here and after down here and let's see what this gives us okay before one after one whoa look at this before zero after one again before zero after one so it looks like what's happening is we are actually changing random number into one here in this condition and that makes sense because until now we've used the equal sign to set a variable equal to something answer equals yes and so that's exactly what it's doing here so if we want to check to just check if random number is equal to one we need to add some linked to this condition we need to add another equal sign so random number equals equals 1 and what this will do is it will just check to see if random number is equal to 1 it will set random number equal to 1 so let's try that okay now it's working normally before 0 after 0 now we can get rid of this second console.log here and also take off this before part we could be finished with our fortune teller now but what if we wanted to add a third possible answer what if we wanted for example maybe as a possible answer see we could have yes no or maybe how would we do that well right now our math dot random method gives us a number that goes from 0 to 1 when we round it we get either a 0 or a 1 the integer 1 gives us the answer yes whereas integer 0 gives us the answer no if we wanted one further possibility we need one more integer which means we'd need to somehow get a 2 sometimes so let's think about this how could we change our random number so that instead of going from 0 to 1 it goes from 0 to 2 well all we have to do is simply multiply our random number by 2 here's how we do that our multiplication operator in JavaScript is the asterisk so we'll add an asterisk and 2 and now we're multiplying math dot random by 2 so what this is going to do is the lowest number we could get will still be 0 right 0 times 2 is 0 but the highest number we can get now will be 2 because the highest random number we can generate with this is 1 and 1 times 2 is 2 let's try this out okay so we got a to another 2 and of course it's telling us know when we're getting a 2 because 2 is not equal to 1 so let's modify our conditional statement a little bit let's have the answer be yes when the random number is equal to 2 and when it's equal to 1 let's have it make the answer maybe to do that we could use another if statement but I'd like to show you another approach and that is to use else if like this we just tack it on below the if statement we say else if and then the next condition in curly brackets and we'll say random number equals 1 and so if the random number is not equal to 2 it'll go on to this statement here and it will check if random number is equal to 1 if it is equal to 1 we'll have it make the answer maybe and then finally if it's not equal to 2 and not equal to 1 meaning it's equal to 0 the answer will be no let's give this a try nope nope nope maybe maybe no maybe yes ok our fortune teller is working so let's try asking our fortune teller a question will my viewers become great programmers maybe fair enough okay I think we are done with this application so let's move on and create our stopwatch so we'll go up in our HTML and we'll add a horizontal rule and another heading and we'll have it's a stopwatch and then we need a button to start our stopwatch and we'll have it's a start and a div for the time to appear in we'll give it that ID time and since our stopwatch is going to start with zero every time I'll just put the zero in like that let's see what that looks like let's make the font size for our time a bit bigger that's better and the function we're going to call when the user hits the start button it's going to be called count up next we'll go down into our JavaScript and we'll start our definition for the function bar count up its function let's seize curly brackets and above that function we're going to create a variable a global variable called time and we'll set that equal to zero this time variable is basically going to be the number of seconds that have passed since the user clicked the start button and so one of the things that our count up function is going to do is every second it's going to add one to our time like this time equals time plus one and of course we have to output our updated time to our time div like this so far this is what we have basically it's a counting machine we click the button and it counts up by one to make this into a stopwatch we have to somehow make the browser wait a little bit and then call the count up function for us and then wait a little bit more and do it again to do that we need to use a new method called set timeout here's how that works we type set timeout with a capital T beginning timeout parenthesis and in these parentheses we put two things the first thing we put is the name of the function we want the browser to call and then we put how long we want the browser to wait so I'm going to put in 1000 here to start off with so when the browser is reading our script it'll get to this part and it'll see okay I've got to do a set timeout what function am I going to do ah count up okay how long should I wait 1000 increments of time we're not sure yet what those increments are but 1000 of them so and this of course is going to be called automatically not when we press the button because we're just trying it out so let's go do that let's try this so we'll hit refresh and there it counted up and it took about 1 second for count up to be called and that's because JavaScript counts by milliseconds and so a thousand milliseconds is one second of course we still have a problem which is the browser only calls count up once and we need it to keep calling count up basically we needed to do something like this one two three unfortunately we'd have to copy and paste this infinitely to get it to work like we wanted to so what's another way we could use set timeout so that we can keep the browser call and count up every second the solution is actually very simple all we need to do is take this set timeout line of code here and drop it right inside of the count up function now when the user clicks on the start button it's going to call the count up function which is going to add one to the time output that updated time and then it's going to do this set timeout where the browser is going to wait for one second and then call count up again and the process will start all over again and on and on and on let's give it a try there it goes but counting up by seconds is kind of boring why don't we count up by tenths of a second instead so what we'll do is we'll just divide this number by ten so thousand milliseconds divided by ten is a hundred milliseconds which is a tenth of a second let's try that that's more interesting our stopwatch still actually isn't a stopwatch yet though because it doesn't stop so let's add a stop button so we'll go back up in our HTML and we'll add our stop button and the stop button will call the stop function let's go down and define that function now our stop equals function parentheses curly brackets and above our stop function I'm going to create a new variable called keep counting and we're going to set this variable equal to true notice we're not putting any quotation marks on true here so this is not a string variable this is a new kind of variable that we haven't dealt with yet called a boolean variable and there are basically only two boolean variables that we're ever going to deal with true and false here's what we're going to do with the keep counting variable when someone clicks the stop button the stop function is going to set the keep counting variable equal to false this alone is not going to stop our stopwatch as you can see there's one more thing we have to add but not to the stop function we actually have to add it to the count up function what we need to add to the count up function is a conditional statement and that conditional statement needs to check keep counting and see if it's equal to true and if it's equal to true it's going to do all of this stuff so I'm going to cut this out and paste it inside of our conditional statement start stop great it stopped let's try to start it again uh-oh we still have a problem the reason why our stopwatch won't start again is because keep counting is still equal to false we never set it back to true to fix this problem all we have to do is add an else statement here so when keep counting is not equal to true anymore we just set it back equal to true again and we do nothing else we don't do a set timeout or anything we just set keep counting back equal to true and we should be able to start up our stopwatch again let's give this a try start stop start stop ok it seems to be working pretty well now but there is actually still a problem watch what happens when I click start a whole bunch of times as you can see the more I click start the faster our stopwatch gets not only that but if I try to stop our stopwatch now watch this I can't stop it the reason for this problem is that we're calling multiple count ups within a single second and each of those is calling their own set timeout to prevent this we need to disable the start button after it's been clicked to do that we first have to give our start button an ID so here's our start button we'll give it the IDE start button and now inside of our count up function we can simply write document dot get element by ID start button and then we do dot disabled equals true and what this line of code will do is it'll grab that start button and disable it let's give this a try so now when I click the start button it becomes the sable so we can't call the count up function multiple times unfortunately even if I click the stop button the start button remains disabled so we should go back and make sure to enable it after the stop button gets pressed that's pretty easy to do all we have to do is grab this line of code that we use to disable our start button and then after someone clicks stop and keep counting is set to false it's going to go back through the count up function and it'll take us to this point right here and that's the point where we can re-enable the start button so all we do is the same line of code except true becomes false let's give this a try start stop and start is enabled again so again stop okay there is still a bit of a problem though it's not something that the user is going to notice but it is something that we as programmers should be careful of the issue is right here this line of code remember this is the line of code that disables the start button do we really need to run this line of code every time countup is called the answer is of course not we only need to run this line of code once right after the start button is pressed so let's move this line of code to a separate function a function will be called start and in this function we're going to do two things we're going to disable the start button and then we're going to call the count up function and now when someone clicks the start button we're not going to have it directly do the count up function instead we're going to have it call the start function so they hit the start button it'll call start then the start button will be disabled and count up will be called and the count up cycle will begin so our stopwatch doesn't work any differently now but we just save some processing power by changing our code like we did so now we can start our stopwatch stop it start it again and we can reset it before moving on there are two important differences we should note between our stopwatch and a regular stopwatch the first is that our stopwatch simply accounts in tenths of a second and it doesn't convert the time into minutes and hours etc that's something that we could easily fix the second difference is a little more problematic and that is our stopwatch will always be a little bit slower than a regular stopwatch this is because of the way we're using timeouts basically we have the browser wait one tenth of a second before calling the count up function but we have to remember that it takes the browser time to process all these lines of code inside of the count up function and so it's got to do that before it can even get to this point where it waits one tenth of a second to do it all over again and so it will actually never be as fast as a real stopwatch counting tenths of a second how much slower will it be you ask well that depends on the speed of your computer and your browser however set timeouts are good enough for doing what we really want to do today which is create some simple animation so let's get started with that first we'll go up in our HTML and we'll add another horizontal rule and a new heading and we'll write animation next we'll add an image and we're going to start with a new and improved version of the hero image we used last time so I'm just going to paste that into our site folder and let's add the HTML for that image and the source is hero PNG let's also give it an ID call it hero so this is what we have so far in the previous tutorial we made the hero disappear from one place and reappear in another place this time let's try to make the hero move smoothly across the screen just like last time before we can move our image we need to first give it an absolute position so let's go down into our CSS and we'll add the hero ID and we'll set the position to absolute next we could create a button to make our hero move but why not just have the player click on the hero to do that we simply go up into our hero image and add on click equals our function which will be move hero and now let's get started defining that function bar move hero equals function and above that we're going to create another variable it's going to be called left I'm going to set that equal to zero and this is going to be the heroes left position on the screen more specifically this left variable here is going to give us the distance between the left side of the screen and the left side of our hero image so the more this increases the bigger the distance between the left side of the screen and the hero image we want to move our hero image just a little bit that's pretty easy to do we simply increase our left variable like this left equals left plus 20 for example and then we update the left position of our hero image to the new left value like this document dot get element by ID hero dot style dot left equals left plus in quotations px for pixels don't forget that part or it won't work let's try out what we have so far so when I click on our hero he moves just a little bit now what do we need to use if we want our hero to continue moving that's right a set timeout so set timeout and the function we're going to be calling is move hero again so we put in move hero no parentheses and let's have the browser wait one tenth of a second so 100 milliseconds before calling move hero again let's give this a try there he goes so our hero is now smoothly moving across the screen but his movement is really weird looking I mean he's sliding across the screen like he's skateboarding or something so how do we make him walk like a normal human being well for that we need some more images so here we have some images of our hero walking some snapshots of him walking and so I'm going to copy these images and drop them into our site folder as you can see each of these images has the same title hero walking except the number at the end is different and it goes from 1 to 8 so what we need to do is we need to switch the source for our hero image from hero PNG to each of these successively so first here's how we change the source of our hero image we'll just copy this document dot get element by ID hero part and we'll paste it down here and we'll add SRC for source and we set that equal to the source of the new image file we want to use and for example if we wanted to change it to hero walking 1 we do this walking 1 in G but of course we don't just want to keep using hero walking 1 every single time we loop through the move hero function we want it to go from 1 to 2 to 3 to 4 etc etc so what we need to do here is put a variable in here we're going to call the variable step num for step number and let's go define that variable outside of our function bar step num 1 so the first time we loop through the move hero function it's going to change the hero source to hero walking 1pg then we're going to add one to step num like this so that the next time we loop through move hero will get hero walking 2 and then we'll get here walking 3 etc etc let's see what this looks like so he's walking but as you can see he disappears and if we look at our console we can see there's an error and what kind of air is it well it's looking for let's see here Oh walking 160 174 obviously we don't have that many walking images we only have 8 so once we get to step number 8 we need to loop back around and make it 1 again so how do we do that well all we need is a conditional statement if step greater than 8 step num equals 1 let's try this out okay he's walking properly now there he goes before moving on let's clean our code up a little bit in our move hero function take a look at this we have document dot get element by ID hero twice inside of this function instead of doing this we should create a variable outside the function we'll call it hero and we set that equal to document dot get element by ID hero once we do this all we have to do down here is simply type hero and now our code is easier to read and we're also saving some processing power ok now that we have our hero walking properly how about adding the sound of his footsteps for that I found a great sound effect from freesound.org called boots and spurs step by GA house for and so we're going to use that for the footstep sound of our hero I'm just going to take that sound file and paste it into our site folder and here's what it sounds like so we're going to play this step sound over and over as the hero walks we first have to create the sound variable and for that we're going to need the name of the file of course copy that and we'll create a variable we'll call it step sound and we'll set it equal to new audio parentheses in those parentheses we'll use quotations and we'll put the name of the audio file and let's first try playing the step sound every time step number is set equal to one so we'll put another conditional statement right below this one saying if step num equals one step sound dot play parenthesis so we'll try this first okay not bad but I think we need to play the sound one more time during the walking cycle from one to eight so let's add to this conditional statement let's add the or operator which looks like this it's two vertical lines and then we'll type step num Able's equals five what does this mean it means if step num is equal to 1 or step num is equal to 5 play the step sound let's try this this sounds better but this something kind of off about the rhythm just then it sort of skipped a step it was supposed to make the step sound but it seems to have skipped it so what's going on here to gain some insight into this problem let's take another look at our sound effect audio file in our media player we're assuming that when we do this part step sound up play we're assuming that it's always starting here at time zero so it's going to make this sound right but what if instead of starting here every time sometimes it's starting somewhere else like maybe here for example what kind of sound isn't going to make then it'll sound something like that or perhaps it'll start over here and then it'll make no sound at all but we assumed it should be starting here at the beginning to find out where the current time of the sound is before we play it we can simply console.log the current time of step sound before it plays like this console.log step sound dot current time and let's make sure to capitalize the T on time here and this will tell us where this step sound is right before plays it should be telling us zero okay let's go find out the current time of step sound right before it plays we'll open up our console.log and here we go okay so the first time our sound plays it starts at time zero but after that it's starting at different times and you may have noticed that when it was at this time here we didn't hear any sound at all what's happening is our step sound hasn't completed playing by the time it gets played again and when that happens the current time does not get set back to zero it just stays wherever it is currently as its played if we want it to start back at zero again every time even though it's not finished playing from the previous time what we need to do is actually set the current time equal to zero which is pretty easy we just take step current time and set it equal to zero and now our timing problem is fixed I think the volume is a little too loud though so how do we adjust that well that's also pretty simple after we create our step sound variable we just go one line below that and say step sound volume equals some number between zero and one one means full volume and zero means muted so let's try 0.5 that's a little better next how about adding an environment for our hero to walk around it and for that I've created an image called passage 1 and that's what we'll use we'll just drop it into our site folder here and let's go up and create that image element I'll just put it right below our hero image the source is passage 1 dot PNG and we'll make the ID equal to passage and let's give passage an absolute position as well so that we can have full control over its position let's see how look so far uh-oh where did our hero go maybe we can find out by doing this we'll set the top position of our passage to 900 pixels there's our hero so how do we get our hero image in front of our passage image well there are a couple ways to do this but the easiest one is to just make sure that in our HTML the passage image comes before the hero image so if I just cut the passage image out and paste it before the hero image that will put the hero image in front of the passage so the lower you go down in the HTML the further out elements come toward you so let's try this there is now let's change the positioning of our hero and passage so that it looks like our hero is standing here on the floor of the passage all right our scene with our hero in this passage is really starting to take shape now but of course we still have a problem and that is this so our hero just walks right through the door so how can we get the hero to stop when he gets to the door the solution again involves conditional statements so let's go back to our move hero function and recall that left is getting bigger and bigger which means the distance between the hero and the left side of the screen here is getting bigger and bigger how big does it have to get for the hero to be right up against this door I think it's probably around a hundred pixels or so so what we can do is we can put an if statement in here saying if left is greater than or equal to 100 return what this return does is it essentially stops this function from continuing so once this return is called the browser stops reading the rest of the code and it just quits this function so we never get down to this set timeout which means that the hero is going to stop moving so let's try this out and he is stopped let's have him move a little bit closer how about a hundred and ten pixels that's better oh and why don't we get rid of this console.log we don't need that anymore there we go so our hero stops but he stops right in the middle of his step so why don't we return him to his original stance by changing the source back to hero dot PNG and that's pretty easy to do we just type hero dot source equals zero dot PNG right here before our return statement and there he is next it might be good to let people know that they can click on the hero to make a move to do that why don't we create a message box that will be integrated into this scene with our hero so first we'll go up into our HTML and we'll add a div we'll give that div an ID message box and in the message box we'll type click on the a hero to make him move and so far it looks like this so the reason why it's not showing up yet is because we have to give it an absolute position it's actually there it's just stuck behind the passage image so let's go down and add message box to our CSS and we'll make its position absolute there it is just to make it easier to see we'll give it a temporary background color of red now let's style it to really make it look like a proper message box so we'll give it padding about 25 pixels on each side and we'll kind of position it in the center of the passage image so left position of 200 pixels and let's also fix the width make it 500 pixels wide and let's give it a top position to about 725 big slice let's try that looks good maybe I'll put these position attributes together here just to keep it logical next how about changing the font color to white and we'll get rid of that ugly red background color as well and instead we'll use the RGB a system to do a dark blue color so zero for red zero for green and a hundred and ten for the blue value and we'll give it an alpha of about 0.8 so we're going to make it semi-transparent just a little bit now that looks pretty nice but it's now getting a little bit difficult to distinguish the message box from some of the darker parts of the passage image so let's give our message box a border and here's how we do that take border and how wide we want the border to be and let's go for two pixels and what type of border we want and we want a solid order there are some other types you can choose and then we choose the color and let's just go with white for now and that's what that looks like and this is starting to look pretty good but I'd like to actually make these corners round instead of square so here's what we do okay border radius and what we want the radius of the curve for each of the corners to be and let's try 15 pixels for each of the radii that looks pretty good now once someone clicks on the hero it makes it move we want this message to disappear so to do that let's go down to our move hero function and let's create a new variable and we'll call it message box and we'll set it equal to document dot get element by ID message box to hide this message box when someone moves the hero we could do something like this inside of move hero we simply add message box style display equals none but this is not a good idea the reason why is because of course we call move hero many many many times and we only need to hide the message box once and then it's hidden so this is a very similar issue to what happened with the stopwatch when we were trying to figure out how to disable this start button in an efficient way so just like in that case the best way to deal with making this message box disappear is to create a new function and so we'll create a function called start moving and inside of that function will have two lines of code one line of code is going to be this one which hides the message box and the other line of code is going to be move here oh and we can't forget this we need to change the function that gets called when someone clicks on the hero from move hero to start moving so now when someone clicks on our hero it's going to call the start moving function and the start moving function is going to hide the message box just once and then it's going to call move hero and once move hero is called it's going to use set timeout to animate our hero until he gets to the door and that's where it's going to stop the function so this is what we have now when the hero gets to the door though we should probably tell people what's going on with that door can we just open it up or is it lock do we need key what's going on so we're going to have to bring our message box back but put a different message in it so here's how we do that when the hero gets to the door which is this area right here we're going to change the innerhtml of our message box to our new message I'll use double quotations here and our new message will be the door is locked but it's old and rotten you might be able to break it with your sword let me change the view to make this message easier to see we'll turn word wrap on there we go now you can see the whole message pretty easily so we've changed our message box in our HTML but we have to remember that our message box is still hidden so we have to display it once again and to do that we simply do message box dot style dot display equals empty quotations let's see if this works okay so today we learned a lot of useful stuff we learned how to generate random numbers round them and use conditional statements if if-else and else to create this fortune-teller application let's try asking it another question are your fortunes accurate yes fantastic next we learned how to use set timeout and together with conditional statements we created this stopwatch finally we combine all of our knowledge to create this animation sequence join me for part two of this tutorial where we'll learn how to make the hero swing his sword to break through that door and find out what lies on the other side until then thanks for watching and see you next time		