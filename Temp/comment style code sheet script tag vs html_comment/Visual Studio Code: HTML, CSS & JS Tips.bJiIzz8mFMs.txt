yeah get in there kitty dominate those cookies hello everyone in this video I want to talk about Visual Studio code and show you some of my favorite features now since I'm fairly new to vs code myself this is not going to be an exhaustive tutorial this is more of just a show and tell where I share the features that I was pleasantly surprised by now we are only going to cover one percent of what this editor is capable of but if you're looking for a new text editor I think this video might help you get excited enough to actually make a move and try something new now before we begin I just want to stress that this editor is completely free just Google for visual studio code to download and install it it's available for Windows Mac and Linux and it won't cost you a penny okay now without further ado let's get started so first let's imagine you're writing a bit of HTML and you want to create a bulleted or unordered list now a lot of text editors have basic tab-completion where you can just type UL and then hit tab on your keyboard and it will generate the tags for you however v/s code takes this about 10,000 steps forward by including a package named Emmet let me show you what Emmet can do so if we have an unordered list we probably want a list item inside it but check this out you can just type unordered lists look inside that with greater than symbol type li then hit tab and it will generate that structure with the nested element for you Emmet can even go beyond that so imagine we want to list with five list items unordered list go inside that list item x or asterisk five hit tab you're off to the races and you can even tab through each item so read hit tab again orange tab you get the idea not only does it generate the nested structure for you but you can just type and then keep hitting the tab key on your keyboard now the Emmett tool that makes this possible is available in other text editors but I just think it's cool that vs code includes Emmet by default right out of the box so we don't need to go and download a plug-in or an extension or package we just have immediate access to the power of Emmet now you could create an hour-long video just on Emmet but this is a video about vs code not Emmet in particular so I want to keep things rolling let me just show you one more Emmet HTML trick before we move on let me start over let's say I want to create a div with a class of featured item so div and then to give it a class is dot if you want to give it an ID you could use hashtag but div dot featured item and then inside this div maybe I want a heading level one and below that heading I want a paragraph and maybe below that paragraph I want a heading level two the idea here is that you can use the plus symbol to string together multiple sibling elements so if I hit tab we get a div with our class and we get all of the children elements that we wanted now there is a lot more to Emmet than what we've covered here but I want to keep things rolling okay that's enough HTML for now let's imagine we want to write a bit of CSS Emmet can actually help us here as well so within this rule let's imagine I want to add a declaration that says padding 10 pixels so on a new line here instead of typing all of that out I can just type P for padding and then 10 so P 10 hit tab on my keyboard and Emmet knows what I mean now maybe you don't want to use pixels maybe you want to use rim so check this out you can just say P and imagine you want 1.5 rim so P 1.5 R hit tab it can read our mind now these fuzzy search shortcuts are available for just about anything you could think of for example let's imagine we want margin-bottom 1r m mb for margin-bottom 1r n hit tab what if you want text-align:center ta for text-align:center hit tab you're in business now there's no point in trying to memorize these or study some cheat sheet the whole idea is that it's very intuitive I can tell you that nine times out of ten if you just type in an abbreviation of whatever you're thinking of it will know what you're trying to do okay now let's move past Emmet and talk about another vs code feature and that is the way that it handles color so with in CSS if I want to set the color for this rule color and then if you include any value here whether it's a keyword for a color or a hexadecimal or rgba if you hover over it it's going to give you an inline color picker so you can choose whatever color you want and if you click on this area right here that lets you switch between RGB hex HSL you get the idea and obviously this would also work for background color I won't bore you with that but it also works with shorthand so if you want to add a border border one pixel solid red you can see the color preview appears right there and if you hover over it you can choose a new color okay now the next Visual Studio code feature that I want to highlight if I switch to this different file is that it has built-in support for sassy CSS now I know that the atom text editor also has built-in support for sass but for example with sublime text you have to install a package or plugin for the editor to understand the sassy syntax so I just think it's cool that vs code ships with this by default so you can set variables you can use nested rules you can create mix-ins and the editor is not going to throw any errors or think that your syntax is weird cool now let's change gears from CSS and talk a little bit about JavaScript in particular let's talk about react and JSX so if I switch to this new tab here we can see an example of a react component and within render you want to return a bit of JSX now within this JSX it would be nice if we could use Emmet tab triggers right so maybe I want an unordered list and inside that a list item hit tab but that doesn't work and the reason it doesn't work is because at the moment if you look in the bottom right hand corner the syntax for this file is just regular JavaScript however if you click on that syntax and then up here if you type in react you can see we can choose a syntax called JavaScript react now as soon as I select that you can see that it's being used down here now the editor is going to be aware that we are within the context of JSX so now our Emmet tab triggers will work so I could say ul list item tab cool right and all of the other things you can do with Emmet HTML you can now do within your react component JSX I know this is available in other text editors but I just think it's cool that it works out of the box in Visual Studio code I didn't need to go and download a plug-in or a package it just works ok now changing gears the next v/s code feature i want to talk about is it's integrated command line so for example if i jump into this next file i have here we've got a bit of javascript i've got a constant that contains a string and maybe i want to validate this and check to see if this is actually an email address or not so i'd probably want to use the handy package on NPM named validator and to install an NPM package you're probably going to want your command line or your terminal now there's no need to jump to a separate program or window within Visual Studio code you can just click view and then integrated terminal now there is a keyboard shortcut as well but that's going to be slightly different depending on your operating system but once you click on that then down here within Visual Studio code we've got our regular operating system command line now if you're just working within an individual file the command line is going to open up to the root of your computer and that's not what we want we want our command line to be pointing to the same directory that this file that we're working on lives in now instead of going down to the command line and trying to CD into the exact directory that you want check this out if I close this visual studio code window and we can just open an entire folder with visual studio code so you can either drag a folder on top of the program or use the programs file open and choose a folder and when we do that we can see that we have this Explorer view with all of the files in that folder and if I jump into my test j/s file and now that I'm working with a project or a folder instead of just a single file now if I open up my integrated command line cool you can see that vs code automatically pointed the command line towards this current folder so I can just run npm install' validator cool you can see that created the node modules folder then back in my file maybe up at the top here I will pull in that package so const validator equals and then just require it in so require validator and now i promised there was a reason i made you watch all of that so check this out maybe down here i want to use the validator package and I know that it contains a method that can check to see if a string of text is an email address or not however maybe I can't remember the exact name the method so what I can do is just say validator dot to look inside it and then vs code will show me a list of all of its methods and if I don't feel like scrolling through the list I can instead just say validator dot and just start typing in the word email and then vs code will show me a list of all the methods that contain that word cool so then I can say yep its name is is email run that method and pass it my constant right so the email and I just think that feature is super cool instead of having to go to my web browser and look up the documentation for this package vs code we'll just look inside it for me and show me my options now I know a lot of IDE s can do this but usually I prefer minimalist text editors over an IDE and I think that's why vs code is so cool it's an IDE that's sort of masquerading as a minimalist text editor so it sort of feels like the best of both worlds now speaking of IDE s we might want to debug or test this code so first this is email net that is going to return either true or false so why don't we console dot log that so at the beginning of this line console dot log and now if I want to run or test this code my first option is to pretend that I'm using a minimalist text editor so down in my command line I could just run node and then the name of this file right now you need to have node installed on your computer to do this but you can see false and if I change this string of text to actually look like an email address and then run it again in the command line you can see it returns true cool so our code is working however in vs code you don't need to manually run node in the command line remember we just said that vs code is basically an IDE meaning it has integrated debugging so up in your menu bar for vs code you can click on debug and you've got all of the traditional debugging tools that's actually what this button in the left hand side if you click on that it opens up this debug section and you can see useful information like call stack and your breakpoints and you can typically find the debugging console right next to the link to see your terminal or command line cool and aside from testing node I've actually heard that you can directly debug from within Google Chrome so front-end JavaScript the last I heard is that you need to download a plug-in or an extension to get that to work so I'm not going to cover that in this video but maybe that's something you want to look into okay now changing gears one of the final aspects of vs code that I want to cover is its native git or version control integration for a quick example of this let me begin by turning the current folder I'm in into a git repo so I will jump in to my command line and you can always run get an it to turn the current folder into a repo this is of course assuming you have git installed on your computer okay and then if you're like me you usually use the command line to run git status and to add the different files to your staging area to make commits and then ultimately push your changes up to a remote repo well in vs code you don't need to use the command line to do any of that so I can actually hide my command line and this icon in the left hand sidebar is where you can manage your repo so if I click on that it's going to show me all of my changes now since this is a brand new repo that I just initialized on this first commit it's going to consider every file a change now just for the sake of this video let's imagine that the only file we want to add into version control or to the git repo is our test dot HTML file so if you hover over that you can click this plus symbol to add that to staging ok and then this area will show you what you've staged so far so what we just did is the equivalent of going to the command line and typing git add test HTML let's imagine that's the only thing I want to add to staging and now I'm ready to commit the so up in this message box I can type in my commit message first commit including the home page and then you can click this check mark towards the top to commit cool so now that HTML file is in version control so if I click this top icon to go back to Explorer mode and open up the HTML file let's make a couple sample changes to it so maybe change the title to hello and in the body area maybe I will add a bulleted list pie hey hello bye now as soon as I save that get is going to recognize that this file has been modified since the last commit and now check this out if I use this icon and the sidebar to jump to source control within this list of changes if I find that HTML file here it is I can double click on that and it's going to show me a side-by-side diff and if you scroll they're both in sync now this is a standard get feature but it's really cool to have instant access to a visualization of it it's going to highlight exactly what you changed you can review this really quick before you stage or commit I think it's super useful let's imagine I'm happy with this so I can click the plus symbol here to add that file to staging cool I've just got the one file in the staged area let me add a commit message updated home page click the commit check mark cool and if you've got a remote repo setup like github or bitbucket you can just click on these three dots and that gets you instant access to push and pull and once you actually set up your local repo to a remote you will also have an additional icon down here towards the bottom left corner it will be sort of a synchronized button that will automatically push and pull when necessary when it comes to get branches you can always see the branch that you've currently checked out in the bottom left corner and if you click on that you can cycle through any of your branches or you can a new branch without having to jump to the command line if you want to merge one branch into another just open up your command palette but what in the world is a command palette well up in the menu bar for vs code if you click on View you can then click command palette most people never actually click on this because instead they just memorize the keyboard shortcut that's listed here now this generic command palette has nothing to do with git in particular in fact the command palette is how you can do pretty much anything within vs code so if you ever want to learn more about this editor just open up the command palette and you can just scroll for seemingly forever through all of the features that are at your disposal or you can just start typing what you're looking for so if I type in merge that will show me the commands that include the word merge and there you can see there is a git merge branch option now that's going to end this section where we talk about git now let's finish out the video by just talking about the command palette in general for a moment it's a really neat feature because if you just memorize the one keyboard shortcut to open it you don't need to worry about memorizing any other shortcuts right away so for example let's imagine the indentation in your file gets messed up right and you're wondering if vs code can help you and fix the indentation just open up your command palette search for re indent you can see there's a command re and nth lines push enter you're back in business and V s code has all sorts of features like this that you can find in the command palette you can have it auto indent for you you can change the language or syntax without having to click with your mouse you can go into a full-screen Zen mode you can compare different files even outside the context of a git repo so you can compare the current file with your clipboard compare the file with another file there are all sorts of different features and I think this is a good place to end the video because you can just look through the command palette experiment and see what catches your eye anytime you can keep your hands on your keyboard instead of needing to reach for your mouse or trackpad that is a productivity boost it's little things like that that let you become a more efficient developer anyways that's gonna bring this video to a close thank you so much for watching I hope you're excited to try out vs code and until next time take care if you enjoyed this video you might be interested in my premium courses my newest one is titled become a wordpress developer and a big focus in this course is learning about the WordPress REST API this lets us use front-end JavaScript to control the backend crud operations of WordPress I have another course that's focused on git github workflow tools like NPM web pack Babel we learn how to write modular object-oriented JavaScript we learn about mobile first performance and mobile first responsive design we cover BEM to keep our CSS organized and a whole lot of other topics I have another course that is 100% focused on learning HTML and CSS and in the last course has nothing to do with coding it's simply how to create a website with WordPress without digging into the code so this is great for beginners thanks again for watching and I'll see you next time [Music]		