all right welcome back everyone so in the last episode we cover and how to draw circles on our canvas in random locations but that only gets us so far we only have static circles on the screen we want to make sure that these things are animating so that we give the user an interesting experience something that they might not be used to when they visit our site so how do we get our circles moving on the screen well instead of dealing with all these circles at once it's going to be easier for us to deal with just one circle and get that thing moving before we go on to moving all of these circles at the same time so let's go ahead and comment all the code we have right now out just so we can focus on that one individual circle comment our rectangles and then we'll comment out our for loop as well we're calling the sound instead of leading it because it's going to be useful for us to references later on because we're going to be using the same concepts so if we refresh the page you're going to see we have a blank canvas but now we want to actually create a circle a circle that we can get moving and basically bouncing off the sides of our screen so as you know based on the last episode we can create a circle using the arc method that we have right here so let's go ahead and copy and paste this put that right at the bottom and then we'll uncomment it out and then since our arc is using an x and y variable that we set within this for loop let's go ahead and give it a hard-coded value of 200 by 200 and if we refresh the page you're going to see that we have a circle on our screen perfect but now we need to be able to move the circle around we need to go from left and right up or down I just something to get it moving and you may be wondering well how do we do that well there's actually a particular method that we need to go about to get the circle moving and this method is first creating a function and you can name this function whatever you want we're going to call it animate because this function is going to be meant for animating and within this function we are going to be using another function called a request animation frame and this request animation frame function takes another function as its argument basically what's going to happen is we're going to use this animate function we're going to be putting it within a request animation frame functions argument once we call its anim function this requestanimationframe function is basically going to be creating a loop for us it's going to say okay we want to be able to create a loop basically and what function do we want to call to loop through it's going to say call this an animation frame function and then call animate and if we call animate again then it's going to call this function and we're basically creating a loop it's basically cycling through use over and over again until we tell it to stop but this is only going to work if we actually call animate at the bottom of our screen like so and if i refresh the page on that hand side you're not going to see anything because we don't actually have any data or any input being put into the browser for it to be read so to put some data in there we're going to put a console log statement with our anim function we're just going to console out whatever we want and if we refresh the page you're going to see that this is being called over and over and over again it's just incrementing up up up up up and it's going to keep going until we tell it start and there are certain ways to give it a stop but for the purpose of this video let's just focus on the basics of getting the same moving so to get this thing moving it's going to be good for you to understand how animation works in general animation works by refreshing the page we're basically going to be refreshing the page and each time we refresh the page we're going to be moving the circles x and y value incrementally by very very little so we're basically going to be refreshing the page and then we're going to be incrementing our x value by one and as we increment it by one the circle is going to move over to the right by one and we're just going to keep doing that over and over again and it's going to give us the illusion of animation it's going to look like the circle is moving from its current location all the way to the right hand of screen unless we tell it otherwise to do so so if we want to be incrementing our x value for our circle really makes sense for us to grab our circle code and place it within our animate function so if we put this within our animate function and refresh the page you're going to see that we now have a bold circle that is because the circles being drawn on top itself over and over again we only have X and y 5 200 by 200 and since it's in the same spot we're just drawing the circle on top itself but we want to make sure that we're changing these x and y values correspondingly so that they're not stuck at 200 we want to make sure that when the page refreshes itself it's 200 and then it's 201 when it refreshes again then 202 203 and so forth and once we do that we're going to get the illusion of animation so whenever we want to change a number we need to create a variable and we're going to declare this outside of our animate function is going to be called variable X we're going to set equal to 200 so instead of using 200 within our x value for arc we're going to use our new X variable and then we're going to add one onto the current value of our X variable each time the page is refreshed each time this animate function is called adding one on to X and once we do that and refresh the page you can now see that our circle is moving from the left to the right hand side of the screen but we're actually creating lots of circles in the process and circular paint drawn on top of each other thus creating this line from the center circle screen all the way to the right side now how do we fix that basically what's happening is we're not actually clearing the campus each time the page is refreshed each time our canvas is refreshing so we need to make sure each time before we call an arc that we are clearing the canvas using a sea clear rect method and this is the same thing as the fill erect method that we used up here earlier it's going to take an x value or Y value width and height so we want to make sure that we're in clearing the entire canvas from 0 0 the canvas is with the canvases height we're going to say 0 0 enter width and height so this is going to clear the canvas for us each time we want to draw on top of it and once we refresh the page now you can see that the circle is not being drawn on top itself over and over again we had this nice circle being created for us because we're clearing camps each time this animate function is being called so it's only getting us so far right now our circle is going off the screen and we don't really want that there's no reuse of it going out the screen because we can't see it let's go ahead and make it so that once it hits the side of screen it bounces backwards and then once it hits left side of screen it bounces backwards as well so it's going to be bouncing back and forth from the left and right hand side of our screen in order to do this we need to make sure that we have a conditional for our X velocity so right now our X velocity is 1 and if you're unfamiliar with velocity basically it is the speed it's the rate at which something moves in a particular direction so right now we're moving our x coordinate at a speed of 1 pixel each time and may function is called and it's moving in a positive direction so therefore our velocity is 1 pixel per frame refresh to the right now since we want to make sure our velocity can be negative or positive we're going to want to create a variable for that as well so our variable is going to be called the X and that is just a standard acronym for our X velocity and this is going to be equal to 1 so instead of adding just 1 for X value we're going to be adding the X to our one value and play around with this a bit don't have a changes value today we change it for it moves a bit faster a philosophy is higher but we're going to stay at one for the time being maybe we'll change it up at the end once we want to pick right-hand side of our screen quicker than just one so we know we have a velocity of 1 but we need a conditional access once our x value is equal to the inner width of our screen go ahead and change our velocity to a negative value so we're actually subtracting a negative number from X we're actually subtracting 1 from X which causes the circle to go from the right hand side of screen to the left hand side of screen so to write a conditional for this we're going to say if X is greater than the inner width of our screen make the X negative go ahead and switch the value of DX to a negative number and let's go ahead and watch what happens when we do that let's go ahead and amp this up to 4 and with that in place you've seen that is bouncing off the right-hand side of screen but if we look closely you'll see that the edge isn't bouncing outside of screen it's actually the center of the circle we want to take into account our circle has a radius and that the edge of the circle should be bouncing off screen and not the center of the circle we need to say if X plus the circles radius and our circles radius is equal to 30 but let's go ahead and create a variable for that right now so close radius is going to be equal to 30 so we want to say if our x value plus the circles radius is greater than the inner width of our screen then go ahead and bounce it off and I need to save that and there you go so once the edge of the circle hits the screen we're now reversing the velocity so that the circle is going from right to left instead of left to right but once it hits zero you can see that it keeps on going past the width of the browser so we also need to take into account that conditional as well and we can add an or operator in here and we can say if X minus rady some circle less than zero and go ahead and do the same thing go ahead and reverse the velocity of our circle let's see if that works perfect so now we have a circle that's bouncing from the right and left-hand sides of screen but we also want to make sure that the circle is bouncing off the top and the bottom of screen so right now we have an x value which is being varied up but we don't have a Y value which can be varied right now it's a hard-coded value of 200 so we want to make sure that we have a variable which can be set and changed up in the process so we want to make sure that we have a Y variable this is going to equal the 200 as well to start we are going to also need a Y velocity so we're going to say bar dy is also equal to 4 and then now that we have a variable for a y-coordinate and also a variable for our velocity we now need to make sure that we're adding our velocity onto our y coordinate we're going to be adding our dy aunt event and with this in place you're going to see our circle moving diagonally but once it hits the bottom of the screen we're not actually bouncing anywhere we're going to make sure that once the circle plus it's radius hits the bottom of screen that it bounces upwards and then once it hits on the screen bouncers downwards so we need to do the exact same thing that we did for our X and inner width values so all we're going to do is add another conditional we're going to say if y plus the radius of our circle is greater than a screen to inner height and we are going to reverse our Y velocities direction so dy is going to be equal to negative dy let's test that out you see it bounces right there now we just need to add or operator so we're taking into account what should happen with circle hits top Oh screen so we're going to say if y - radius is less than zero reverse the velocity as well so now you see we have a circle that is bouncing off the top left right and bottom of our screen cool so let's take this one step further and randomized the velocity of our circle will also randomize the position so whenever our circle is spun it's going to be put on a random position from left to right hand side of screen and it's also going to be traveling in a different direction each time the circle spawn so you see right now if i refresh the page the circle keeps going from right here to a diagonal direction and bottom right each time i refresh we want to make sure that the circle has the potential to be spawned anywhere and go in any direction on that spawn so there's a little bit of math involved with this but nothing too hard let's go ahead and get started with that so right now our x and y value is set to be a hard-coded value of 200 by 200 but this isn't random at all we already know it's going to be over here so we need to add what is known as a math dot random function and this math dot random function all it does is it generates a random value 0 through 1 as we covered in the last episode so we want to make sure that we get a random value from the left hand side of screen to the right hand side of screen so we're going to multiply this by the window's inner width and then for our Y value we want a random value from the top and bottom of screen so we're going to multiply this that's not random by the screen enter height so that'll give us a random position each time we refresh the page but it doesn't actually give us a random velocity technically whenever a circles spawn it's going to be going from somewhere over here to a bottom right direction so we want to randomize our DX and our D Y value so that DX can be negative or positive that way once the circles spawn DX if it's negative it's going to be traveling to the left and if DX is positive it's going to be traveling to the right same thing with the Y is B Y is positive and it's going to be traveling downwards if t y is negative is going to be travel upwards so how do we make sure that we get a random value that's either negative or positive well we're going to be using the math that random function again so this will give us a positive value each time we get there zero through one all we need to do to make sure we're getting a negative value is subtract zero point five from this and if you think about this math.random the greatest value can get with math.random is one so if we get one and subtract zero point five our greatest value is going to be 0.5 but the lowest value math.random is zero so if we get zero and subtract 0.5 we are going to get lowest value of negative 0.5 so that's how this works so you can get either a negative or a positive value just using this simple arithmetic function right here so we want to make sure that we're doing this for a while you as well and with this in place we should see some randomized velocities and there we go it's a little slow at the moment we can go ahead and amp this up a bit let's go ahead and place these in parentheses and let's multiply this by let's just say a factor of 3 I should speed things up a little bit all right so a little faster let's go ahead and amp it up a little more I'll set up eight there we go okay we're getting we're getting some speed here so as you can see sometimes it's fast sometimes it's slow that's because we're getting a random x and a y value if we want it to be something like four to eight a random speed of four to eight well there are certain things we can go about doing that but for now let's just keep it simple know that this is how you get either a negative or a positive value and you can amp up the the speed of it by multiplying it by a factor that way you can get either value of 4 to negative 4 using what we have here all right so we know how to animate a circle we know how to bounce it off the edges of screened but sometimes you see that the circle is stuck on the edge of screen and there's a reason for that is because the conditionals are interfering with spawn location of the circle and it's hard it's hard to get it to randomize on the edge of the screen so we're not going to worry about that just yet what I want to show you guys is how to create multiple circles that have their own independent X Y values independent velocities independent radiuses radii so that we can create multiple circles on-screen have them all go in different directions I'll see how to screen independent from each other so how do we go about doing that well if we wanted to create another circle here and have all the same functionality that we have going on right now well there's quite a bit that would go into that we would need to create another arc function and we need to create a whole nother set of variables over here so that we can have a new math.random for X a new math.random for a y new mass transfer velocities and so forth we'd also need to conclude conditionals for all those new variables and I can get really tedious in the code and this not good price because we're duplicating our code we're also repeating ourselves over and over again so to alleviate this we are going to be using object-oriented JavaScript and we're going to start off by creating a JavaScript object and that javascript object is going to be a circle so this is how you create a JavaScript object with JavaScript you're going to create a function and that function name is going to start off with a capital letter to indicate that this is an object so we have a circle object but the circle object is going to need its own independent x and y values each of our circles is going to be placed in individual spot separate from one another so we need to make sure each circle has its own XY value so to give each circle zone x and y value we're going to say that this X is equal to X and where do we get this x-value well we're going to be passing it through our circle function each time we instantiate a new circle so each time we create a new circle we're going to pass in an x argument if X arguments going to travel right over here and we're going to be setting the circles X to whatever value is passed through and we're going to do the same thing for our Y value we want to make sure that our circle has its own independent Y value we're going to say that this not Y is equal to Y and then we're going to crin argument for our circle called Y like so so we have a way to set our x and y values for our own independent circle but right now we don't have a way to draw this these x and y values are kind of worthless if they're not being used anywhere so we want to make sure that we're creating a method within our object and this method is going to be called draw and instead of being equal to a property like this we are going to be setting this equal to a function an anonymous function it doesn't have a name it's just going to include whatever contents are inside of it so within this anonymous function what's going to happen is we're going to draw the circle whenever this is called so let's go ahead and instantiate a circle real quick so you can get a better idea of how this is working we're going to create an object a variable to be exact and this variable slash object is going to be called circle this is going to be equal to a new circle with the x value of 200 and a y value of 200 this is how you instantiate an object with JavaScript you precede the function name with new and it's going to store all these properties and methods within the circle variable so if we wanted to fire whatever code is within the synonymous function within this draw method right here let's go ahead and add some dummy code here we wanted to call any of this fire this trial function well we would take our circle object and we call the draw method at the end of and that's really all we have to do if we refresh the page now you're going to see that this function is being fired if we comment this out function is not being fired so we want to make sure that whenever this is sign right here this trial function that we're actually drawing a circle so we can go ahead and grab our draw circle code right here replace a console log with it now if we draw out our circle you're not seeing anything as of yet that is because we still have our animate function running and our animate function is clearing the screen each time the framerate is being refreshed so the circle the draw function is outside of our animate function let's go ahead and throw it in there so we can actually see it alright so there's our circle we created a circle instantiated it started within a circle object and then we actually drew it on screen with this method that we have right here so right now this is a static circle this is why we had early on with some episode but we want to get it to the point where bouncing out of screens moving like this circle right here so how do we go about doing that well instead of just having just one draw function we're going to be including an update function and this is going to be equal to anonymous function as well and we're going to include the same code that we have right here for a velocity and all the conditionals to switch up the directions of our velocity so let's go ahead and take this our circle is not going to animate anymore as you can see let's put it within this the update all we need to do now is we need to tweak a few things here first we need to make sure that each individual circle has its own X&Y velocity so we're going to say this dot DX is equal to DX and since we are bringing in a DX right here we need to make sure we're passing it through as an argument which means we also need a dy for when we include this that dy right the needless we have X velocity we have a Y velocity each engine circle is going to have its own independent from one another and now we just need a reference these within our update function so right now these are referencing random variables we need to make sure that they're referencing the circles properties so we need to prepend all our velocities with this all right so right now our circle doesn't have its own radius independent from one another right now we're still referencing the radius that is down here so we want to make sure that we also give our circles their own radius which can be referenced separately from any other circle so this start radius is going to be equal to radius since we're including this right here we need to make sure that we have an argument within our circle that's going to be called radius all right so we want to make sure that now that we're creating a radius property for circle that we are pending all of our radiuses radii with this that way we're referencing only this specific circles radius all right so let's go ahead and fresh the page and see what we get right now we're still getting the same circle that's being randomized within our animate function well why isn't the circle being drawn why is that well part of the reason might be because we actually forgot to reference our properties within this arc right here how is that being drawn beforehand without these being reference I'm assuming that the x and y values are being referenced from these x and y values down here but I'm not entirely sure so we want to make sure that we're referencing the circles properties right here instead of X and y variables that we declared previously so we also want to make sure that we're referencing the circles radius and if we refresh the page still nothing and you can see we created a few new arguments for our circles so we need to make sure that we're filling all these out we have an X bar view we have a Y argument we have DX argument we also have a dy argument we also have a new radius argument we need to make sure that we're filling each of these that we know that we want to create our circle at 200 200 let's go ahead and give our X velocity start at that on 3 same with our Y velocity let's give this a trace of 30 refresh the page okay so now we have our circle being drawn which is pretty cool but it's not moving as of yet and that's because we're not actually calling our update function we need to make sure that we're not just calling our draw function but we're also calling our update function so I also pray circle that draw was circled by update and still nothing now our circle is a name being drawn that is because only our update function is being called instead of our draw function we want to make sure that we're first drawing out the circle and then we're changing all of its properties once we draw the circle that's when we can actually change properties tab will move across clean in different directions so we can actually call this method within this update method all we need to do is say this that draw and excuse me actually put this in the wrong spot as you can see this not update only goes from here here we need to make sure that we're including this trial function within our update function so if we put that there refresh the page key now see where we're in progress again we actually have a circle moving that's updating and bouncing out the sides of the screen independent from any other circle is being drawn so let's go ahead and get rid of the static circle it's kind of hard code a circle that we created within all this other stuff I'll take this code paste without the top so we can use it later we're going to want to randomize our values let's just go ahead and comment this out for now let's go ahead and delete this code right here so all we have is our circle bouncing out the sides of the screen okay perfect and since we had all this randomization up here let's go ahead and integrate that into our code really quickly so I know I just said put out top screen and commented out but let's go ahead and put it right above our circle so we can get to using some of these functions that we have here so if we were to get this one circle randomized then we can go ahead and comment all this out and insert all the respective values within the respective positions but we want to be creating multiple circles on the screen so in the last episode we covered the for loop and we know that the for loop is meant to loop through something a certain amount of time the pre specified amount of time so we're going to be creating for loop everyone say var is equal to zero and we want to run through this a hundred times so we want to be creating a hundred circles basically we're going to throw our circle instantiation within this for loop and we want to make sure that we're creating a hundred circles and storing them within one variable and to store 100 circles within one variable we are going to be creating an array called circle array the crane array and this is all you have to do you just have to assign your variable to some bracket so this is going to store all of the circles that we create so to actually store new circles that have independent values within this ray 100 times what we're going to do is we're going to create a new line within our for loop and circle array is going to push a new circle each time this for loop is ran through so we can actually get rid of this code right here and we want to make sure that all of our values are randomized each time this for loop is ran so we're going to grab all the code we have right here put it within our for loop uncomment it and now we can use all these values each time we instantiate a new circle so circle is going to have a random x-value random y-value random x velocity or n my velocity and it's going to have a static radio sense radius it's hard-coded at the moment so what's happening is we're creating 100 circles each with their own individual random XY X velocity a Y velocity coordinates it's going to be different each time because math.random is going to produce a different value each time this for loop is ran so we have our circle array and since we deleted our circle variable let's go ahead and delete this right here if we refresh the page you're not going to see anything because we're not actually drawing anything with their animate function but if we console.log our circle array you're going to see that this array is full of 100 circles we can open these up and if we look at our first circle you'll see that dxdy x and y have very randomized values and if we look at our second circle you'll see that this has different dxdy x and y values from everything else so all these circles have different values that are independent from one another which means they'll spawn a different location and move in different directions but how do we actually get these drawn on the screen that is the next question we need to answer so to get these drawn on the screen we are going to be creating another for loop but this for loop is going to be inside of our anim function and we're going to start things off the exact same way we did up here now technically we could say a hundred right here but usually it's best practice to declare how long your array is dynamically so basically what this is going to do it's going to return the length of our array and you can see our length is 100 if we were to add more circles into this then it would automatically update this link to something like 100 100 to 200 300 and so forth so basically we're getting the length of our array automatically rather than hard coding something out like 100 we're going to say circle a dot length and all this is doing is saying run a hundred times since length of our circle rate is a hundred that's exactly what we want because we want to be able to access all the individual items within our array and to access all the individual items within our array we need to first access our circle array and then access each individual index by using something like zero one two three four five and so forth but instead of typing that out manually we're just going to throw our eye in here and since our for loop is running repetitively over and over again it's going to be accessing it's going to be running through all of our circles within the array automatically for us and since it's doing so basically what's happening is the first time this loop gets called we're accessing our first circle and our first circle has an update function so we are going to be calling update on it and then automatically it's going to go to the next circle call update the next circle update it's going to do that until it reaches the very end of all of our circles so if refresh the page now you can see we have circles being spawned on different locations being moved in diff directions all over the place and this is kind of crazy right now so let's go ahead and down our velocity a little bit and that's a lot more smooth that's a lot better looking than it was before all right so right now our circles are being spawned to the point where they're radii are getting caught in the left and right hand side of screen same thing goes for a top and bottom we want to make sure this is not happening we all make sure our circles are only being spawned within the campus's coordinates the canvases in our boundaries so to make sure that this is happening let's go ahead and move our radius to the top of our for loop because we're going to be using it within this X&Y setting right here and instead of spawning our x-value in a random coordinate from zero to the site's inner width we need to make sure that responding in a random coordinate from 30 to our inner width - today a matter of a circle and what that's going to do is it's going to prevent the circle from getting caught on the sides it's only going to respond in a location in which it can ensure the circle can bounce off the sides of the screen so we need to first subtract our circles diameter from inner width of our coordinates and I do so we're going to say radius times 2 we're going to wrap this in parentheses like so and I should prevent them from getting caught on the right-hand side of the screen but now you can see they're still getting caught on the left-hand side screen we need to take that into account as well so we want to make sure that our x-coordinate is greater than our circles radius so to do so we're going to say add the radius on to the end of this value right here and if we do that now you can see we're not having an issue with the left and right hand side summary screen the circles are no longer getting caught there but the circles are still getting caught on the top and the bottom of screen so we need to take into account that as well so we're going to be altering our y-value so that our height only has the possibility to be 0 from inner height minus the circle diameter which is going to be 62 radius times 2 throw that in a parentheses so that can compute so when issue as a bottom of the screen but once this computes we want to make sure that our circles are going to be spawned in a location that's greater than circles radius so they're not getting caught on the top so to do that all we're going to do is add circles radius onto that and now you can see all of our circles are being spawned random locations random velocities and all inside the canvas coordinates so that's a lot to cover we just covered object-oriented programming animation the velocity X values some math of math.random getting these things to spawn and different coordinates making sure that they're not spawning out the screen we also cover conditionals a lot to cover in one episode so don't feel that if you're not getting everything right away guys but really focus on the main subjects that we cover I want you guys to take it really easy experiment with all this change the colors of these you can get some really cool effects going on just by changing colors the velocities the speeds and so forth let's go ahead and change the color to our circle within our draw method let's go ahead and give it a fill see that fill save that you see that we already got a pretty cool effect going on with our black background on our blue border go ahead and play around it's a lot go ahead and you Square is lined and so forth anything you'd like to use see what kind of stuff you can come up with go ahead and leave a comment with your work I'd love to check it out if you need any help code reviews our show for its let me know any more than glad to help any of you but anyways this is hardly a lot to come in one episode so I hope you guys enjoyed and I look forward to you in next one we're going to learn how to interact with you face on event listeners with mouse movement and also touch your pants on your phone so I hope you guys enjoyed and I look forward to see you in the next episode later [Music]		