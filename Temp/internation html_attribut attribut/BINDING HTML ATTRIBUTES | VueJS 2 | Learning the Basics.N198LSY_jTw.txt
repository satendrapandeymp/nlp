welcome to the world of you chess which is awesome because view GS is great in this video we're going to have a look at how we can dynamically bind attributes of elements and we'll also have a well a little addition to events let's put it like this so let's dive right into it this is the application with which I'll work a very simple application it has a div with which holds my app with the idea which I control with this view instance this view instance only has one property in the data object which is named CSS class and an empty string initially and then I'm outputting this string up here in my template and I have an input field where a listen to the input event but I'm not doing anything up on well typing the first thing I want to do is I want to store it text the user enters into the input in this CSS class property here I can do this by setting CSS class equal to well to what I somehow need access to the value of this input well in JavaScript whenever the input event gets fired or whenever any event gets fired we get a default event object passed to the event listener that's nothing view J's specific that's just JavaScript and how the Dom works this default event object we get has in the case of the input and many other events the target of this event so on which element was this event executed for example the target of an input event would be the input element where we type something in so we need access to this target to get access to the value of this input element now for that we need access to this default event object and it turns out in view che as we can access this data which is passed through an event like this default event object we get automatically by accessing dollar sign event here between the quotation marks in our Veon directive now here's something which is really important it's not called dollar sign event because we're accessing this fault event object the other sign event is simply a local variable kind of created by view chairs which gives us access to which ever data our event gives us automatically now this data we get helps to be the event object in this case but as you might know you can also create custom events and view chairs something I'll also cover in another video now in such a case you can pass your own data and you would still access this own data through the dollar sign event very variable here because again dollar sign event really only refers to the data passed by the event to which you're listening so here this happens to be this built-in event object and therefore we can access the target of this event target is a property D default javascript event object has and then the value of the target value is a property and input element has in JavaScript so normal Dom property of a input element and well we know that event target is an input element so this gives me access to this value and this means that now if I type something here like test we see it appear down there this is great but do you wonder why I named it CSS class well because I want to style this paragraph dynamically I want to allow myself to input the CSS class which I want to attach to this paragraph so I want to choose something like this I do have my class attribute and there we could have let's say our double curly place braces and then CSS class and now if I had here in the top right corner in these CSS part if I add let's say a red class I want to set the background color to red and I also want to add let's say a blue class that we have something to play around with so here we want to set the player not the black ground the background color to blue and what I want you to happen now is that if I type something here like red the red class gets attached here but if we inspect it well oh in that we got to double curly braces so somehow this does not work in the same way as it works here when we use it in normal text and not inside of a CSS attribute well that's just how futures works we can't and we must not use curly braces here when you well when accessing a normal attribute when accessing something else then just plain text as we do here we instead need to bind this class property or attribute here dynamically and we can do so by passing and it as an argument to a directive UJS knows it's kind of the same as with the event here we're passing the default input method or excuse me event which exists in JavaScript and in the Dom we're passing this event as an argument to devient directive now I need to pass the class attribute to another directive this directive is called we bind and I pass it with a colon and with that I'm telling view chest I want to bind some attributes dynamically on this paragraph item and the attribute I want to bind directive dynamically excuse me as class now this allows me to simply output the name of the property the value to which I wanna bind between the quotation marks here and this of course refers to my CSS class property in the view instance now if we reload this watch what happens if I type read it becomes red and if I type blue it becomes blue because if we inspect this we see that as I type here the CSS class which is attached to the element changes and this is how you can bind attributes of elements reactively with the bind telling view chest yeah please attach the normal class attribute that shouldn't change but the value of that attribute that is dynamic from now on and we achieved this with rebind here		