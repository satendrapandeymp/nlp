all right so as normal we've got a couple announcements to go through at the beginning of the talk afterwards Zach from Thomas streets gonna come up and give a lovely presentation on integrating famous with angular I'm really excited to see it before we get going just a couple things about how we've been doing with angular it's been a couple months since we got together so we actually got through 17 releases I'm super impressed it's the easy to impress me a bunch of release releases in the 1.2 vein and then some of the beta ones in 1.3 I got tired of counting so I just said there's hundreds of PRS and issues closed but there's some interesting important things that are going on so we're doing some work on SVG and math ml and actually Ben Lesh where are you Ben yeah he's doing some more impressive work that'll and hopefully sometime soon but we do care about this area Oh some of the things in 1.3 and a lot of these a lot of the things we focus on are in the vein of performance and if you'll notice at the bottom there's 38 individual things we did in that area but one of the one of the things in 1.3 we added based on a lot of your input is lazy one time binding we're doing some work on how we do forms with a validators pipeline for ngmodel and giving touched and untouched States to input we've done some other stuff but a ton of great work has gone into that on the angular dart side only four releases but but I actually did have the willpower to count how many PRS are in there and stew in an 83 so that's good some other ketchup stuff is happening like for testing we allow you to now turn off animations we we support cross-site requests with credentials we've got this interesting world that we're living in right now where some of our folks want to use some of the new web components technologies like shadow DOM and some would like prefer to stay in the old world and so angular dart is the place we're supporting both of these these will probably roll into what we do in angularjs sometime soon so you see things like we now support automatically invoking polyfills for browsers that don't have a native web component a ssin but we also are supporting we've got sort of shadow Dom like support for four components without shadow Dom that's coming down the pipe and again we're also very focused on performance over on the angular dart side with 28 specific things that have happened over there one of the big things that that I think I'm super excited about that we're doing google-wide is this new UI idiom set or or set of set of ways of doing things that you I called material design and there's two links at the bottom and I'll there's a link to my whole presentation so you don't have to write down these links but we have the specification for material design at Google you can see all of the cool stuff that it encompasses in terms of animation and style and layout and if I know how to use my mouse we have a preview site on how this is going to appear in angular we've been working with the folks at drifty who are the guys who do ionic framework to do this in that they're doing most of the work and so thank you ionic folks but they've they've put together a bunch of demos for all of these all of these new cool components and you can go check it out it's not in release state I wouldn't use it but we hope we hope to make a lot of progress shortly next cool thing one of the one of the things we realized while doing the material design work is that the our router had aged beyond its useful life I think everyone realizes there are many other good implementations of routers out there and instead of completely serving from scratch we looked at all of them and stole the best ideas thank you to everyone else who built some good router technology and we had it originally intended to put this in angular 2.0 and we decided we actually needed it sooner than that so it will be part of angular 1.3 it has more features than I can I can list you can go check it out but this should be landing soon in the 1.3 branch one cool example before we get to the main presentation if you're interested in building a responsive layout site you might check out the Virgin America site built with angular there was a cool write-up about this in Wired and there's a link there on one side of the page and then you can actually just check out the page and try it yourself works great on mobile works great on your desktop I'm excited about what those guys are doing so link to this presentation if you want to see all of these good bits for yourself and after that I'll invite Zach up to talk about famous thanks guys hey guys is this on cool so I'm Zach Brown from Thomas Street we've been working on the famous angular integration for the last about five months now both side-by-side okay yeah cool this yeah okay cool so yeah we've been working on the famous angular integration for the last about five months now so let's see so Thomas Street famous and famous angular you might have questions about each of those Thomas Street we are a design and software development consultancy we focus on interaction design smooth UX and then especially angularjs app architecture and then building famous angular is an integration between angularjs I don't think I need to describe that to anyone here tonight and famous which I think I should describe a bit what is famous well it is an open-source web rendering engine it really focuses on performance it lets you build high performance high frame rate animations that function well across platform across devices and it lets you create these animations and interactions imperative Lee so it really lets you build the sort of interactions and animations that you can achieve with native mobile authoring but in the browser in JavaScript it's pretty cool I think incidentally the CEO and co-founder of famous Steve Newcomb is here tonight if anyone springs any difficult famous questions on me I might deflect them to Steve yeah any time so I think a good way to describe what famous is would be to show some of it in action so here's a simple demo it's simple as in it took just like a couple days to build this it's a Flickr API consumer specifically these are images from Flickr's Commons collection so that they're friendly for YouTube and it's just a way to sort of scroll through and I'm going to actually enable mobile emulation here so we get touch events so here we just have like a scrolling feed of flowers because that's what we're searching for you can take any of these flowers and swipe sideways and you get the title so this is all done with angular's data binding as well as HTTP service a lot of very familiar angular concepts but the way it's rendered the UI is handled with famous and so that's why it's so smooth that's why we get this cool like this sort of click and drag like smooth animation is something that would be very difficult if not impossible to implement in vanilla declarative CSS I'm sure this is the space where famous really shines and so show some more angular nosov it we could search like dog and we'll see that everything updates accordingly so this is poling live from the Flickr API and again that's where angular really shines this sort of that API connection the code is available for this if anyone wants to check it out on github and I'll show another famous demo real quick so this one is in pure vanilla famous this is the Facebook paper app implemented as a book or you know following that UI and you can see again this really feels like a native mobile app you know you can swipe through it interacts just like the Facebook paper app so again pretty neat stuff that you can do with famous and this is all JavaScript let's get back here all right so why imperative why should we be building these apps imperative ly instead of making use of the standards that we have in place with HTML with CSS there are always trade-offs between imperative and declarative coding Styles imperative code like JavaScript tends to be turing-complete and really expressive it allows you to do pretty much anything in your code the downside is is it can tend to be more complex declarative code on the other hand tends to be simpler to understand and maintain you're really just describing something like content HTML and CSS are examples of declarative code where you're just describing content the problem is when you're trying to do things like complex animations you sort of hit a ceiling so here's an example this is from CSS animate calm I did just like a simple animated cube across the page like it rotates and it translates across the page and this is what the CSS looks like really difficult to decipher like even with me describing what it does like this is still really opaque right so this this is that CSS ceiling this is where declarative sort of hits its limits so on that divide but not philosophical divide famous as philosophy is that these interactive animations are just fundamentally better suited to imperative code I'm when we look at the present day landscape of mobile apps users are really spoiled they're really spoiled into having things go boy as as famous as CTO and co-founder loves to say famous lets you design apps in that way for mobile so let me clarify famous a little bit more there is the famous university platform is available from famous you can get to it at famous slash University it's a great platform for learning things it has a number of lessons that you can go through we're aiming for by the end of this week which is coming up pretty darn soon to have famous angular content here as well so be saying this publicly I guess will hold me to that but right now where we have is vanilla famous so let's look at what some famous code looks like this is big enough to see right cool so here's one of the lessons where we can position a box on the screen pretty simple we create a modifier so famous the famous vocabulary can sort of be boiled down to modifiers views and surfaces surfaces are where you put content like HTML I actually literally HTML is the content that you put in them you would put a div for a form element modifiers are the workhorses for animation and also positioning or transforming these elements so if you want to rotate if you want to skew if you want to you know animate across the page modifiers are the workhorse for that so we see here is a modifier in a surface and this modifier is affecting the position the translation of that surface so if I update this to 150 we'll see it move down I'm updated to 250 this is the y-coordinate we'll see it move down and these are assembled in this case well they're assembled as a tree famous keeps track of a render tree so we're adding a surface as a leaf node a state modifier as a parent to that more or less and then the context as the root and this is a very simple basic example of famous code so no animations here yet but I just want to kind of show this as the idea so started to describe this how does it work instead of using the Dom things keeps track of its own hierarchical tree a render tree and a data structure called a scene graph a scene graphs are fairly commonly used in 3d and game applications like DirectX OpenGL it is a very elegant way of handling hierarchical transformations of content so I have a little scene graph dance I like to do to describe this it's in relation to this tree that you can see on the screen right now there's a person that is the root of the tree and this person is comprised of several children in the head and the torso or the arms the legs so if you imagine me as the the root of the tree I am the person you can rotate this tree and the entire body moves you can also rotate one of the arms one of the lower down not root elements of the tree and it will rotate are we good you will be you missed the beginning of a dance I think okay the left screen are we good now okay thanks okay back to the scene graph dance so you can you can rotate the root and the entire tree will rotate as well but you can rotate any of the children elements and they will rotate individually so I can rotate my arm which rotates my hand and my fingers but does not rotate my body I can rotate my finger and it rotates just my finger but not my arm in my hand but if I rotate my body the finger is the hands the arms all move together so a scene graph is a tree representation of 3d structures like this and it becomes a very elegant system for handling these hierarchical transformations this is the structure instead of dong that famous uses to keep track of its hierarchy cool so in order to make this happen famous makes it in the browser at least a famous makes use of css3 s-matrix 3d transforms which gives it its GPU accelerated performance famous synchronizes takes of its engine which is based on the requestanimationframe api to keep things smooth so in a well-built app this will be 60 frames per second on each tick of the engine famous dives in and uses some linear algebra magic to composite this tree into a series of flattened sibling dom nodes when it's outputting to the browser that it then feeds these matrix 3d transform attributes into and everything gets positioned on screen if you change a modifier value for example it's going to change how everything is composited and then you'll see something move across the screen and then the way famous and axe animations is but we'll get into this in a second transition rules bound to modifiers it's pretty neat how it all comes together so this is extra cool because although it's focused on browsers right now famous was carefully built to be agnostic of its output layer it supports Dom currently it's in the process of supporting WebGL with its upcoming upcoming mix mode support which is really cool stuff it will allow WebGL and Dom to coexist in the same coordinate space creating a div will be as easy as creating a sphere it's pretty cool stuff this is really pioneering work in the web space and then you could have the sky's the limit on the output layers that you could support so famous in its early days was working with Samsung TVs like you could imagine outputting to a Samsung TV or you could imagine outputting to native Android or to native iOS so it's a pretty cool platform that they've got going and famous is 100% JavaScript so you might ask what about MVC what about these nice separations of concerns what about views at all DOM is a great solution for representing hierarchical uisce probably everyone in this room has used Dom I think it's a safe bet but famous doesn't really use the Dom it has its own vocabulary of surfaces and views and modifiers instead of the divs and spans and peas that were used to so how can famous and angular get along you know without that hTML is the common ground at first glance angular and famous might just seem to be orthogonal like maybe they're just fundamentally different ways to build apps maybe they can't get along at all and you know angular builds off of existing standards by bringing new features to things like the Dom like two-way data-binding famous on the other hand says you know like a lot of these standards are based on years of cruft and backwards compatibility Internet Explorer you know that kind of stuff why don't we just try things a new way why don't we take this new approach and this is controversial for sure there are people who love it there are people who hate it and the technical trade-offs are similarly extreme there's a lot of amazing stuff you can do if you sort of throw off this this burden but there's a lot of stuff you kind of have to start from scratch with so when Thomas Street decided to sort of take on this integration we took it on on our own time as an experimental proof of concept and you know we had an idea for how we might be able to bring it together and when we got our proof of concept together we decided you know let's outline a handful of requirements let's if we're gonna build this integration these are the requirements we are going to follow we definitely need to maintain famous is rendering performance we definitely need to support angular's two-way data-binding we should support using any existing angular components any existing directives third-party things ui-router that kind of thing similarly we need to support existing famous components including third-party components you know new or new or pre-existing and this one's important we needed to minimalize conceptual overhead so that any developer who wants to pick up this library is we can we can make use of these libraries existing conventions instead of forcing new ones on developers so if those requirements in mind so one of our first chink in the armor that we were able to exploit was this observation that famous is render tree is simply a tree just like the DOM and there had to be some way to map these one-to-one so previous integration attempts between famous and angular had tried to make famous and angular work on the exact same dom nodes so you can imagine trying to wedge you know curly brace data binding into a Dom node that famous six total control of with these sort of opinionated grasps on the Dom it just didn't work out so what if we introduced a compilation step angular is already a Dom compiler so that's pretty awesome we just needed to figure out a way to communicate this structure of the Dom into something that famous would understand so here's a screenshot from from Batarang angular maintains a hierarchy of child scopes and this hierarchy maps to the hierarchy of directives in the Dom so we have is this data structure which is representing the hierarchy it seems like a good start this scope hierarchy is what we decided to transform into the famous render tree hierarchy so the way we solve this was by eventing every child as it compiles sends an event upwards to its parents which are in turn listening downward for these events when that connection is made it propagates upwards so the leaf nodes talk upwards they talk up or is the talk up was until they converge at the root which is the famous context the fa apt directive and famous angular and that entire tree then at that point is just handed to famous and is famous is told like ok render away so let's dive a little deeper into angular here angular's directive compilation phase has three customizable steps there's your compilation function which is supposed to return an object which has two more functions in turn a pre and a post link this is if you go like the most fleshed out directive API there's a shorthand where you can just do the posting function but let's let's go all in so we have these three customizable steps if we look at this child scope hierarchy the pre link functions and the compiled functions will execute in a pre order traversal of this tree whereas the post leaves will fire in a post order traversal so if you've ever taken an introduction to computer science class you may have learned the sailboat method of traversing a treaty which is you start at the root and you traverse the tree counterclockwise so this mouse will be the sailboat here we go along a pre-order traversal would be we sort of tell you these nodes as we cross the left side of them so a and then B and then D and then e and then C you'll notice on this diagram that the compiled and pre link are happening on the left side of this traversal whereas the post link and a post order traversal will happen when the sailboat goes across the right side so d a b c and a so if you put this all together and we do one traversal of this tree and we put them all together and we have compiled a pre link a compiled beep really be compiled the a pre link D and that's the order in which these functions are fired when n Gators compiling so the reason this matters is because of the observation that any time a post link is fired for example DS post link we are guaranteed that its parents pre link has already fired and actually that all of its ancestors pre links have already fired and the reason that matters is because that's how we were able to set up these event listeners so on the pre links we set up an event listener we say everything that can be a parent go ahead and listen for potential children in turn on the post link the children fire their events upwards and we're guaranteed that the listeners are already set up and through that we were able to sort of assemble this tree so since we're able to map this hierarchy I this lets us write directives in angular that become a sort of a domain-specific language built on top of HTML that allow us to author famous and this has turned out to be a really excellent use of angular's directives sort of lets us write our own mini language so for example this famous code very simple we're just creating a view we're adding a surface to it we're setting its content and then we are adding the surface as a child to the view looks like this in famous angular just HTML a view a surface and a div so to someone especially coming from HTML this is very familiar and intuitive and it also brings this declarative view layer back to famous I know we were just talking about this imperative declarative divide but famous or angular actually straddles us really well by allowing you to have your view and your your logic that manipulate manipulates that view separated with data binding as the bridge between the two and it actually works out very elegantly for famous angular as well so started to cover this you know if we're talking about this imperative declarative divide if you're diving into full vanilla famous why would you want to use HTML isn't that the stuff we're trying to leave behind not necessarily so famous thank you that makes it very easy to integrate famous with any existing web apps or angular apps especially it allows you to use angular's features like data binding with famous components like the example I just showed where you have a surface with angular data binding aside I really encourages this clean architectural separation of concerns that we love with angular it allows you to use custom directives angular is reusable building blocks inside of your famous apps and of course you get the rest of angular's benefits like testability and structure so I I would like to think those are all wins what about performance though so as I mentioned this was a top priority in designing this integration in the single threaded line of java scripts any synchronous thread locking code that runs more than one sixtieth of a second is going to stutter these otherwise beautiful 60 frames per second animations so that's cool we can work with that but unfortunately angular's digest cycle can be hungry if you'll excuse the horrible joke so requiring digests in order to reflect changes in famous estate was not something we could use and this was another stumbling block for previous integrations so for example if we're moving a box across the screen or we have that cube rotating in space if those state changes are happening due to angular digests it's not gonna be that pretty so we needed to find a way to decouple angular's digest cycle from famous render cycle a couple other cycles and there are a couple prongs in this approach first of all we use angular's parse which is a really handy service that allows you to parse a string into an expression that gets evaluated in the context of a scope let's see if I can make that clear so let's do so she's just boilerplate routes so I'm just gonna sort of dig out route scope and parse so I'm doing some angular boil boilerplate to make this work so window dot route scope equals scope window dot parse equals parse okay I knew someone on angular team was gonna be like that's that's too much in any case we now have route scope we now have parse but thank you for - so let's parse an expression let's say and we're gonna parse it in the context of the scope so and that's just use route scope for convenience so let's get in route scope a variable called X we'll make it 5 and let's say the expression that we want to evaluate is X plus 7 so now we can parse this string expression in the Contra so far my function and my function should be a function so now we can call my function in the context of a scope where X actually means something so since we have a variable called X on route scope we're going to pass parse a reference to route scope so that X actually resolves to something and when this runs if all goes well this should say 12th and there we go so this is parce service in action this is any others means of binding an expression a string expression to an actual function which does something and this is used in templating so when you do like say an NG repeat or we use it a lot in famous angular when you bind modifier values to an actual like FA modifier we parse them and the reason this is useful is because what you get from parse is a function so on angular's digest cycle and one of these string expressions changes we just reparse it so we observe which is a lightweight way to watch an attribute if an attribute changes weary parse it to a new function and then we sort of just set these functions on the shelf let me say okay that's that's all you knew that cares about here's a function if you call it it's going to give you a number on the other hand famous is render cycle which is striving to run 60 frames a second like it's running a lot it's running hot it's just going to read these functions and says oh there's any function on the shelf actually I don't care if it was an old function or new function I'm just gonna call it and so this view layer gets separated from the from the rest of angular's logic and it's able to run with full performance unless we incur a little to no overhead when we make this bridge from angular to face so you can see this is sort of a unidirectional flow which is all the rage these days with frameworks like react and flux it has turned out to work very well for famous angular as well so why should you care what can you do with famous angular you could make awesome apps I showed that simple demo earlier there's a lot more you can do that's just skimming the surface famous again takes the ceiling off of these sorts of web animations and it lets you design for mobile devices for for for desktop browsers as well it just takes the ceiling off and get on the other hand gives you testability structure all the goodness that we that we love about angular you know everyone in this room and then famous angular let's you bring them together so you can build your HTML your angular apps you can throw in famous here and there and every or everywhere or nowhere or you know wherever you want to it really gives you that flexibility and then since famous saying here there compiles to famous as famous continues to evolve with things like this mixed mode rendering this gives angularjs a portal into that space where you can though these cool WebGL Dom hybrid apps with angular along with all of its perks testability again modularity so pretty cool stuff and then of course building mobile apps today is something you can do very well with famous angular so if you want to build an angular app that feels and looks and tastes like a native app on your iPhone or on your Android device you can do it so how do you get started you can download the starter kit this is if you go to this is a long link so I don't know if you're going to like take a picture or whatever this slide deck is also available and I'll show that link in a second you can also just go to famous FA mo dot u s slash angular it's the name of the projects it's also conveniently a URL famous slash angular will take you to the project page where you can download this or you can just install a bower install sorry installed with Bower Bower install famous angular and what if you want to contribute well so the simplest way you can show your support would just be to give a github star and while you're at it you can give one to famous as well we also welcome code contributions so our roadmap is public I think I can open up pivotal here so here's our current roadmap I anyone is welcome to jump onto here there's a link in the presentation there's also a link on github and the readme there's a lot of stuff to do there's a lot of stuff we have planned out and we would also love to have any ideas so if anyone looks this and says why haven't you done this or done this that way oh there's a bug please I just contribute to the roadmap you can email famous angular at Thomas tree com if you want an official a pivotal tracker account and then if you're interested in improving your open-source portfolio if you've been looking for a project to contribute to we would warmly welcome any of your contributions so please give it a thought there's also contribution guidelines available on the github repo and then there are a number of other resources for getting started just links galore there's this slide deck available Thomas recom / famous google there's again the famous angular project page angular there is the github repo these ones are new there's the examples so this is a sub-module in the github repo if you go to the repo you'll see it it's a number of small like pretty encapsulated examples where you can see it in action sort of get a sense of how to start with this there's that flickers demo that I showed at the beginning the Flickr API consumer you can check that out as well famous labs so famous offers this famous labs program which is pretty neat it gives you the opportunity to go work on-site at Famous with their teams like directly in person for one to two weeks you can work out the details with them they have pretty sweet offices it's like converted penthouses and so map and SF it's a neat space and you sort of get to work directly with the team it's a very open environment so if anyone's interested in getting started or you want to try to nudge your company in this direction to check it out it's a very low commitment way to just you know go learn and if you have any questions you can email me at sac at Thomas Street comment and I also wanted to show a little bit of live coding sort of showing so based on that clickers demo wanted to show sort of the power that you get by combining ng animate so angular ng animate API with famous is cool animations right it seems like a really natural blend that when an item enters an array you should have it do some cool thing on-screen so here's sort of the topology of that code its HTML and FA app is our entry point just do this on iphone so here we are again cubes we have an F a F that's the entry point we have a header body inside of this body so the modifiers again are moving things around the photo cube is an angular directive that should look familiar whose template looks like this more famous angular so you can dive into and out of these this famous code using the musical components directives one thing we'll notice if I change the search to dog in all caps apparently everything just sort of flashes out and fashions back in it's just sort of bland right I mean it's cool we can still scroll it we can still play with it but wouldn't it be cool if there was something slightly more dynamic Enter ng animated joke so the API for ng animate with famous angular actually since everything is imperative it makes it very explicit I want to call a function when this animates or wouldna centers so FA animate enter equals let's say cube enter so this function will call when this modifier enters notice also that actually stays notice that this is ng repeated normal standard angular ng repeat I also want to pass this some arguments so let's do I want to pass the photo that I'm engine repeating and since since famous anyway let's you again just take that ceiling off of your animations since you can do whatever you want with it we're gonna patch this pass a special callback the dollar done callback which you are responsible for firing when the animation is complete otherwise things get crazy because angular cannot clean up because it thinks things are animating forever so let's go ahead and expose this function on the scope since this view is bound to this controller everything in this view happens in contexts of this scope object so let's expose a function called cube enter let's pass it a photo and it done so I'm just gonna call done for now and everything should be the same cool now let's say I want these cubes when they enter to start out small and just grow something really simple let's give them a scale so if this this is a modifier that's surrounding the cube as you can see if I make this small point five point five point five everything should just be smaller cool so everything is now half the size but I want to make this dynamic I want to animate this so I'm going to expose on each photo a transitional object I'm going to call it scale I'll show this in a second and I want to get the value of that transitional so this is the canonical famous way to do animations you a transitional bone is like a tween object it's a variable you can say that you know var x equals new transitional then you can X dot set 6 or X dot set 0 or 17 or an array of 0.5 point five point five so in its simplest form a transitional ball is just a variable but in addition to setting and getting values you can actually interpolate between values so you can start it at 1 you can set it to 10 and you can also pass iteration I want you to go from 1 to 10 over the course of 5 seconds and you can also pass a curve so instead of interpolating linearly you can do some sort of quadratic curve or crazy bouncy curves or custom pairs so I'm going to introduce an transitional here to do this animation so so I already started there's a scale transition of all it's being initialized to 1 1 1 I'm going to expose this transitional ball on each of these objects just for ease and now everything should work I should save this again so everything's just scaling to 1 1 1 because this is binding to photo dot scale get photo that scale docket is returning 1 1 1 if I want to make a return point 5 1 1 everything squished are we good so far ok so now when these things enter instead of just calling done I want them to actually do something interesting and so I'm going to have them manipulate this scale transitional which is then going to reflect through the view and render onto the screen so when photo enters I'm going to say photo scale dot set let's make them real small and then let's make them grow back to the normal size this time I'm going to hand it a duration a transition so this is going to take place over one second and let's just make it linear to start one more thing when transitionals fire like this when you're giving them a in interpolation like this they accept a callback as well so that when they're done with their transition they can fire a callback in this case I'm going to pass through done because when it's done I want to tell Angela that it's done so there we go you let's transition right there's a lot more you can do I'll just make it slightly more interesting I'm gonna import this easing object which has a number of different curves so instead of linear let's make it out elastic or something crazy then it's kind of gross it's you out bounce okay so get the idea that's so that's someone like that's how easy it is to sort of add these sorts of animations it would be just as easy to add or Pasadena or any other things that famous can modify which is a lot but rather than dive into that I think you guys would be welcome to explore it on your own again this particular project is available github.com slash Zac Brown / Flickr Asst I think most importantly I'll just point you to that slide dick which was Thomas recom / famous angular Google emulation and a normal-size so if you go check this out all the links that I showed are here and available as well as that live flickers demo Thank You Zack so I I have a lightning talk so it should be about five minutes well we'll we'll see how how long it actually turns out to be you you is that is that on the correct screens awesome all right so this is this is something interesting with with shadow Dom I am a member of the angular team these days I work on angular Dart and on both angular dart and angularjs 2.0 we've really been embracing web components we we think they're really exciting but what exactly are they so web components is it's really a basket of specs or or technologies so you can think of custom elements HTML imports and shadow DOM and then there's there's there's a whole list of other specs that we're trying to get into browsers and the the one that we've really implemented in angular is is shadow Dom which I'm I'm pretty excited about so let's let's have a demo I know so that so this is a this is a a angular component and it's using using shadow Dom so it's a it's a Google Maps component and you can you can see you can you can drag it around you can open this this info window where you get a nice little bubble on on the screen and if we jump into the code we can we can first of all this is the the HTML and so it's it's fairly standard angular this is this is actually angular Dart so there's a few things that are different but you can see the the component that we have here x.x google map and we have a property info that's being bound to this to the scope the scope field open info which is also also bound down here using ng model and so that's the that's the check box at you that you saw earlier and so how does this X Google map component work and now now you're you're looking at dart code but we're we're using a similar syntax for angularjs 2.0 as well and so you you have a annotation here that says every time you see an X Google map tag create this component and then the next line here is the it's a template and this is where shadow DOM comes in because instead of trying to transclude elements and and and do everything in a single dom like we do in angularjs 1.2 we we create a shadow root and put this template in in the in the in the shadow dom and now this this template is is not very exciting it's just creating a a div and so a another thing that we do here is we have this on shadow callback and what I've done inside of here is I've initialized the the Google Maps JavaScript API and and if you try I had to read this code it looks really really ugly it's creating new JSX this is the the dart to JavaScript Interop so in in hindsight I probably used the wrong language to implement this this component I should have just done it all in in in JavaScript but that this works and and so I've I've given or I've said to the Google Maps API here's here's the the div that we that we created in the shadow Dom go and do whatever you want to do and and so you can see that back back in the back in the in the in the demo and if you look at the dev tools so that this is this is my this is my HTML for the page you can see we have the X goggle maps and this is this is all of the code that I've written the the the code that Google Maps has stuck into the page is hiding behind this shadow root and it's divs and it's a whole bunch of code that I don't understand but it's it's really awesome because I don't have to understand it and so that's that's that's pretty pretty interesting but now say I I have I have this that's info window here and I want to put something in the info window how do I do that so Google Maps if you've ever used the API they have this this object that you pass in some HTML and it and that's going to be what's what's what's in the info window so if I want to hook that up to my to my angular app I could I could try interpolation and save that and let's let's let's reload the page but that doesn't work because this is the this started out as a text string that angular knows nothing about and the the next idea may be well we could get the angular compiler in there we could do something with the purse service and try to actually compile this but shadow DOM has this really awesome feature which is the the content tag and what the what the content tag does is it punches a hole in in your shadow Dom back into the light Dom and so it's it's it's it's going to take whatever you've you stuck in the in your in your light Dom and just just put it where where it should be so here we have this hello some text and now now you probably know what's going to happen that we can oh I forgot to save it that we can open up the win the info window and then that some text was bound to this to this text box and and you have the canonical angular demo of typing something into a text box and seeing it appear somewhere else but that somewhere else is is inside the Google map and you could you can go even even one step further and say well I interpolation was interesting but maybe I want to put something much more complicated so let's take a input text box with with an entry model and put that and then and then when we open the text box you have let's see angular and and it's it's bound exactly the the way you would expect it and this is this is actually really really exciting because what just happened was you were able to take all of your code and keep it in one section of the Dom where the Google Maps code could live in another section and you didn't have to worry about what Google Maps is doing and the the next step which I'm which I'm not going to do here is this this X Google map doesn't need to be a angular component and it could be a web component that's implemented in any in any framework and and so the with web components teams like like Google Maps can start shipping actual components instead of instead of JavaScript API so make it really easy just to drop things into your into your apps so that's that's all I have um thank you and if we could have Zack back up for questions cool okay well now what I originally said please raise your hands come on up Zack asked of James and of Zack what you will and one question here from vojta okay great first so I already had question how how you can use the dome let angular work on the real dome and then then you basically transfer and send that information to famous and so I was wondering how you do anything that's coming from the view right like input box or any sort of state that is coming from the view yeah definitely a good question this goes back to that unidirectional piece I there are a couple ways we can handle it the events don't really come that way they don't come back from the view they come back into angular so it can come back into your controller or sort of presenter is the since this is a UI centric framework this becomes more of a model-view-presenter that sort of thing so that code comes back in from the back and then reflects so so you have some sort of single dispatcher on the top yeah so if you look at like flux for example yeah I know how it works right okay make sense okay thank you yeah thank you next maybe over here I'll go far and then we'll come back and I may have missed Jeff you have some over there yes you behind you okay hold on hi Zach a great presentation day so like I saw it you guys are using a lot of directives hmm so like this is not a question specifically for famous integration Tangela but like just how you use directives because like when you have a lot of Directors nested how do you actually maintain the state for each of them like for example I changed something in one directive it should affect some some other directive then presently what you do is you add a watcher but like how many of these can you add like is there a better way to do this so I think there are a handful of or many places where this explanation could spider out one of them is in order to make use of eventing we used angular child scopes which inherit Pro typically from each other problem is inside of each of these scopes we have the exact same member there's like a render node which represents the actual famous component that that's you know kept track of so how could we have this sort of child scope hierarchy while still having the sandbox that you can normally only get from an isolate scope and so we actually created this hybrid isolate child scope paradigm we create an object called the isolate which every telescope shares a reference to and that object is actually a like a JavaScript object where the series of keys are all the scope IDs like 0 0 6 or 0e 4 or whatever which resolves to sort of the sandbox just an object where that directive gets to keep its own contents in terms of performance and Watchers we have been very frugal with where we put Watchers in the code so we rely on attribute observe I think I showed on that you know that interactional slide as much as possible but yeah even on large apps it has not yet we haven't hit a wall with performance on that Jeff you wanna hit somebody on on that side back behind you there good thank you my question is how about more about the lightning talk about the shadow Dom if I understand that it was kind of a double buffer for the DOM and my question is how do you handle the reflow events or it's an advantage to have it a shadow DOM and avoid those performance impact men so it compares and it spits available only on on dart or what's what's a what's a D Thank You Brad so shadow Dom is shipping in in Chrome and it's it's available in in dart and and JavaScript for the other browsers the polymer project has polyfills that that you that you say that you set up their their platform and then they take care of emulating shadow Dom in in terms of of dealing with reflows we don't have to that that's that's part of the shadow dom implementation so the the browser takes care of all of that and when when you're looking at your app the dom doesn't actually change even even if some some elements are visible or aren't visible or show or show up in a different order oh it's great yeah so so on on on Chrome I've I've been running benchmarks and I I don't see any any impact in using shadow Dom versus implementing components using that the trans cluding method using the polyfill on on other browsers you do take a a performance hit you you you so this is more of a question for famous what's the API like nowadays is it pretty stable because I know it's not 1.0 yet right so if we were to use in production will be seriously concerned about API changes stability issues compatibility desk test okay so I think a good answer to that is that famous angular is at a point where I would consider production ready that said as you point out its point let's say it's zero three zero right now so it's not yet 1.0 by December conventions it's subject to breaking changes I think so long as you go into it with that knowledge it is good enough to build apps now and if you need to freeze it this version I think it's it's good enough will certainly be growing it there will probably be breaking API changes this happens and it's the standard trade-off with being an early adopter for any technology but as you can probably tell I'm excited and passionate about it so I would urge you to try it out great okay uh Jeff once you hit that guy back actually I'm gonna hit this guy here he's been waiting and then we'll go back there Scotians for James very basic not much familiar with the dot but is this a replacement for iframes good and so so is is shadow Dom a replacement for for iframes it it could be it depends what you're using the iframe for and and we've we've been I or at least I've been seeing a lot of people thinking about using shadow DOM and HTML imports to isolate components of their of their page and that's that's one thing that you were using iframes for that you could then then start to do do with this so so yes it I I hope to see fewer iframes in the future this is the question for famous framework is there any lifecycle for free within the famous framework for the components when they build and you know when they change the Dom structure whenever the angular data comes and again it rebuild the structure the first part of that is there any life cycle within the famous framework of the components whenever you know Dom structure is changing and again famous again is try to rebuild the tree for rendering so there are events which famous components omit and if you dive into the code again all of this is open source you can dive into the code and just see what's happening there are events that you can hook into there's like I can't name them off the top of my head but there are events and one more question so how will differentiate okay when to use angular within that famous framework where's the demarkation okay this is the point we can use angular components which will speed up the you know rendering and everything how we'll come to know and where we which is the right judgment so this core these components so sort of the rule of thumb that we've been using when building apps with famous angular is any component that you want to be able to like atomically transform with things some sort of rotation some sort of animation that should be its own famous component anything if it's just like one panel that you want to flip around and you don't need to change the contents inside of that you don't need to trance you don't need to animate those then that's the breakpoint it's like this this container should be famous animatable but inside of that should be pure angular HTML that make sense cool who is next maybe one up here Jeff you want to run up there just in case this is for James I wanted to clarify one more thing on the the braking API with a mistake neither I we've actually been very very careful with breaking changes I think in the course of 0 0 15 to now 0-3 oh it's been something like 2 or 3 like total breaking changes that were aware of and we do have unit tests in place so we're really trying to keep it stable there's many more on core angular if you were wondering it seems like it goes against the normal angular declarative approach of like the model is the source of truth and the Dom is reflecting that do you see any downside of the way that you're going outside of that paradigm so so first of all I whenever I hear something like the the angular way I have to wonder if if there's like a certain amount of dogma that we should try to avoid and so I think sort of having this fresh perspective of you know can we try things another way is really important in terms of the model being the sole source of truth famous and famous angular really don't touch the model layer they leave that up to angular so it's really the view layer that we're affecting here the one piece that really changes is the controller becomes control they're plus presenter it really becomes a presenter so in addition to the normal roles of controller we are now handling presentation logic we're animating things we're positioning things and this is just the fundamental shift that comes by making this presentation code imperative so I really don't think caveat about the angular way aside I really don't think that we're departing from the spirit of that I think we're just merging these two technologies sorta bringing this new way together with the standard way got a question up here Jeff you want to pick your new next question about testing so we mentioned one of the benefits of bring an integrative angler is testing on the top of my head I would like you to elaborate on how you test animations so how I can make sure that my cubes gonna rotate after 800 milliseconds that's done with your dollar so so in terms of unit testing your own famous components I is I think I can change this right think you have to switch the cable okay so we so here's our test suite a modest hundred hundred sixteen tests or something so we've handled like sort of the boilerplate that comes with you know just getting a famous angular app testable so you can build off of that if you want to to unit test your app in terms of testing like the state of modifiers it would be as simple as testing a variable just my modifier duck yet and then the tricky part becomes playing system clock which is what you always have to do when you're testing but it's just sort of the same same idea you just have to play clock so yeah it should be fully testable and we get the benefits of dependency injection to make it really easy okay back there thanks guys for the talk I have a question more related to the shadow Dom in polyfills I was wondering when if polymer j/s and angular were mutually exclusive or if there was use cases for using polymer JS with angular so sorry use it as of as of the next angular Dart release which I think was today you you can you can consume polymer components in in angular Dart and so and there's definitely use cases for for wanting to do that so in in my example I had the the Google Maps component and from the from the app developers perspective that could be written in any framework so it could have been polymer on on on the inside and you wouldn't really care that doesn't answer your question yeah I guess is more related to like backwards compatibility with other browsers if you don't include the polymer j/s well you get polyfills included with any web component got it said so so about browsers support for the polymer polyfills so the the polymer project it has built these these polyfills so you're able to use technologies like shadow dom and custom elements before they're actually in or implemented natively in browsers and they're supporting the the evergreen browsers and then ie back to i-10 and so if if you're if you're targeting those you can you can just use the the the polyfills that they provide and then shadow dom will work the way that you expect it to it's a very general question about famous so from the first look of a famous framework it looks like a decent fit for applications that need rich graphics animation or games do you anticipate it being a defective choice for data intensive apps representation where you are dealing with the large size data so yeah this is where we really get to lean on angular for data you know streamline data management so absolutely yes I think again famous really shines as a rendering engine is making the UI layer beautiful and interactive it's sort of like a non sequitur to ask if that can handle big data aside from the standard limitations of Dom right so insofar as angular can handle big data quite well if you're sensible about your API is and how you page and all that sort of stuff and how heavy you're gonna make your digests yes the answer is yes have you seen any implementation done intensive apps yeah so we've worked on a handful at Thomas Street worked worked on a social network app that grew fairly large and again it's just a matter of being tested iasts you know making sure you're not throwing gigantic models that you have to digest through again any big thread blocking digests are going to stutter your animations so there's that extra layer to be aware of but so long as you're careful it's		