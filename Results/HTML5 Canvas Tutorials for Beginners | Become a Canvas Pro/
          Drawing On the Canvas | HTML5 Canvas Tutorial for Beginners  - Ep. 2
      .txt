welcome everyone this is another Chris course of your host Chris and in this episode we're going to be covering skill number two of how to become a canvas pro drawing again alright so looking back at the last episode we covered skill number one of how to become a canvas pro creating and resizing your canvas we also covered the most rudimentary shape we could draw with the canvas the rectangle now the end goal here is still to create amazing visuals but there's only so much we can create which is rectangles and squares to get the most out of our visuals we need to understand the full extent as to what objects we can draw and how to draw them to name some with the canvas we can draw rectangles lines arcs which we can use to also create circles Bezier curves images and text so for the sake of time we're not going to be covering how to draw all of these within this course but we will be covering those which are most widely used which are the first three rectangles lines and arcs once we have a solid foundation regards to how to draw these three shapes will be moving into some programming 101 where I'll show you how to officially create hundreds of these shapes at once using only a couple lines of code so without further ado let's get to work and cover skill number two drawing on the kids all right welcome back everyone so this is where we left off in the last episode as you can see here we drew a few rectangles on the screen and we also resize our canvas to fit the entire width and height of the browser so as I mentioned there are quite a few different objects that we can draw on the canvas but we are only going to be focusing on the lines and arcs which we can use draw circles mainly for times sake so I would love to show you guys everything but unfortunately keep this video short we can only focus on a few things at once but nevertheless the lines and the arcs and circles are some of the most widely used pieces that we can draw on the canvas and if you'd like to learn how to draw any of the other objects I listed in the intro then I do have links in the description of this video in which you can use to see the syntax on how you can go about drawing this so without further ado let's go ahead and get started with drawing a line so let's go ahead and comment a section now so we can specify this is where we're going to be drawing our lines and in order to get started with drawing a line we're first going to need to grab our magic C variable and we are going to begin a path and this is basically indicated for canvas saying okay we want to start a path do not connect this past of anything preceding it so we declared a canvas we want to begin a path but now we need to actually declare where on the canvas we want our path to start so we are going to say C done move to and move to takes an x and a y coordinate for its argument so we're going to start off our line somewhere over here so that means our x coordinate would be around 50 pixels and our y coordinate would be around I think this is around 300 pixels so our point is basically over here and if we refresh the page you're not going to see anything because this point is invisible until we call a stroke method as soon as we call the stroke method then you'll start to see a line from a point to point so now that we have our starting point we can go ahead and create a line to a new point so to create a line to a new point we're going to say C dot line two and then this is going to be an X and y coordinate which specifies where we want our line to go to so if we want it to go somewhere up here then according it would be something around 300 pixels for our x value and our Y would be around that's about a hundred pixels I would say basically drawing a line from here all the way to up here a diagonal line now if i refresh the page again you're not going to see anything as of yet because as I mentioned we need to call a stroke method for this line to show so to call this drug method we're going to say C stroke save that and now when we refresh the page you're going to see okay I was a little off in the coordinates but we now have a line expanding from one point to another and we can continue drawing on this line by adding more C line twos so let's say something like 400 300 and now you see we're extending our line to another point and we can keep doing this as many times as we'd like but for now let's just go ahead and keep things as is now something else I'd like to cover is how to add colors to canvas colors to our lines and colors to the inner fills of our shapes so to add colors to our lines it's actually quite simple before our stroke method we need to add a property called see that's stroke style and stroke style is going to be equal to any CSS color so it can be an RGB a value like so or it can be a text color value like blue or it can be a hexadecimal value and it'll work with any one of you so if I put in a random hexadecimal value here and let's add a semicolon the end of that just to be safe you can see we have a lovely pink line being created instead of black one as we had previously so this is how we change the color for our lines using a stroke style property but how do we change the colors for our filled rectangles well to change the color for I filled rectangles we need to add a fill style property rather than a stroke style property so we're going to say C not fill style this is going to be equal to a CSS color value as well so it can be RGB a let's go ahead and do RGB a for this one and let's make this red we're going to say 255 0 0 and then we're going to add an alpha value of just point 1 and if we refresh the page you can now see we have a very very light red rectangle instead of that harsh black rectangle as we saw earlier and if we want to change this go ahead and bump this up a little bit so we can see it better all right so now we have three rectangles that are semi-transparent but what if we want to change just one of these rectangles so only one of our rectangles is semi-transparent well we can change the colors for all of these rectangles by proceeding them with different fill styles the fill rect is going to take whatever fill style is before and then it's going to fill itself in with that color that is specified so let's go ahead and change this to blue and it's a zero it would be green we're going to say 255 for our blue value so now you can see we have a red and we have two blue rectangles so let's go ahead and change this last on the green all right so now you can see we have different color line different color rectangles and I encourage you to play around with this a bit go ahead and create some rectangles go ahead and create some lines with different colors and kind of really get a feel for things because that's where you're going to learn those is when you're actually playing around on your own trying to figure out okay how do I do this what's the problem how do I solve it on my own that's when the knowledge is really going to be retained so I really highly encourage you to play around to this for a little bit before we move on to the art section so let's go ahead and learn how to create an art with canvas we're going to be using arcs to create circles because once we create an arc that is 360 degrees around that's where we get our circle so to create an arc or a circle we are going to say C dot arc and arc takes quite a few argument so it takes an x-value and it takes a wide valley so let's go ahead and place it somewhere over here let's just go ahead and say 300 300 and it takes a radius so let's give it a radius of 30 for now and it takes something called a start angle and an end angle now the start and angle properties don't take degrees they take a braid Ian's essentially the start angle property says that what angle would we like to start drawing our arc while the end angle property says how long would we like the arc to go on for if you're unfamiliar with radians I recommend pausing the video and checking out the Khan Academy link in the video's description Salman Khan does a terrific job in making this topic which may seem complex at first very simple to understand alright so now that we know a little bit about radians we have our start angle which declares where do we want our art to start so we want our arc to start at an angle of 0 and we want our arc to end at a Radian of math dot pi times 2 because that will give us the full arc that will give us an angle that extends all the way from the beginning to the very end of our circle so draw counterclockwise that just specifies which direction should the arc actually be drawn in this for our purpose it's not a huge deal which one we choose so we're just going to say false for now it's not going to be drawn counterclockwise and now that we have this we actually have created an outline for an arc just an outline so if you refresh the page you're not going to see anything that's like I said we just have an outline for it but we need to fill that outline and using a stroke or a fill property so we're going to say see that stroke and with that in place we now have a full circle being drawn but you'll also notice we just created a line from our last path our last line to that is connecting to our circle and we don't want that and that's where this begin path method comes in we want to make sure that we're preceding any arc or any line with this begin path method because it's going to separate the two and prevent them from connecting to each other so if you refresh the page with begin path there you can see now our circle is separated from our line and we are good to go so now that we know how to give our strokes and arcs colors let's go ahead and give our arc a different stroke style and let's just go ahead and use a text color for this owner to going to save blue all right so these are the bare basics we know how to draw rectangles we know how to draw lines connect the lines and we know how to draw a circle and arcs basically we also know how to change your stroke colors and their fill colors and this may not look great at the moment I agree with you this does not look great at all but as I mentioned these are the main building blocks we'll need to create any amazing canvas piece once we start using colors and start animating these guys and creating multiple shapes that's when the pieces will really start to come together and that's when we really start having fun and creating really eye appealing visuals so let's not leave off on this let's go ahead and ask ourselves a question what if we wanted to create hundreds of circles how would we go about doing that well I guess if we look at our code what we could do is we can copy and paste our circle code a hundred times but you can see that's going to get out of hand really quickly we would have to change the coordinates for each of these over and over again and that is just a maintenance nightmare you do not want to do that if you're creating multiple circles so let me go ahead and show you how to create multiple circles using a for loop so if you're new to for loops let me do my best to explain it for you so a for loop is just going to call whatever is inside of it however many times you specify and you specify how many times you want this four loop to run by inserting some code within these parentheses here so to specify how many times we want this four loop to run we are first going to declare a variable we're going to say I is equal to zero and we're going to say this for loop as long as I is less than three so this means we're going to be running this for loop three times so we're starting off on zero and we're going to run this for loop until I is equal to three well how do we increment I to increment I we are going to be adding I plus plus as our third argument within is for loop so this is what's going to happen is we have an I've area below we're going to run through this for loop at least once once we hit the end we're going to add one on to I that's all this means we're adding one on to the current value of I so that means I would be equal to one so then we're going to run through it again add one on to the value of I so that means we're going to have to and we're just going to loop back to the top and run it all the way until I equals three because once I equals three that means this conditional is false therefore if this loop is not going to run anymore so let's go ahead and comment our code out for the circle right now and with this in place this means that the code within this for loop is going to run exactly three times and if you refresh the page you can actually see you might have actually noticed that the circle is a little bolder than it was before that's because we're drawing three circles on top of each other now this isn't really effective we want to make sure that our circles are being drawn and either random locations on the screen or maybe coordinated locations on the screen but definitely not on top of each other because it doesn't really make sense to draw three circles on top of children just to change the line width because we can do that manually using a line width property let's go ahead and change the location of these three different circles to change the location we need to make sure that we're changing these x and y values so that they're different from each other right now they're the same so therefore they're being drawn on top of each other we want to make sure that you sort of different each time we run through the for loop so a really easy way to do this is adding some variables one for our x-coordinate and one for our y-coordinate we are going to set these variables equal to mass but random so if you're unfamiliar with it this math dot random function returns a value anywhere from zero to one any random value from 0 to 1 it can be 0.4 0.6 point 6 5 it will store that value with an x and y and that means each time we run through this for loop we're going to be returned at different random value so like I said this is only a 0 through 1 so if we were to enter our x and y values within our arc now since 0 & 1 are all the way up here our circles should be all moved to this top left corner and if we refresh the page you'll see yeah exactly that happened now we want to make sure that these circles are randomized throughout the full whip and hi over screen so in order to do that we are going to multiply math.random by the windows dinner with 4x value and then for y we are going to multiply it by our windows inner pipe and basically what we're doing here is we're saying return a random value anywhere from zero to the full inner width of our screen and then we're also saying for our Y value give us a value anywhere from zero to the full inner height of our screen so if we save that refresh the page you can now see that our circles are randomized each time we refresh it and this is pretty cool this is trying to get a little more interesting than it was before because previously we just had static shapes but now we're actually having some things move around randomly we're starting to procedurally generate things which is actually pretty fun to play around with so you're not limited to just three you can actually change the value like I said a for loop will call whatever is inside of it as many times as you specify so let's say we want to call it 100 times now we have 100 circles if we want more than that then we can go ahead and change this 400 and we can even go as high as maybe 2400 filling up the entire screen now if I go any higher then your computer will probably start to like so it's drawing so many circles and I can't actually handle that computationally so I actually encourage you to play around with this as well it's really fun I'll start change the x and y value see what kind of stuff you can come up with start bringing lines in here randomize the values of these lines randomize the values or your rectangles and this is exactly what you need to do is start creating good-looking procedurally generated animations so as I challenge to you before we start heading on over to the animation section I challenge you to randomize the colors of each of these strokes so one stroke should be blue one should be red one should be yellow any color from the color wheel go ahead and randomize this so that is calling any color from that it'll provide a good challenge to get you familiar with the for loop over here and also familiar with the idea of randomizing values so we now know how to draw the three most basic objects we can onto the campus we know how to draw rectangles we know how to draw a line and we also know how to draw arcs flush circles so the next one is where the magic really starts happening we created some magic here by randomizing and creating multiple surfaces at once but once we add animation out of the mix that's where things really start getting cool we're going to start and in conditionals for our circles bounce off walls and then and the 4th episode we're going to add eventlistener so that when we hover over a circle to actually grow in size so that's it for the some folks get a feel for the random number generators over here before loose because we're going to be using this over and over again within our future Candace pieces anyways I hope you guys enjoyed and I look forward see you in the next episode later [Music]		