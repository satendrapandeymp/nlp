<para> We have seen how to create hypertext link using text and we also learnt how to use images in our webpages. Now, we will learn how to use images to create hyperlinks. </para>
<para> It's simple to use an image as hyperlink. We just need to use an image inside hyperlink at the place of text as shown below − </para>
<para> This will produce the following result, where you can click on the images to reach to the home page of Tutorials Point. </para>
<para> This was the simplest way of creating hyperlinks using images. Next we will see how we can create Mouse-Sensitive Image Links. </para>
<header> Mouse-Sensitive Images </header>
<para> The HTML and XHTML standards provides a feature that lets you embed many different links inside a single image. You can create different links on the single image based on different coordinates available on the image. Once different links are attached to different coordinates, we can click different parts of the image to open target documents. Such mouse-sensitive images are known as image maps. </para>
<para> There are two ways to create image maps − </para>
<para> Server-side image maps − This is enabled by the ismap attribute of the <img> tag and requires access to a server and related image-map processing applications. </para>
<para> Client-side image maps − This is created with the usemap attribute of the <img> tag, along with corresponding <map> and <area> tags. </para>
<header> Server-Side Image Maps </header>
<para> Here you simply put your image inside a hyper link and use ismap attribute which makes it special image and when the user clicks some place within the image, the browser passes the coordinates of the mouse pointer along with the URL specified in the <a> tag to the web server. The server uses the mouse-pointer coordinates to determine which document to deliver back to the browser. </para>
<para> When ismap is used, the href attribute of the containing <a> tag must contain the URL of a server application like a cgi or PHP script etc. to process the incoming request based on the passed coordinates. </para>
<para> The coordinates of the mouse position are screen pixels counted from the upper-left corner of the image, beginning with (0,0). The coordinates, preceded by a question mark, are added to the end of the URL. </para>
<para> For example, if a user clicks 20 pixels over and 30 pixels down from the upper-left corner of the following image − </para>
<para> Which has been generated by the following code snippet − </para>
<para> Then the browser sends the following search parameters to the web server which can be processed by ismap.cgi script or map file and you can link whatever documents you like to these coordinates − </para>
<para> This way you can assign different links to different coordinates of the image and when those coordinates are clicked, you can open corresponding linked document. To learn more about ismap attribute, you can check How to use Image ismap? </para>
<para> Note − You will learn CGI programming when you will study Perl programming. You can write your script to process these passed coordinates using PHP or any other script as well. For now, let's concentrate on learning HTML and later you can revisit this section. </para>
<header> Client-Side Image Maps </header>
<para> Client side image maps are enabled by the usemap attribute of the <img /> tag and defined by special <map> and <area> extension tags. </para>
<para> The image that is going to form the map is inserted into the page using the <img /> tag as a normal image, except it carries an extra attribute called usemap. The value of the usemap attribute is the value which will be used in a <map> tag to link map and image tags. The <map> along with <area> tags define all the image coordinates and corresponding links. </para>
<para> The <area> tag inside the map tag, specifies the shape and the coordinates to define the boundaries of each clickable hotspot available on the image. Here's an example from the image map − </para>
<para> This will produce the following result − </para>
<header> Coordinate System </header>
<para> The actual value of coords is totally dependent on the shape in question. Here is a summary, to be followed by detailed examples − </para>
<para> rect = x1 , y1 , x2 , y2 </para>
<para> x1 and y1 are the coordinates of the upper left corner of the rectangle; x2 and y2 are the coordinates of the lower right corner. </para>
<para> circle = xc , yc , radius </para>
<para> xc and yc are the coordinates of the center of the circle, and radius is the circle's radius. A circle centered at 200,50 with a radius of 25 would have the attribute coords = "200,50,25" </para>
<para> poly = x1 , y1 , x2 , y2 , x3 , y3 , ... xn , yn </para>
<para> The various x-y pairs define vertices (points) of the polygon, with a "line" being drawn from one point to the next point. A diamond-shaped polygon with its top point at 20,20 and 40 pixels across at its widest points would have the attribute coords = "20,20,40,40,20,60,0,40". </para>
<para> All coordinates are relative to the upper-left corner of the image (0,0). Each shape has a related URL. You can use any image software to know the coordinates of different positions. </para>
