hello everyone in this lesson we are going to learn how to create a sticky navigation so let's take a look at the finished product you can see that there's a navigation bar and if we scroll just a bit it Scrolls with the pages you would expect it's positioned in a standard fashion but if we scroll to the point that it would normally scroll out of view we can see that it locks or sticks to the top of the screen and if we scroll back to the very top of the page we can see that it reverts back to sort of standard positioning once again so this is a very useful feature in certain page layouts that are very long and you want to make sure that even when the users get towards the bottom of your page they still have quick access to your vital links so now that we've explained what a sticky navigation is and why it might be useful it's time to learn how to code it so if we hop over to this other tab this is a page where I've removed all of the code that makes the sticky behavior possible so we can see that if we scroll this is just a completely standard page so we're going to rewrite the code together in order to make this navigation sticky once again if you think of the sticky behavior as a recipe here are the ingredients we're going to use number one JavaScript for event handling so once we scroll to a certain point and we want to run some code number two we're going to use CSS for adjusting the positioning to activate fixed positioning and number three we're going to use another bit of JavaScript for adding and removing that fixed positioning at just the right moments so let's dive right in for a quick review of our existing code you can see that we have a nav element with an unordered list for the links we have a bit of CSS that gives everything background colors colors and size and position and we have an empty JavaScript file and you can see that we're using jQuery so any code that we place between this bracket and this bracket will fire on the initial page load now before we start writing our JavaScript let's use plain English to outline the logic that our code should use we need to keep track of where the navigation sits when it's using its standard positioning we also need to keep track of how far down the page we've scrolled and we're going to need to update that value every time we scroll again and finally we'll use conditional logic to there are two key values so we'll say if the current scroll position is greater than or equal to the offset of the navigation bar then set it to fixed positioning and if the scroll position is less than this navigation bar then once again set it to use standard positioning so the overall skeleton logic is pretty simple let's dive into writing the actual code to make it possible so let's begin by creating a variable that keeps track of where the bar sits when it's using standard positioning and more specifically what we're really interested in is the top offset so how far and pixels from the top of the page does this navigation bar sit so VAR create a new variable and we can name it anything we want let's name it nav offset and it equals we'll select the element so in our HTML we can see that it's just the nav element so we want to select that and then we want to run the jQuery method named offset so this really neat method will return an object telling you how far from the left and how far from the top and element is and we're only interested in the top value so then we'll say top now let's just make sure that everything is working so we can alert that value in a message box so we'll say alert nav offset and if we refresh we see that it's returning a value of 182 which looks about right to me so we now know how far down the bar sits and the next thing we need to know is how far down from the top we've currently scrolled so we'll create a new variable we can name it anything we want I will choose roll position and we'll select the entire browser window and we'll use the jQuery method named scroll top now this will return how far down we've currently scrolled from the top of the page but it will only run once when the page is first loaded and if you think about our logic that enables the sticky navigation we need to know that value of how far time we've scrolled every time we scroll so it needs to be constantly updating so we'll wrap this code inside another jQuery method that will fire again and again and again every time we scroll so we will write jQuery and select the entire browser window and then run the jQuery scroll method okay we will then move this line where we're creating that variable into this scroll function so that every time we scroll this line will fire again and again now let's output this value somewhere in the browser just so you can see that it's updating correctly as we scroll so in our HTML let's add a temporary dummy div with a class of status and then in our JavaScript let's output this value into that div just sort of as a proof-of-concept so we'll select that status element and it will update its text with this variable value so now if we refresh and scroll you can see that right here in the top left as we scroll this value is constantly updating so we know that our code is working and we now have a variable which updates on the fly so now we can write our conditional code which compares the two values to see if we've scrolled down far enough to enable fixed position or not so our code will look something like this if scroll position is larger than or equal to the navs offset then run some code otherwise else run a bit of different code so now we can let CSS do the heavy lifting we just want to use jQuery to add or remove a class at the right moment to enable fixed position so if the condition is met will select the nav element and add a class of fixed and if the condition is not met then again we want to select oops want to select the element and remove the class of fixed so now we can hop over to our CSS file and create a new class named fixed and we'll simply say position fixed top zero so now if we refresh our page we see that if we scroll nothing happens nothing happens but once we get to that shoulde our link is now sticky or locked to the top but our code isn't perfect yet I'm sure you notice the awkward jumpy behavior so when we get very close to the threshold you can see that the content starts jumping around if we scroll very slowly and even if we scroll quite rapidly you can see that there's a jump in the content so what's happening here is that this CSS Declaration of position fixed actually removes the element from the natural flow of the page so once this element is set to position fixed it's as if all of the content below it so this content header in the paragraphs they are no longer aware of this element on the page so they're trying to move up to fill that empty space now there are many different ways of solving this issue but I'll show you one of my favorite strategies it essentially consists of wrapping our menu bar in another element and then using jQuery to dynamically give that element the same height as the navigation bar so that that way once our navigation bar becomes fixed position there's still the wrapper element taking up the same amount of vertical space so that there's no jumping content whatsoever so let's take a look at the code to make that possible so we will hop over to our javascript file and write a few new lines of code the first step is to select the nav element itself and wrap it with the jQuery wrap method with a new div so we'll say div class nav placeholder and the second step is to select this newly created div and give it the exact same height of the nav element itself so we use the height method and we get to define what height we want so we'll just select the height of the nav element okay and the one final step is that we want to take this margin the bottom margin of the nav and let's just give this instead to the new wrapper element so we'll say nav placeholder let's give that element the bottom margin so now if we refresh our page we see that once we scroll to the threshold there no awkward jumping content whatsoever so now the only thing that remains is a bit of extra CSS because you can see that once we scroll to the threshold and the navigation becomes locked or sticky you can see that the bar is no longer taking up the full width of our page like it does when it's using standard positioning now we mentioned earlier that fixed position elements are taken out of the natural flow of the page so even though this is a block level element once it's using fixed position it sort of shrink wraps on itself and doesn't use the full hundred percent width that block level elements usually use so we need to write a bit of new CSS to make this happen at all times so we can begin by simply editing our CSS and the fixed class to contain a declaration of width 100% so now if we refresh and we scroll to the point that it's locked you can see that it takes up the full width but it doesn't have any sort of margin on the right I'm actually going to make our browser window a lot larger so you can see exactly what's going on so you can see that we said width 100% and it is taking that command quite literally this is because fixed position elements are taken out of the flow of the page and they're no longer aware of the size of their direct containing element so I'll show you how I like to handle this in JavaScript I actually add an interior wrapping div to the nav element so we'll select nav and we use the jQuery method named wrap inner and we'll say div class nav enter okay and then in CSS what I'm going to do is select that newly created element of nav enter and I'm going to give it a max width of 700 pixels and then I'll Center it margin Auto and then in the fixed position class let's go ahead and give this a value of left zero so now if we refresh we see that once the element is fixed position it's positioned correctly but the background is taking up the entire width so now all we need to do is adjust our CSS for once the fix Clause is added and will say background-color:transparent and will give that light blue color to this new nav inner class so now if we refresh we scroll down we see that it keeps its exact same width in appearance and there's no jumping content one of the final things to consider would be what if the browser window was smaller than that max width 700 pixels that we set so for example now if we refresh we cross the threshold we see that the sticky navigation is not observing any type of margins and let's imagine that we wanted it to have the same Universal 20 pixel margins on the side so again this is going to differ from layout to layout but I want to give you a general idea of how I would handle this situation so in script file I would simply add another interior wrapping div so I would select nav inner and then I would add a new div the class of nav innermost and then in the CSS I would essentially move these properties to the innermost div and then this middle do there's the nav inner we can give that horizontal 20 pixels padding so now if we refresh and we cross the threshold we see that we still have the universal margins on the side and it works for all sorts of different screen sizes and we now have a silky smooth sticky navigation so that's going to wrap up this lesson let's review we learned that the actual JavaScript logic the skeleton logic is very simple we just use a bit of variables and conditional logic and then we attach that to the scroll function so it fires and updates every scroll and then we just use a bit of CSS to sort of wrangle the fixed position to do exactly what we want it to do so again that's going to conclude the lesson thank you very much for watching I hope you feel like you learned something stay tuned for more web development tutorials thanks bye		