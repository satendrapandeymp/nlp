so what are event listeners well event listeners are listening out to what the user is doing this is how we create interactive pages for example we have a button and we wait until that button is clicked and when the button is clicked then we can run a function so this is a really nice thing about JavaScript is we can wait for certain things to happen wait for the user to press a button press a key Mouse or mouse down and so on and so forth we can wait for events to happen and then once that event happens and is triggered then we can run a function that we specify we create that function we say if they click a button I want to go ahead and perform an action and that's how we create interactivity so we're going to start out with a very simple example and we have a basic input right here it's just a button with the value of click me so we just have this nice little button right here and it doesn't have any functionality but when I click on this button what I want it to do is bring up an alert dialog box so first of all we haven't discovered how to create an alert dialog box in JavaScript which is very easy to do just type in alert and then you want to pass in a string and this will show up inside of the lid dialog so this is how easy it is to create an alert dialog box in JavaScript so notice when I hit return and execute this command an alert dialog box will show up and it has the string hello world inside of there so that's nice and easy that's how we create an alert dialog now I want to first of all target this Dom element right here so the way I'm going to do it is via its ID so this Dom element has an ID with the value of event click so we know that we can target this specific element via its ID so I can say docu mint dot get element by ID and we want to get the element which is going to be event click now I want the console to print out a JavaScript object so I'm going to wrap that inside of the dir function and if we take a look at this now here is the JavaScript object that represents this Dom element and we can take a look at all of the events right here and again we can tell that these are events because they have the on word in front so you have on focus on error and so forth now most of these events may not even actually really apply to this element but javascript does allow you to attach all of these events but some of them won't apply for example you have let's say if we go down you have let's say on play on pause and so forth these right here are more for the html5 video element but they are available on this button but it's not really ideal those events won't be triggered on this type of element so what you have to do is you have to look at the element and say does it have that functionality can you play a button no you can't can you pause a button no you can't so those events you're better off just leaving North for this element but for example can you let sing onmousedown so when I push my mouse down is there an event triggered there yes on Mouse out for example and even onmouseover if I hover my mouse over this button yes that could trigger an event on Mouse out is when I'm holding down so the event won't trigger and as soon as I release then the on Mouse out event will execute so you have all of these events you just need to look at those events and you need to decipher can those events be triggered on this type of element but we're going to keep things real simple and we're just going to go with the standard click event so when the user clicks on this button I want to trigger an event so let's go ahead and take a look at the on click event which should be in here there it is on click now we know that this event isn't going to trigger on this particular element because its value is null right here so at the moment on click is not defined so let's go ahead and define this event so the first way of attaching an event listener is to attach it directly via this object right here so I want to again target the document which is JavaScript representation of a HTML file we want to pull out a specific object to do with an element with the ID of event click which will return this object as we know and then what I want to do is as we're working with an object now so don't forget this is just pulling in this object so we are working with an object I can just say dot on click now I am targeting the on-click property right here on this object and I want to change this from a property because at the moment it's null which means it contains a primitive so it's a property and I want to reassign the value to be a function so now it's a method and this is going to be triggered this function right here will be triggered when we click on the button so I'm just going to create an alert dialog so I'm just going to say alert and then I'm going to say hello world very simple so all I'm doing is I'm targeting that object I'm targeting on click and I'm reassigning the value so I'm deleting that null value and assigning a function in its place and this function is simply going to open up an alert dialog so now let's go ahead and pull up this object again so I'm just going to do it in the dir function don't forget so I get an interactive list and if I scroll down and we go to on click you will notice it is in fact a function right there so let's see if this function executes when we click so I'm going to click on the button and there you go you now have an alert dialog box and it has the string hello world that's exactly what I told the function to do so this is one way of adding an event listener now there is another way that adds an eventlistener natively and this is ideally the way you should do it not this way but by using the add event listener method so what I want to do is refresh the page and now what I'd like to do is print out the object again to do with this input element that we have this button and you'll notice that dot on click or the on click property will have the value of null likewise I can just say you know go grab that property and return the value for example dot on click and that will tell me if that particular key name stores any values which in the moment is only storing a null value so now when I click nothing will happen all those events have been completely removed or that particular event has been removed but what I want to do now is add an event listener natively so again we do exactly the same thing whenever you want to work with a specific element you first need to target the object that resembles that element in the Dom and then you need to say add event listener and then we need to pass in some parameters to this method now again be very very careful here event must have a capital e and L must be capitalized as well and then we need to first of all pass in a string now we don't say on click anymore that is the property name on this object that is a key name on this object however when you want to add an event listener just omit the on so get rid of on and then you're just left with the actual event name which is click so you can have a look through all those different events that you can apply and just omit the on word in front of it so that's the first parameter which says that's the event that we want to add a click event next we need to define a second parameter so we need to put a comma in here and then we need to define the action which again this is going to be the function that is invoked is executed when that event is triggered so let's go ahead and create an alert dialog box with the value of hello world exactly as we had before and if I go ahead and click you will notice that it shows up here there's the alert dialog box that I told it to bring up when this event was triggered and it has the string hello world inside of it now the difference is let's go and take a look at our object that resembles this Dom element so again I'm just going to put that into the dir function to get an interactive list and we scroll down and on click is null now that's kind of strange because last time it was a function and we know that when we clicked it that function got invoked so where exactly has this event listener right here added this function well the simple answer is you can't actually look at this particular event because it's managed by the native code now how do I know that well the simple answer is I'm going to target the add event listener but this time I'm not actually going to invoke this function so don't forget this right here is a function the add event listener function but I don't want to invoke it now in JavaScript what you can do is say no don't invoke it don't run it rather if you don't include those brackets as you know it will return the function tech so we can actually look at the function itself in syntax now you will notice something quite strange here it gives you the function name out of it listener yes that's fine but wait a minute what's this this is native code this means that this function is actually running code in terms of the JIT compiler it's actually in the programming language of the compiler which is a lower level language which is CPP if you don't know what I'm talking about right here don't worry about it it's native code that you can't look at in JavaScript so those instructions are written in a different language essentially so what happened with our event listener well this event was actually attached natively so that's different before I was attaching an event directly on the object itself and we saw that function but now this is actually being handled by the native JIT compiler so we can't actually look at our event now in an actual sense of you know printing out an object and looking at where that function was produced this is all being managed natively and therefore that's why we don't have the on-click property right here set to any value it's still set to null this is a different way of attaching an event listener but however this is recommended because this is faster so when we run so when I executed this line of code what it did was it told the JIT compiler I want you to manage this function right here what it did was it took this function and it converted it into native bytecode and so that means the function has been interpreted and it's waiting for that click event to trigger and so this is all happening in the native side which is quicker whereas if we were to attach that function to the key name on click well when the button is clicked it goes to this object it takes a look at that on click key name and it sees if it stores a function if it does then it takes that function it then compiles the function and runs the function however this way means that the function is already in native bytecode so it's executing a lot quicker and when you have hundreds of events on a page that could be triggering loads and loads and loads of times thousands of times then having your code already compiled having that function ready and compiled and waiting to be executed is a lot faster now also there is another benefit to adding an event listener and that is if you take a look at the on-click property this key right here and you let's say populate that key with a function turning into a method then you could only have one function in that key which means you can only have one function that executes when the button is clicked however in the case of the add event listener you can actually have multiple events so here's the first one that we added which was a function that brings up an alert dialog now let's go ahead and add another event listener and again it's going to be the same one click and then we're going to run another function and this time we're going to create another alert dialog which is going to be another dialog like so so now we're going to have two alert dialog boxes when we click on this button so this function right here does not override or get rid of this function in fact they are both compiled in memory so let's take a look at this now click me we have the first alert dialog this one right here and then another alert dialog that from this function down here so you can have multiple functions that are attached to a single event on one single element like so now I'd also like to show you how to remove events as well but unfortunately in this case I can't actually remove those events so this is the danger of using the add event listener and that is the fact that what I've done is I've added anonymous functions so again these are functions without names so this function has no name I can't physically call it back and the issue with adding anonymous functions or even inline functions with your event listeners is the fact that you won't be able to remove those functions you need to be able to reference those functions so we must create the function outside of the event listener because if I was to simply target the element and say remove event listener and again event is the capital e and listener needs a capital L and if I was to say well just go ahead and remove all of the click functions for example now it's still there so we can't actually do it and you do have to define the name of the function that you want to get rid of and again this has to be a pointer in memory in JavaScript so you need to be able to point to it make a reference to it which in this case we can't actually do because we have an anonymous function and likewise even if I was to give the function a name and you couldn't just say remove event listener and then put a comma in there and then type in name it still wouldn't work so what you need to do is make sure that this function right here is not actually written in the add event listener method what you need to do is reference it so that function needs to be declared outside of the add event listener method so let's go ahead and refresh the page and start again and what I want to do is create a function now this is a globally accessible function so this function will be stored within a key name in our window object don't forget what happens here if I create a global function so I'm going to say global function event clicker and then I'm going to open close the brackets and open and close the parentheses and the execution context is just going to be one command which is an alert dialog box hello world now it will create a key in the window object and this key will be called event clicker and that is a function there we go so this is a named function we can reference this function so what I can do now is target my Dom element and then I can add an event listener and again the first parameter is what event would you like all at the moment we've got nothing right now as you can see so I'm going to add a click event and now I'm not going to write an inline function that will be anonymous and be impossible to remove so what I want to do is reference it well I can reference it by its name event clicker so if I just say event clicker right here what it's going to do is javascript is pretty smart it can say right this to me looks like a global accessible key name which event clicker is in essence a key name and it's going to go to the window object and look at the event clicker key and it will find a function and that function will then be attached to this Dom element and when the user clicks on that Dom element that function will in fact be invoked so if hit return now you can see that yes it was attached correctly and now we have a reference to this function so now I can say remove event listener and again I need to specify the type first and foremost so the type is again the click event because I added it under click so I'm removing it on a click and then you need to specify the function name you want to remove which now we haven't got an anonymous function or an inline function with the name again that won't work you need to create the func in first and then reference it and now when I click boom the event no longer triggers so again target the Dom element or the object that resembles the Dom element and then either add an event or remove an event and please make sure that those functions that you're passing in are able to be referenced so there you go go ahead and start playing around with event listeners and adding interactivity to your page		