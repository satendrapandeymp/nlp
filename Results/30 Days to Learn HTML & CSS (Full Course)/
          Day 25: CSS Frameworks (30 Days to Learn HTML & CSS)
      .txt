it's fairly common for designers to use CSS frameworks or what we call them a collection of styles that make it easier to build our designs one of the most popular is called 960 grid system and what you see here is it sets a handful of classes that allow us to quickly develop a column structured layouts so you see right here where we have one column and then we have another so we have a set of three columns if I were to right-click on this and choose inspect element you can see that it's being applied by adding classes in this case it's adding a class of grid 4 so watch what happens if essence then becomes a class of the grid 12 if I tab off it that will now take up the entire width and what's nice about this is when you're not having the measure on your own you can create much more quickly so if let's say we want essence and dimensions right here to both be on the same line so we want to column lines well grid 12 is the maximum it's a 12 column grid so why don't we change this to 1/2 of that 6 and then I'm going to do the same thing with dimensions and notice dimensions is showing up because grid 4 so mostly we're trying to add up to 12 if that makes sense let's change it to 6 and now 6 plus 6 is 12 and they're both on the same line what if we want purpose to take up a smaller amount well we could say 6 and then this one would take up maybe 4 that equals 10 so that means we have a grid to available to fill up that void and now we've adjusted it like so so yeah using a grid can be really really helpful however it's important to know some people don't like grits they think it's better to use your own CSS or to create your own grid by hand and a lot of people feel that adding these unsymmetric classes to your markup is a bad idea remember a class name or an ID should describe what your element is but grid 6 that says nothing that's really visual it doesn't describe anything about the content so a lot of people don't like this now it's important to know though there are a variety of ways to get out of this there are what we call CSS preprocessors that allow us to who create grids in our style sheets however that's going to be a little bit beyond the scope of this tutorial and it's still okay plenty of people will use grids like this so let's get started I'm going to come back to the top and choose download we're going to open this up as you can see it was created by Nathan Smith and it's going to have a handful of folders in here but don't let this scare you what we really need here is within the code folder and if we click on CSS you can see there's a bunch of these here what we need is either the 12 column or the 16 column the only difference is the number of columns that it creates if you need a lot more room you might use 16 columns to fit more in and each column will be a slightly narrower width but we're going to stick with 12 so we will copy this one and we also want a reset and we can also add text dot CSS that will reapply some base stylings such as making the font-weight:bold setting some sizes for our headings etc so I'm going to hit command C or ctrl C to copy that next I'll open up our working directory into our CSS folder and paste these in so now we need to reference them within our page so again remember the last lesson how I discussed HTTP requests in a real word project when you're ready to put this on the web you will likely want to combine all of these into one single stylesheet but for now you can keep them separated so let's see what that gives us let's load it in the browser and I don't have anything here so let's make sure that we add a bit of markup what we'll do is we'll add some traditional markup and then I'm going to show you how to implement the grid framework so first we're going to have a div with a class of rap and within it why don't we have our header and an h1 of my website and once again we'll do a nav with an unordered list and we'll have three list items each with an anchor tag that links to nowhere home about contact and so our header is finished why don't we have our main section now and we want to have our main content area and then perhaps a sidebar so why don't we say div primary for primary content area and within here we'll have a P tag and then we'll also set a sibling for a sidebar and we're going to use the acai element because it's content that's related to the main content area or the primary content and within here we will say maybe an unordered list maybe we have some additional sub navigation so maybe six list items and we're going to say sub okay so this gives us some gibberish content to get started I'm going to come back now and reload and we want to turn this into an actual website so we are linking to the style sheets if we want to make sure we view source and click on them and you can make sure that you are referencing them appropriately if you receive a error page you know that you might have made a mistake linking to it if we open up the 960 framework these are all the classes that we can work with so don't let these confuse you mostly there are just different ways to specify widths and padding now the first step here if you can see container it has a width of 960 and it sets the margin left and right to auto which we know will Center it on the page and this is important the 960 framework is specifically made for websites that have a width of 960 it's been decided that that is a good number to compensate for all of the various computer screen resolutions that's beginning to change so you might want to consider a width of maybe 11 20 but this works to 960 is extremely common let's come back and now let's apply that class wrap and then container 12 notice here that we can apply multiple classes by using a space now of course you cannot do that with IDs you might be able to get away with it but it's not what it's for an ID should refer to one element not to multiple so let's keep it like so and now if I load the page refresh you can see that that's now been centered on the page and it's been pushed over if you were to apply a background color you could really see this take shape I'll do that right now for the example background red and there you go you see you have a nice centered website the next step is to maybe push the navigation to the top right so let's open up style that CSS and I'm going to override container 12 and apply that background color of red because I think it's easier to see the dimensions of what we're working with the next step is within the header why don't we specify that the h1 should have a class and how can we set these if we come back look at all these different grids every grid is floated and that's the way this is working you create your columns by floating each section and then it is overwritten where each grid so grid one two three all the way up to twelve has a different width so if I were to set the h1 class and we gave it a class of grid four we know that they need to add up to twelve so why don't we then make the navigation have a class of grid eight eight plus four equals 12 and this should take shape for us and now that takes up grid four and this will take up all the available space and now if I highlight these you can see that so let's go into style and we're going to say nav li display:inline so that we can create a horizontal list so that's fixed next let's work on right here main so why don't we set a class of grid 8 and the aside will have a class of grid 4 and now that's moved it over slightly but if we apply background colors again we can really see the effect so let's do that now a side background is green and primary content will have a background of a grayish color now this might look really odd to you first this is the main content that should be on the left so why is the sidebar on the right that should be over here right and that's because this is not clearing anything above it right here notice how this is lining up with the top here it's not quite clearing it so it gets stuck right here if we want to fix that and clear it we can either do it manually or 960 provide some classes but also we need to note that if we come back to our markup because within our header we have floated both the h1 and the nav it has collapsed in on itself we can verify this by going to style that CSS and setting a background color and seeing if that takes shape reload and notice it's nowhere to be found because it's collapsed we can fix this by using the overflow:hidden trick that we learned and we could do it inline overflow:hidden and notice that forces it to contain its floats and you'll also notice that it fixes the issue that we have right here so we can either manually specify this or we can apply a class of clear fix watch what happens if I do it right here with the header class of clear fix and if I reload the page that is going to work and that's because the 960 framework provides a class of clear fix and what that does is it gets the content after and it clears it and this is what we call the clear fix hat and it essentially forces the element to contain any floats it's kind of a more error proof way of doing it rather than doing overflow:hidden feel free to do whatever you like though if we want to give this some breathing room why don't we come back to style and we'll say main margin top maybe 30 pixels and that's going to push it down ever so slightly and also why don't we apply some margin bottom as well so I'm going to use the shorthand 30 pixels on the top and bottom and zero on the right and left however again that's not going to take shape because we have floated all of the elements within this main section the exact same thing so again you can apply a class of clear fix or if you use a CSS preprocessor if you increase your skills you can do that without adding these extra classes and that's generally what I do and now you can see that is contained to those floats so it makes sense that our heading and our navigation should probably follow the same format as what we have right here so let's come back and adjust this the headings section will have a grid 8 and the nav will be grid 4 and now if we want to make sure that this lines up perfectly with this box let's apply a background color again just so we can see what we have going on running out of nasty colors and I'm going to place this up here reload notice that the lines are correct but the list items aren't and that's because a margin left for each list item is being applied so you could say margin left is zero and that's going to push those over and then you could apply margin right to add the spacing back in so now we can get rid of that and our lines are nice and neat let's do a next section within our main content where we want to have perhaps three or four columns within it and within our primary section we know it sets a grid eight as the width so now we know we can have four sections with grid two and notice I used the word section well that makes sense to use a section element and I'm going to give it a class of grid two and next within here I'm going to add a little more dummy text some editors have what we call lorem ipsum text built in by default reload that and that's probably way too much why don't we seal it off right here that looks good and now I'm going to duplicate this three times so that we add up to four grids now if I reload it it looks a little off well how is that possible why is this one dropping to the bottom and it's because there is margin right apply to each grid and that's what creates the spacing right here so what we have to do is specify that the very last one shouldn't have any margin right at all if I inspect element and we are on this last section if I set margin right to zero and then we go to the very first one and we set margin left to zero you'll see that that jumps up then now 960 provides helpful classes for this which we call alpha and omega and thank you say alpha Omega and sequence so it works left to right we can set alpha and this will set the margin left to zero and the very last one Omega will set the margin right to zero on this one and if I reload now those are all contained and this is really neat because you could then if you have lots of sections right here we could repeat this exact same thing and now you quickly have a column structure and you didn't have to do this on your own and of course you would probably want to provide some padding with n so next why don't we provide some headings in sublime text I can be clever because we have access to multiple cursors so I'm going to select this P hit ctrl command G on the Mac and it's going to select every instance of them and then I'm going to hit up and right here we will add perhaps a heading four and we'll add some generic text multiple cursors are amazing definitely use an editor that supports them if I reload now we have headings for each one now one thing that you will most likely do is you're going to try to apply padding to each of these sections and you're going to find that it screws up your layout so let's be generic here and provide ten pixels of padding all around for each section but watch reload now it's all messed up because padding is applied in addition to the width so with got any padding the width is perfect for four columns but as soon as you add padding in this case 10 pixels to the left and right we've added 20 additional pixels of width to each column or 80 pixels for all four sections and this is something that that irritates a lot of people so you have a couple options here one would be to add more on semantic markup and what some people would do is within this section they would add a div right here and what this allows you to do is then apply the padding to the nested div and that's not going to create any issues so what I'm doing right now is I'm going to copy this right here so we have our newly formatted markup and if I reload it still looks the same but now we will apply the padding to the div and it looks like we forgot to add the final Omega so we have alpha to 3 Omega and now that has fixed it and we're able to add as much padding as we want now the one problem with this though is again maybe it's necessary to add that extra div but be careful about adding too many dips we call this div itis and if you're not careful it can really quickly muddy up your markup so another way that you can fix this and I will remove all of those so we are starting from scratch and I'll get rid of this is to change the box sizing so this is a very high level but the basic box model says that you take the width and then you add margin and then you add the padding's applied to the element and that equals the full width of the elements however older versions of Internet Explorer did it a different way and some people think that this made more sense internet explorer would take the width that you specify so if I said this is 200 pixels it would say okay the width of this element is 200 pixels it can never increase if we apply padding we will reduce the width so then the effect of width would be 180 pixels and then we would add 10 pixels on the left and right which comes to 200 and a lot of people think and I think even including myself that this made more sense if I set the width to 200 I don't want it's effective width to be higher I want it to be exactly on your pixels regardless of any padding that I have so we can override this and specify that we want to use the older form by setting the box sizing element section box sizing now that a fault is content box but we want to update that to set it to border box so now with that applied let's add padding of 15 pixels and now we've added that without having to add any of these extra divs into our markup if we switch the content box which is the default and effectively the same as removing it you'll see that we have that issue again so what this does is it specifies that we are going to set a width which is already applied by the class that we gave it grid to and then any padding will be reduced from that width so that we never increase it and we don't screw up our grid now one problem with this is it's a relatively new property which means it may not work in older versions of ie and you need to investigate that to see if that's a problem also because these are new features many browsers will add what we call prefixes while they're playing with them so in this case what you would want to do is now the reason why it works just like this is because Chrome is an advanced browser and it's very quick to adopt the new standards browsers like Internet Explorer though they are getting better or not quite as quick the same thing with Firefox and this also accommodates older forms so though chrome supports box sizing now a handful of versions ago it didn't in that case in those browsers it supported the prefixed sized version WebKit box sizing so this is a good practice to make sure that we are capturing adoption in as many browsers as possible so that's all we're going to do here for grids I highly recommend you check it out it can really increase how quickly you build a website and it also keeps you from ripping you hair out when you cannot figure out why a particular block is maybe dropping down these grids are highly tested and it will ensure that you spend less time fixing bugs and more time building your layouts in the next lesson will be the beginning of our final project where we will convert a complete website over the course of a few videos to HTML and CSS so stay tuned		