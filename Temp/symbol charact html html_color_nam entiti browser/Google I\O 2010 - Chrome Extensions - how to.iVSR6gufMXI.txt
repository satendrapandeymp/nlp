you hey everyone my name is Brian Kennish I'm a developer advocate on the Google Chrome team and the name of this session is Google Chrome extensions how to so I wanted to do a quick survey here and figure out how many of you have already built a google chrome extension well I see people on my team raising their hands which is a good sign and how many of you have built a browser extension of any sort oh wow awesome so a fair number of you great so in this talk I'm going to do a little intro material on what Google Chrome extensions are and what the extension ecosystem looks like and then I'll spend the bulk of the hour talking about the technical bits of how you actually implement these things and for those of you that are already experienced extension developers I picked some new extensions as examples and i'm going to pick them apart and show you how they work so there should be some new content in there for you as well all right a couple of housekeeping items before I dive in here we have a wave back channel available for this talk which you can get to by going to jump that's JMP / chrome 6 there's a moderator gadget in there where you can queue up questions for me and I will try to take some of those in addition to live questions at the end of the talk as a bit of foreshadowing I'm actually going to be talking a bunch about google wave in this talk and how you can mash it up with chrome and the second item is that we have a suggested hashtag which is also chrome 6 to use with your favorite microblogging service such as Google Buzz hint hint all right so I've organized this talk somewhat along the lines of a typical programming book like I said I'm going to start with some intro then I'm going to do the canonical hello world thing in live code the hello world of extensions and then I'm going to go through a series of deeper dive technical topics so I'll start by talking about web eNOS which is the fun word to say but also extensions happen to be webby and I'll talk about how so then I will get into the feature set of the extension system next I'll talk about html5 which that's obviously a big topic of this year's conference and show you how you can integrate some html5 features in your extensions then I'll talk about the experimental stuff that we're tinkering with in the extension system and finally like I said we'll do some Q&A time permitting so this thing is awesome but I'm going to go over the podium to drive now all right so what are Google Chrome extensions so you already know what browser extensions are of course their programs usually small debt add some features to the core feature set of the browser and if your browser has a healthy extension ecosystem it means that there are thousands of these extensions of these optional features that are available to users so essentially you can create your own custom browser so all of us are running Chrome we all have different sets of extensions installed essentially we all have a different and unique browser when it came time to designing an extension system for google chrome of course we wanted to apply some chrome like thinking to how extensions should work so we made it so that chrome extensions are simple stable and secure in terms of simplicity as I hope I'll show later extensions are really easy to create they're all so simple in terms of the UI that they present to users so chrome is obviously a very streamlined browser even the name google chrome is an ironic play on the fact that there isn't much browser chrome and we want extensions to work in the same vein so our goal is to give extensions all the UI that they need to do you know what they want to do but no more in terms of stability you probably know that web page is in chrome all run in a separate process so they can only have a limited impact on the overall browser performance and we do the same thing with extensions so each extension will run into own process and a poorly performing extension can only have a limited impact on the browser performance as a whole and in terms of security we make it so that extensions have to be really clear about the their permissions within the browser to users we've also worked hard to isolate regular web pages from the extension system so that it's very difficult for a malicious web page to gain the extra privileges that an extension has and then we have a gallery for extensions which I'll pull up here so this is our extension gallery we also tried to do some chrome like things with the gallery we want it to be really fast for developers to get their extensions live and available to users so almost all extensions are automatically reviewed and approved and literally available to the entire chrome user base within minutes we also want to make it easy for users to stay up to date with the extensions that they've installed and since there's nothing really easier than automatic we've made it so that extensions that are in the gallery can auto update just like chrome itself auto updates so as a developer you add a new version of your extension into the gallery and users once they're online get it within a couple of hours so now I want to talk about the health of the Google Chrome extension system and show you some numbers so we the gallery that i just showed we launched back in december almost six months ago and we were really blown away by the fact that on launch day developers who up to that point just had access to the extension system in the chrome dev channel had already uploaded more than 300 extensions to the gallery we continue to be blown away by how many great extensions developers have been creating on average we're getting more than 750 new extensions uploaded to the gallery every month if you think about that that's actually more hours than there are in a month so on average every single hour a non google developer is adding a new feature to chrome it's pretty amazing usage numbers of Chrome extensions have been equally impressive more than 10 million extension installs are happening every month and that represents more than fifteen percent of the total chrome user base so more than fifteen percent of Chrome users right now have at least one google chrome extension installed alright so let's talk about some technical stuff now so I should give you the caveat that I am the world's worst I / but extensions are so simple that I thought it'd be a shame not to do some live coding and show you how easy it is to create an extension from scratch if you see me make mistakes though don't don't be afraid to call them out so I've given myself a set of steps here so step one to creating a Google Chrome extension we just create a plain old directory so I'm going to navigate to my desktop here and I'm going to create a new folder and since we're doing a holo world i'm just going to call this hello there we go already already a typo and i'm going to open up this directory so that's step one next I'm going to create something called a manifest file so I'm going to go back to this directory and create a new text file and the manifest file is the one file in the extension system that has to have a particular name and that name is manifest JSON so I'm going to pull this file into my text editor I'm just using an ordinary text editor could literally be using anything here and as you probably have already deduced from the name this is a JSON formatted file and the monett manifest file is a descriptive file that tells the extension system all about your extension things like its name what permissions it has within the extension system and pointers to its other components so I'm going to create a JavaScript object here and then I'm going to give it a series of required and optional properties so the first will be a name and I'm going to be real clever here and call this hello I Oh next I'm going to give it a version string and I'm just going to give us the value of one so this version string is actually a key piece of data I mentioned earlier that extensions can auto update and this is the mechanism by which the extension system does that so it will examine the version string of the extension and it'll know whether or not a update needs to occur next I'm going to give this extension a description and I'll just say like to say hi and try to spell that right and then I'm going to give it a series of icons so this will be used at various points by the extension system this is going to take a hash the first one is going to be a 48 by 48 pixel icon and this is used on the extension management page will look at that in just a second and the next will be a 128 x 128 which gets used at install time and then finally I'm going to give this extension some UI and the UI i'm going to use is called a browser action this is also going to take an object i'm only going to partially fill this in for now just because i want to get this extension to a runnable state so i'm going to add a default icon so a browser action is a little piece of you I that appears in the google chrome toolbar and it can take an icon up to 19 x 19 pixels so i'm going to give this thing a 19 pixel icon and it should be good to go for now so i'm going to save this alright one more thing I have to do before i run this is add those icons that I just specified so you guys probably don't want to see me mess with stuff in Photoshop for the next 30 minutes so I pre-made these go back to my desktop here and I'm just going to copy these icons into my folder all right at this point I should have a runnable extension let me just clean up a little here so I'm going to go to a new browser window and I'm going to go to the extension management page going to open developer mode here and i'm going to say load unpacked extension this extension is unpacked because it's not all packaged for users yet and i'm going to navigate to the folder i just created and say ok and there we go so we've created an extension here now you can see here is the browser action that i just created let me zoom in there for you since it's a little small this is that 19 x 19 pixel icon now you can see if i click on this thing which is what i'm doing now nothing actually happens so i managed to create a hello world program that does everything except say hello world so let me actually add in that hello world part so it to do that i'm going to create a pop-up and this is going to be a piece of you I that appears when the user clicks on that browser action I'm going to go back to my folder here and create a new file and I'm going to call this pop-up dot HTML and before I can actually use this I have to point to it in my manifest file so I'm going to add a couple more things into my browser action you I hear the first is going to be a default title this is going to be a tool tip that will appear when the user Mouse's over the browser action icon and i'll just say click for a special message and then I'm going to add one more thing which is that pop-up file that i just created so I'm going to say pop up and point to pop up dot HTML and then I'll save here so this pop-up file is just an arbitrary HTML file I'm going to drag it into my editor for those of you that are big proponents of valid HTML you might want to look away for the next two minutes and plug your ears because i'm not going to concentrate on that so I'm just going to create a very simple HTML file here i'm going to create a paragraph give it a little style and say white space no rap just so this thing doesn't break and i'm going to say my hello world thing here and close out that paragraph and it should be good to go so i'm going to save this now all i have to do to see the results of my change is go to my extension management page and reload this extension oops makespan this here so now you can see when I mouse over it I get that oops I get that tool tip that I created and when I click voila we have our holo world so now we're done with our extension I could stop there but since we have this nice gallery let me go ahead and actually upload this to the gallery so to do that I just hit publish your extensions in the gallery i'm going to log into my gmail account and I'm going to click add a new item here so this takes a zip file so I'm going to just zip up this directory that we created so we now have a zip and i'm going to choose the file i'm going to navigate over to it and hit upload now at this point I could add some nice text that describes the extension some pretty icons maybe even a video that shows you how to use it since it's very complex but I'm not going to do that for now for time considerations I'll just go ahead and publish this and say yes so for those of you that have laptops with you but have to specify a language here let's try that again as I was saying for those of you that have laptops you can actually go into the extension gallery now which is at chrome google com / extensions and download this awesome extension that we just created alright so I originally concluded this slide with a little joke here but the thing is we launched a web store yesterday as you guys probably all know and soon you'll be able to sell your apps including extensions online and it'll be really easy to actually make money from your apps of course even last week you could make money from your extensions but our goal with this Web Store is to really reduce the friction for developers making money doing things like collecting money from different countries and in different currencies is not easy and we want to take that burden on for developers so this is a nice thing to have if you're interested in monetizing your extensions all right so next I'm going to go through that series of technical topics and I'll start by talking about well if you only take one thing away from this presentation I think it should be this fact which is extensions are web pages I said a little bit of an oversimplification so I'm going to correct this slightly to say extensions are mostly web pages and the reason I say that this is the most important thing to take away from this talk is that you already know how to develop web pages therefore you already know mostly how to develop extensions so in particular just like web pages extensions are made out of standard web technology so HTML CSS JavaScript and so forth pretty much anything that you can get google chrome to render images flash movies java applets and so on you can put into your extension secondly as we just saw the development and debugging process is very similar for extensions and web pages so when you're developing your extension you just edited in any text editor save your changes and reload just like you do with a web page in the same way you can use google chrome's developer tools to debug if you haven't used google chrome's developer tools at all or haven't used them for a while they've gotten extremely powerful in the last six months and I highly recommend them out i'll show you some tricks that you can do with them in a little bit and finally extensions have access to all the other hand EAP is that web pages have access to so you can use dom to traverse and manipulate your extensions you can use xhr to make cross-origin requests which we'll look at in a second you can also expand shins don't have to be cross browser compatible you can use more cutting-edge features that are only available in some browsers you know obviously chrome things like html5 which we'll talk about later there's amazing amount of html5 features packed into chrome you can also use WebKit vendor experiments there's some really nice CS things in particular for doing filters and animations and finally the v8 JavaScript engine that chrome uses has a built-in JSON library which is very nice if you're doing any kind of xhr work you can just parse and stringify without having to pull in any extra code now I said extensions are mostly like web pages here's the part that's not covered by mostly there are some extra things that extensions can do then a regular web page cannot the first thing is that extensions as we've seen have some more access to more you I surfaces the first which we've already looked at is that browser action which is this icon that installs in the chrome toolbar and like we saw it can optionally have a pop-up attached to it next we have a page action which is an icon of similar size but unlike a browser action which appears the chrome toolbar and alls appears on every single tab that the user has a page action appears in the chrome omnibox and it can appear it selectively so it can be toggled on and off depending on the page that the user is visiting and this can also have a pop-up attached to it next we have content scripts which are similar to briefs monkey or user scripts they let you inject arbitrary CSS and JavaScript into any matching page that you want to and then we have some more we have a bunch of you I surfaces that are not available in all versions of chrome yet I'll start with the ones that are most available and and move to the ones that are lesser available the first is desktop notifications so this is available everywhere except in the stable channel of chrome it will be available actually let me clarify a little bit so desktop notifications you can use in every version of chrome right now there's a special hook into the extension system where you don't have to explicitly ask the user for permission every time you want to show an extension that it won't isn't yet available in the stable version of chrome but it's available everywhere else and it will be available in the next stable version so these are little info bubbles that appear in on the bottom of the user or top of the user screen next we have a couple of experimental you I surfaces the first is info bars which are the things you see for example when you enter a password into google chrome and it asks you if you want to remember you know it wanted to save your password which you saw earlier when i plugged in my password so you can actually initiate these and generate these on your own and we also have an experimental context menu feature that lets you add items to the users context menu next we have three special components that an extension can have the first we already saw it's a manifest file next an extension can have a background page which is a page that runs for the entire lifetime of the extension but it's not shown to the user and it's useful for doing things like coordinating tasks if you have a complex extension or remembering state sort of thing we'll look at some background pages in a little bit and finally you can have an options page which lets you give the user the ability to configure your extension next we have a set of privileged ap is that extensions can hook into this is a cool diagram of the extension ap is that a non google developer created so there are four AP is for doing things in the browser things like manipulating windows tabs and then history and bookmarks as well and then we also have for AP is that our extension specific so they let you manage your browser actions and page actions we also have a utility class for sending messages within an extension and we have an i 18 n class for localizing your extension into different languages so I should say that automatically your extension gets this chrome object and all of these api's are modules under underneath that chrome object that you can automatically access alright so next I want to take a look at some examples that implement this stuff and I've put together some use cases of things that you might want to do with extensions the first I'm calling the notifier pattern this is quite a common pattern for an extension so the scenario is you have some sort of data that you want to manage and display for the user it could be local data for example you might want to keep track of how much time the user is spending on the internet and showing it to them or showing them what pages they visit most often but more likely it's going to be some kind of remote data a good example of this would be one of the more popular extensions is the gmail checker which shows you account of your unread messages so once you have this thing and what we're talking about here is generally smallish data that you could display with a few characters or a number you're going to want to show some kind of counter to the to the user and further you might want to add some more details so if the user initiates some click on on there on the counter you can show them additional details so the way we can implement something like this is first to pull down data we can use cross-origin xhr so the chrome extension system lets you make craw Sarge and requests I should probably explain xhr for those of you that aren't familiar with this X hrs xml httprequest it's sort of the flux capacitor of Ajax it's what makes Ajax possible so if you want it once you have this data in order to display it we can use something called a browser action badge so this was a little piece of you I that I didn't talk about earlier you can overlay some characters automatically on top of your browser action badge it these characters are variable width font so you can fit somewhere between four and six characters in there so it's good for things like showing a number especially or you know small small amount of written texts and finally we can attach a pop-up to this so that if the user clicks on our browser action badge and wants more information we can show them more information about the items that were displaying so the example extension that i'm going to show here i'm going to navigate back to the gallery here and i'm going to show you this google wave notifier that we just released yesterday we worked in tandem with the wave team on this they've created a new JSON based API that lets you get a snapshot of a user's inbox provided that they've authorized you to do so and I'm going to install this thing you'll notice that it's telling me what permissions this extension has first of all and you'll see that it added this browser action badge here right now it's grayed out and how the ? I'll zoom in there so you can see it a little bit better and I'm taken to an OAuth page here so I'm going to go through the typical oo auth dance and authenticate here once i hit grant access here if you pay attention to the badge up here it's going to change colors animate and then it'll eventually show the count of my unread wave messages so there we go it's now in color and i see that i have seven unread waves and i can click on this thing to show those waves i'm seeing five of them by default here i can actually configure it so it shows me all them if i go to the options page here i can say show me up to 20 and then I'll see all of my waves here and that's basically a pretty common pattern among extension so let's take a look at how this thing is implemented so I'm going to start by pulling up first we'll talk about the xhr part I'm going to start by pulling up the manifest file here and this looks pretty similar to the manifest file that we created even though this is a much more complex extension one thing that's new in here is this permissions property so the first thing that we have in here is the tabs permission for some of the api's those privileged ap is that I talked about they require some extra permissions and tabs API is one of them so we're using the tabs API in this extension to create new windows for example that Oh off page opened up a new window in the users browser we need the tabs API to do that also when you click on those waves in the pop-up it'll open up they'll wave client and a new tab and we need the tabs API to do that as well in terms of the xhr we have these two URLs specified here and this is telling the extension system that we're allowed to make cross origin requests to these URLs so inside our extension code we would just make once we had those permissions we would do xhr work as it just as we normally would now i'm not going to show it to you in this extension because it's kind of buried in a library but i'll point you to the library that it uses because it's quite useful if you're doing any oh off work we provide this Oh a library that makes doing oh off quite simple so there's not a whole lot of knowing of what the bits and pieces of OAuth are to use this you can just use it pretty seamlessly so next let's talk about how we go about once we have this data pull in how we go about actually displaying it for for the user so I'm going to open this library file where the displaying is done and we have a function in here where we set our browser action badge and the first thing that we do is we set a color on that badge and we do this by calling the Chrome browser action API and using a method called set badge background color that just takes a color property which is an array of RGB a values and then we have a another function in here for actually setting the badge text this is that same API and we call the set badge text method which takes a text property and then a string and that's how we set the badge text finally we have this pop-up that we display when the user clicks on the browser action badge it's okay look at how that's implemented so a common pattern that I often do when I'm creating these pop-ups especially things that are displaying a lot of data you can see this is all the HTML for the pop-up is that i'll just create a template so here i have a template called digest which will contain each of those wave digests and it has two pieces of data within it a title and then a snippet you can see that I've given this an ID of template then if we go over to my CSS here all I'm doing is making that template invisible so when I'm actually ready to use the template I'm going to gather all my data together and like I said this is a frequent pattern that you'll do is that you're going to loop through your data and populate that template so here we have our loop for going through the data and then here's the key piece of code that takes that template you can see that it clones it right here and then it appends the clone to the body over here and then once we have that template appended to the body we just populate it with our data and we just keep doing that over and over again and in that right so it's a really nice way to have a very small amount of code and you know easily fill up a large amount of data alright so the next use case that i'm going to show you i call the detector pattern it's also a frequent thing that we see done with extensions so the scenario here is that we want to figure out if pages that the user is navigating to contain some kind of some piece of key data so we'll do some matching against that the pages that the user goes to and then we just want to do a simple indicator saying yes that or no that data does or does not exist the way we can do this is with the content script so we'll inject the content script until all the pages that the user navigates to and then we'll do some examination on those pages and once we determine that one of these pages has the content that we're looking for we can send a message to a background page and say put up a page action so as a reminder a page action was that small icon that appears in the the google chrome omnibox and can be toggled on and off so let's look at an example that does this I'm going to open up the new tab here and i have this extension bookmarked so this is a sandwich detecting extension very important especially if you're hungry so i'm going to install this and what this extension will do is that when i navigate to a page that's talking about sandwiches it's going to show me an icon like this that you see right here that indicates there's sandwiches being talked about on that page so i'll start out by doing a google search for let's say puppies and you can see nothing is appearing in my chrome omnibox here which is a good sign means people aren't making puppy sandwiches if i search for roast beef on the other hand there we go we get our sandwich icon so this page is talking about sandwiches all right let's see how this thing is implemented so I'll start by looking at our manifest file here we're going to see another new thing in here which is that we are specifying a content script here and we give it a couple of match patterns you can see that these are wild cards indicating that the our content script will be injected into every HTTP and every HTTPS page that the user navigates to and then we're specifying a jas file here we could also specify a CS file if we wanted to it's not an either/or you can inject both and even inject multiple JavaScript and CSS files into any page and we're specifying a file called content script j/s so i'm going to pull that up next this is the file that's actually going to do our detection you can see it's a very simple file we have a regex here which probably not surprisingly just a sandwich in there and if we if the regex successfully detects that that match we run a little function here and the function we run is to send a request so content scripts don't have as much permission as other parts of other extension components have and we do that for security reasons so in order for us to actually display some UI we have to send this information that the content script has gathered to another part of the extension in this case we're going to send it to a background page so this function here which is in that utility chrome extension API it's called send request it's just going to broadcast a message and then other components within our extension can listen for that message if they want so next I'll open up our background page and here's in this particular extension here's the component that's doing the listening so we're going to install a listener here again by using that chrome extension API and you can see we have a callback function called on request which will be triggered when the event happens and here's that function so we just have a simple method call in here to the page action API and it just says show in the current IG if sorry in the current tab and that's all there is to that alright so next I'm going to talk a little bit about html5 integration so I've listed out some of the most useful features or some of them in any case of the html5 that you might want to pull into your extensions I won't go through them all cuz I think we're a little short on time I want to leave a little time for questions but we have obviously and i should say when I say html5 what I'm really referring to is html5 css3 and the new JavaScript API so that collection of new open web technology so we have some new html5 tags that are available there are also some really nice new CSS properties filters and animations and then there's some JavaScript API as for doing things like persistence we're going to look an example of this as well as doing notifications there's a whole lot more these I just wanted to give some examples and when it comes to using these things in your extensions since like I said extensions are web page you can just use this all seamlessly just like you could in a regular web page for a couple of these features there are some little extra hooks into the extension system so for example things like desktop notifications require a permission and we give a hook into the extension system so that you don't have to explicitly ask the user for permission you just do it one time at install so let's look at an example of implementing some html5 features I called this the pusher notify our pattern because I didn't really have a good name for it but we looked at some notifiers or ready the scenario here is that maybe we want to do some notifications with a little more information something beyond just a few characters of text a good example this would be if you're doing some kind of news site you want to show news alerts and maybe we also want to let the user configure these notifications so determine how frequently they can appear or in what way what they look like that sort of thing and then finally let's persist these notifications of these settings rather so in order to do this we're going to use desktop notifications like I said any web page can can use and desktop notifications there's a special hook for extensions to use them though and we're going to add an options page we already saw an options page before but we're going to look at how this one is implemented that lets the user do some configuration on these settings and finally we're going to use web storage specifically local storage to save these settings so that they run across browser session so even after the user closes their browser the next time they fire it up will still remember these settings so for this particular example it's not in the gallery like the other ones I've been showing you because it's not it won't work for all users yet so I'm going to load it as an unpacked extension and you'll see when immediately when I load it it pops up this this desktop notification here doesn't say a whole lot it's just a demo and we also have an options page attached to this which I'll open up here it just lets us set a couple of things about this so we can set how frequently the notification will appear by default this thing is going to appear every minute and we can turn it toggle it on or off here so I'm going to reload this extension a couple times so it shows more notifications you can see what it looks like in that case and I don't want to wait a couple minutes to do that so I'm just going to reload here and show a couple more notifications you can see those here these notifications will stack up i believe up to five of them will show and then they'll be they'll just stack they'll queue up behind the scenes and as you close them my new one will appear so I'm going to go back to this options page and disable this thing because I don't want it to keep showing up while i'm showing you code and i'll also close a couple of these here alright so let's see how this thing is implemented so first we'll start with our manifest file again and again looks pretty similar to our other manifest files one thing that we've added here is this notifications permission so if you've seen notifications in the wild before you've probably noticed that when you go to a web page that wants to show you a notification you get an info bar that says hey is it ok for this web page to show you notifications but you didn't see that with this extension and the reason is because of this notifications permission I mentioned this briefly earlier this is not yet available in the stable channel of Google Chrome but it's available everywhere else and it will be available in the next stable version all right so once we have that notifications permission we can just go ahead and show notification so I'm going to open up this background page which does the notify and you can see here we have an if statement that test to see whether the notification is active that's a setting that we'll look at in a second and if it is active it calls this show function let's look at that function now here it is so you can see these notifications if i zoom in again they display a little time and we just calculate the current time here and then we create a notification we do this with a method called WebKit notifications create notification and we just supply a couple of properties this notification happens to be a standard notification you can also do HTML notifications so we could instead of just applying text like this we could actually supply an HTML file and completely take over the rendering ourselves and then once we've created our notification object all we do is call show on it and that it will display and then one more thing that I want to look at here is this options page that I showed so you'll see this is a very simple HTML file here and like we saw there just a couple of form inputs in here we have one a checkbox for determining whether or not the notification is active and then we have another for setting how frequently those notifications will appear we just attach event handlers to each of these options and you'll see that when this thing is triggered what we do is we save the value into a local storage object so local storage is another html5 like API by default every page will have a local storage object available to it and you just treat it like a regular object so we're setting a property called is activated on the local storage object and giving it a value down here you'll see we're setting a property called frequency and giving it the value of that input field then if I go back to our background page here we can just seamlessly use these values as if they were declared in this page so if I want to test the value of the is activated field I just say local storage is activated if I want to look at frequency I just say local storage dot frequency couldn't really be simpler all right so I'm going to wrap up here by talking about our experimental API s let me close this notification so we currently have five experimental API so I'll just list them out here quickly so our philosophy with respect to AP is is that we want our api's to be very stable once they're fully available but we also want the ability to play with stuff than have users give us feedback and suggestions and we do that by creating experiment to these experimental API s so we have stuff for doing info bars context menus managing the clipboard as well as cookies and processes within the browser so in order to use these experimental API is there's a couple of tricks that you need to do the person is that you have to be using a dead Channel build of google chrome and then you have to start up the browser with this experimental flag it's called enable experimental extension API is very difficult to say and then finally you'll just add an experimental permission to your manifest file and that lets you plug into these experimental api's so let's look at an example of that again since this is not fully available I'm going to be loading an unpacked version of this actually I should probably run through my little use case here so the scenario that we're going to be talking about is that we want to take content from one page and import it into another app maybe we're viewing that content or editing it and we can either put this into a new window or tab or just load it directly into that current window the way we can do this we can use the context menu so we can make it so that the user right clicks or the equivalent on some kind of resource on a page we can grab that and pull it into our our app using context menu and then we're going to use the windows or tabs API to make it so that we open a new window or reload the contents of the current window so again let me go back here and install this thing so you guys probably saw during our keynote the amazing mug tug darkroom app which is a photo editing app this is a an extension that they are experimenting with in conjunction with that app so it'll let me go to any page I'm going to do that puppy search again and let me look at images so it's going to add a context menu item for when I right click on an image so if I happen to click somewhere else you'll see there's nothing special in my context menu here but if I click on one of these images I now get this edit in dark room option and I can click on that and it will open that image in the darkroom app hmm let's seem not to work so let me try that again well let's pretend that it works it works the earlier trust me it is experimental though let's see how that's implemented though so we're going to start with the manifest file again and this is really simple to implement so as I mentioned for using an experimental API all you do is add this experimental permission and then this extension has a background page that will actually make the call to the context menu API which is right here it's calling this create function and then we give it the title of the menu item which resources to operate on in this case images and then we have a callback function so in that callback function we're reloading the current tab again we're using the tabs API and it's loading up their URL and passing in as a parameter the the image that was clicked on so it's a quick example of what you can do with the experimental api's I should note that when you're building extension that uses experimental api's you can't actually upload them to the gallery that's why I downloaded a local copy so these are more for tinkering with stuff used trying out future stuff and especially giving us feedback we love to hear feedback on these on these api's that's why we put them out so early alright so now I'm going to take some questions I just want to show you a couple of resources that we have so all the code that I showed and I went through it pretty quickly but if you want to examine it in more depth it's all online the wave notifier you can get to by going to jump / wave CRX SRC and all the other extensions i showed you can get to you by going to jump CRX SRC and finally we have some additional resources that are really helpful as you get started writing extensions if you're going to start anywhere definitely go to the docks at code google com / chrome / extensions these other resources the discussion group and blog are linked to from there and again here's our wave back channel and or hashtag so I have about five or so minutes for taking questions and i'll also look I'll take a lot of question for us but and then I'll look in the moderator and see if there any questions in there so any questions out there yes they're going to gotchas to using standard JavaScript libraries like jQuery or other things in your plugins yeah great question so one thing that I didn't talk about is that we have this concept in the extension system called isolated worlds where we run content scripts in a separate execution environment than the JavaScript environment on the page we do this for a couple reasons one is security I talked about regular web pages being walled off from the extension system so this helps us with that but we also do it for compatibility so for example let's say that web page is running one version of jQuery and your extension is running another version of jQuery they're not compatible with each other that could potentially cause a conflict but because we have these isolated worlds they don't interact with each other and you never get that conflict and also you know any JavaScript additional JavaScript libraries or frameworks you can just add into your extension directory just like you would on a regular web site yes so you talked about xhr and that the there is a permission model you have to declare which sites you want to go to I know that once you inject a code inside the main page it behaves a little differently than what's running in as an extension and it does not have direct access to go to the sites which you which you include in the permission list is that is that intentional and is there a time to change so I think if I'm understanding you right that's the issue i just talked about which is this isolated world so you're actually not in the JavaScript environment of the page or in a separate JavaScript environment that is correct but even even if it is running as a separate entity it still does not have access to go to the to the sites which are listed in the permissions tab you you can only communicate with the extension is that correct but at least that was my experience ah so you're talking about doing xhr work from the content script that's yep so I very briefly mentioned that content scripts don't have all the access that other extension components have in particular they cannot do xhr so what you have to do in that case is from your content script you send a message like I showed and then your background page or whatever makes the xhr and sends it back and so forth I before I take the next question let me be a little meta here and I'm going to open up my wave notifier here and go to this wave just to make sure see if there's any queued up moderator questions in there okay while we're waiting for way to play flow go ahead do you have any suggestion for the automation test for the chrome extension automated testing yeah that's a really good question I've seen some internal threads about that and people have been doing trying some stuff out but I haven't really seen a good solution that I could recommend at this point but it's definitely a good question to ask and I'd love to see you throw that up maybe on our discussion group probably other developers would have maybe have some input on stuff that they've tried successfully or not yes oh sorry are there questions on the side let's go ahead yes on your google wave notifier you used authentication yeah is there any reason why we can't use other Oh off authenticators or do we have to stick to using the google one nope that's just a library that we provide you could definitely do it all on your own or use another library this is just one use another service provider oh yes absolutely yeah it with that library you can use any service provider you want we showed a tweet deck demo that for example uses a similar library and you know enta case against twitter yeah let me just take a moderator question in here are we able to call Joe I think I answered this one with the isolated worlds one we got that one are there any books you recommend for diving deeper into Chrome extensions well extensions are pretty new there's not a books out there that i know of yet certainly our documentation i would highly recommend i think it's really comprehensive that's another good question for the session group i don't know maybe someones found found a book out there yes go ahead is there any way to make the native extension NPAPI to communicate with any of those a Chrome extension yep so the google chrome extension system supports NPAPI so you can create NPAPI plugins you know we there are security issues with NPAPI because you're creating native code that will run on the user's machine so we definitely prefer it if you can do this in the extension system but we understand that the extension system can't account for all use cases yet and so we reduce support NPAPI but the question is more is it possible to communicate or trigger any of the chrome extension from NPAPI like the background pages or yes yes so you can trigger the action pages of background pages from the NPAPI yeah so you can interact with your NPAPI plug-in and other components within your extension how is it exactly to be done it's tells you the JavaScript call like that yeah you can do it through JavaScript it's it's kind of a big topic though so talk to me offline and I'll point you to some resources for doing that right thank you very sure any other questions we have probably time for one more so let me take some from moderator here all right how can an extension launch an executable on the user's machine for example launch then to edit a text area so that's actually goes back to that NPAPI question you can do that with an NPAPI plug-in i mentioned way back in the beginning of this talk that we automatically review and approve almost every extension that's uploaded to the gallery the one exception is that or not the one exception one of the exceptions is that if you use an NPA plot NPAPI plug-in we have to do a manual review on that because you're creating code that executes directly on the user's machine so I'm going to ask answer this last question and then we'll wrap up is there a set of UI guidelines that you would like extensions to follow so I think we impose this UI restrictions a little bit with the extension API so for example you can only use one UI surface in your extension for example you can't have an extension that is both a browser action and a page action so we kind of want the these UI guidelines to just work they're not UI guidelines that I know of but I would not be surprised if someone out there wrote of best practices another good question for our discussion group so with that we are almost exactly out of time I have three seconds left thank you all for coming I really enjoy this and if you have any questions after just let me know		