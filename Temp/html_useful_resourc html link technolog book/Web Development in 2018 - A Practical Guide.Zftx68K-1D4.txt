[Music] hey guys welcome to my practical guide for web development in 2018 in terms of technology and career I did a 20-17 version that was extremely popular and there's been some changes in technology and software as well as my own opinions as I've grown as a developer so I think it's a good idea to do one of these every year and if you didn't see the 2017 version don't worry about it we're gonna talk about everything we did in that video and more it might even confuse you a little if you watch both so in this video we're gonna focus on the here and now alright so before we start I just want to mention a few things first of all this is a guide for web development technologies and the options that you have in no way do you need to learn everything that I mention here in fact that may be impossible you'll notice that on a lot of the slides it says to choose one and stick with that also this guide is based on fact and opinion I tried as hard as possible to be unbiased I don't have much bias with programming because I do understand that everyone's different and every project is different and not all needs are the same but I will make subtle suggestions along the way you should also look at other places for guidance not just this video if this is not the end-all be-all to web development and what you should do look on YouTube read articles talk to colleagues all that stuff now this is very important especially when it comes down to you know how to follow this guide it depends on what type of developer you want to be do you want to be a full-stack developer which works on the front end back end do you want to specialize in the front end and in the UI the user interface do you want to be a simple web designer that builds just basic brochure web sites do you want to be a back-end engineer that creates complex api's and manages databases you'll need to make different choices depending on what kind of developer you want to be but this guide in general is for full stack web developers okay but that doesn't mean that if you want to be a front-end developer this is no use to you because we're going to talk about that stuff as well alright so let's take a look some tools and software now you're not gonna need all of these at once when you first start you're really only going to need the first two the first being a text editor or possibly an IDE which is an integrated development environment but an IDE is kind of overkill for most web development so you probably want a text editor and the three that I would suggest looking at is Visual Studio code Adam and sublime text these are all very customizable they're very fast they have tons of features so I would suggest looking at these three but there are others that you can look at as well I'd also suggest a good browser the browser that I would definitely suggest is Chrome but Firefox is also a good browser I would suggest chrome because it's fast it is it has the best dev tools it uses the v8 JavaScript engine which is the same engine that nodejs uses it's just a great great browser all right Firefox coming in second and anything other than that I would not recommend for web development now image editing isn't as important as it used to be because we have so many tools now we have you know UI frameworks that allow us to create things in the browser really quickly rather than creating full mock-ups in Photoshop like I used to do back six seven years ago when I had my own company I would do that for clients and it took a long time now if you're a web designer and you're building you know like really beautiful artistic websites then that's a different story you're probably gonna want to create mock-ups then but if you're gonna be an app developer you know you're gonna build full stack applications you're probably just gonna want to clean UI UX experience and you'll probably end up using some kind of framework or just building a simple layout with flexbox or the grid system or something like that so deployment tools this is definitely something you don't need right now if you're just starting out but you will eventually need an FTP client to upload to your your host especially especially if you're using a shared host an SSH tool if you're on windows you probably will work with putty if you're on Mac or Linux you can simply use the SSH command it's just a way to interact with your server and deploy applications now cloud storage this is something that is definitely optional but something I'd recommend because I like to have my code available from everywhere from all my computers if I go on vacation I want it on my laptop and I want it all synched up so I prefer Dropbox but Google Drive another good service I'm sure there's others out there as well all right so now that we talked a little bit about tools and software let's talk about the technologies that you need to learn so HTML and CSS I would say that you need to learn before anything else if you're striving to be any kind of web developer that builds stuff in the browser this is the most important thing to learn because HTML and CSS are the building blocks of the web every website that you you visit uses HTML and CSS regardless of its back-end technologies regardless of the languages it uses on its server the UI is always going to be in HTML and CSS even if it's generated by JavaScript or you know JSX something like that the end result is HTML and CSS now the good news is it's very quick and easy to learn it's not going to take a lot of your time and one thing that I mentioned in the last video the 2017 version I said that you need to nap master both over time and I've changed my outlook on that you should master html5 semantics and layout but css3 gives you a lot especially when it comes to things like animation and transitions and you definitely don't need to master that stuff especially if you don't plan on use it you know building animated interfaces or anything like that I would suggest learning flexbox in the grid system you don't have to master it at first but learn to properly align your elements frameworks are great but you should know how to align LM properly without using a framework and then the last thing responsiveness is crucial do not build layouts or websites or UIs that are not responsive that don't look good on mobile devices it used to be a luxury or kind of an added service for clients but now at this time in 2017 2018 it's a necessity and it's taken for granted so you want to learn about CSS media queries which are really not that hard it's basically just saying you know if the browser is or if the device or the layout is that a certain width then apply these styles okay so you want to stack elements on top of each other if you have a row of three boxes then you want to make sure when it's on a small screen those boxes stack on top of each other all right so now that you know HTML CSS and you're able to at least create a decent-looking static website it's time to start learning some real programming so that you can create at least somewhat of a dynamic user interface and you can create events you can play around with the Dom and for this you'll need to learn JavaScript now there are some advanced topics in this slide and if you don't plan on being an ojs developer or using front-end frameworks like react and angular then not all of this is needed for instance if you're gonna be a PHP or Python developer and only build server-side applications where you render views on the server you're not gonna need to master JavaScript but you should definitely know the basics and without using a framework all right and that goes for everybody even JavaScript developers you should definitely learn vanilla JavaScript before a framework because nowadays people are actually going and learning react before they know how to write a for loop which is just insane you should not learn a framework before the language okay so some of the things that you want to learn in terms of the basics our datatypes functions conditionals loops things like that you're gonna want to learn how to manipulate the Dom learn about the document object model events things like that and do this without jQuery ok jQuery stopped a lot of people from learning actual JavaScript and I'm not saying jQuery doesn't have its place anywhere but you should learn the language before learning a library so Ajax and the fetch API are used to make HTTP requests and they're used for asynchronous JavaScript and all that this isn't so important to learn if you're not gonna be a JavaScript developer per se if you're gonna if you you know if you're gonna focus on Python or Ruby or PHP these things aren't so important I would definitely suggest learning Jason though because Jason is used all around in all languages and API so Jason is very important it's also very easy to learn you can check out my Jason crash course if you want it's very thick it's 20 minutes long and it teaches you all the basics so es2015 plus meaning newer features of JavaScript again if you're going to be a JavaScript developer you're gonna work with nodejs and react then this is very important if not then I would suggest just learning the basics like template strings and letting cons things like that so now that you know HTML CSS and some JavaScript now you need to learn how to deploy a basic website and I'm talking about just a static brochure type site nothing nothing extravagant with you know really dynamic functionality so you're gonna need a shared hosting account I would suggest in motion that's what I've used for years now I have a shared hosting account with them I have a VPS a reseller account Hostgator is also another company that I've worked with a lot you want to learn the basics of cPanel which is the most popular hosting control panel so just things like creating email accounts creating FTP accounts you're gonna want to learn how to upload a site with FTP the file transfer protocol FileZilla is the most popular and the easiest client to use to do that and it's its FTP by the way is very slow but it is very easy to use so at this point I would suggest FTP later on you might want to learn how to SSH into your server and use SCP and all that stuff but right now FTP is is that the easiest choice you also want to register a domain name and learn about DNS and name servers if you have a domain name that is with a different company than your hosting account and you need to connect them then you need to you need to set up your name servers within the backend of of your of your interface they're your domain registrar so learn about all that stuff get a website up on the internet on in a non domain name and you're now officially a web designer or a basic front-end web developer if you know all the stuff that we've talked about so far so you should be able to create very simple websites and user interfaces crew maybe you can take a PSD which is a Photoshop file an image file and create an HTML CSS template or website from that and that's actually something that people actually hire you for is just to do that you'll have a designer on your team that will create the design and then you will take that design and make it into a working website so you should should be able to add at least a little bit of dynamic qualities to your user interface so button clicks maybe like a slide show or something like that all client-side stuff with JavaScript and up to up at this point you should be able to either choose to be a freelancer and do stuff on your own or look for an entry-level position now with the skills that we've talked about so far you're not gonna get anything spectacular but it could give you an inroad to a really good company where you'll be able to grow and you'll be able to one day be a full stack developer within that company so it's completely up to you what you want to do up to this point or you may want to just keep learning which brings us to what to learn next so we have a few different options depending on what you want to do so like I said this guide is geared more towards full stack developers so we're gonna go ahead and look at things in this order but if you're planning on being a back-end engineer and creating api's and not really working with the you our interface then you may want to go right to looking at server-side languages and technologies such as nodejs Python and stuff like that as well as databases and in managing data structures stuff like that but again we're focusing on full stack developers so the next thing I would suggest to do after learning HTML CSS and JavaScript is looking at HTML CSS frameworks or UI frameworks so let's take a look at some of these so Twitter bootstrap version 4 is out that's the most popular framework it's a general framework meaning that it's used for all different types of things it's used for just basic websites it's also used for applications things like that all right you also have materialized CSS which is a pretty new framework and this is great and geared more towards UI and UX over you know website theming and it has a very sleek look I actually prefer the look of materialized over bootstrap but bootstrap is more popular which makes it a little more beneficial to learn all right you also have the boma framework which i think is a great framework it's easy to learn it has a really common sense syntax one difference with Balma is it's straight CSS components there's no needed JavaScript and it doesn't depend on jQuery or anything else like the previous two frameworks do you also have the ZURB foundation framework which was a direct or is a direct competitor of bootstrap and it has been for a long time but I think that frameworks like materialized and Balma some of these newer frameworks are much better foundation seems to be very heavy to me and frankly I think that the design the default look of it is pretty ugly so I wouldn't suggest foundation but who knows you might like it and then we also have skeleton CSS which is not really a framework it's more of a boilerplate it's very very light I really like it for prototyping so for basically applications where you're just building out the functionality you don't you don't really care with front end looks like that's what skeleton is really great for in my opinion I wouldn't necessarily use it on a real application so front-end JavaScript frameworks now like I said if you're not gonna be doing this if you're not going to be using react or angular or anything then this really isn't that important to you but if you're gonna be a full-stack developer you're probably going to want to look at start learning a JavaScript framework so react is a great framework very popular especially for startups it's super fast it's super light it uses a state manager called Redux which is separate from react but it's often used with it it uses JSX to render HTML which is the Java what is a JavaScript syntax or no javascript extension something like that and it uses that instead of templates which which is a little different than than some of the other frameworks so we also have angular which is also very popular especially in the world of enterprise in business angular is much more bloated than react but it also includes a lot more in the core framework and by the way react is technically a library I know that before you guys start leaving comments but you can easily add stuff on to it to make it a full framework so you can add the router you can add the you know HTTP client whatever back to angular it's very full-featured has everything included it even has a state manager called ng rx which I don't have much experience with but from what I've read it's very similar to redux so view Jas is one of my favorite frameworks I would say it's the easiest to learn and there's there's no bullcrap surrounding it it's it's it's very very straightforward the syntax is clear it also has a state manager called view X and then the last framework I'm going to mention is irelia and it's not as popular as the other three but I really like it because it's very natural and it's very close to vanilla JavaScript the way that we write classes seems like you're just writing regular JavaScript and you have the option to use ES next which basically means the latest features of equi script or typescript which is also a it's a superset of JavaScript and also used with angular alright so there's plenty of others I didn't mention ember is one of them which is really great and it's a really full-featured framework I think the learning curve is a bit steeper at least in my opinion but you'll also want to check out ember and in some of the others in your research all right so we've talked about some of the front-end the popular front-end technologies now while you're learning that stuff you should also be learning these things these are basically side technologies that you should be learning so one is git which is a version control system and is used about used by just about every software development team on the planet it can be used with many different services but github is the most popular it can be complicated but just knowing the basics will help you out a lot and just knowing how to create a github repository and push your code to that repository and pull from it and make updates this will really up your game as a developer so it gives you you know version control it gives you backup it gives you collaboration with other developers the advantages of using git our endless so I would definitely suggest that and I actually have a crash course on git if you want to check that out so at this point you should be dabbling in the command line if you're using frameworks like angular or react chances are you're using the command line interfaces that come with them to set up your applications so and you should also be using NPM which is no node package manager and you should know how to navigate between folders how to create files things like that okay you don't need to be a pro with the command line but you should know that some of the basic commands all right you also want to start to learn about api's and rest you want to know what a rest api is how it works even if you are front developer you need to know how to make HTTP calls to a back-end API whether you're doing it with the JavaScript fetch API or if you're doing it through a framework like angular which has its own HTTP library this is something that is the future and you definitely want to look into you also want to look at the different types of requests you can make with HTTP so get get request post request put patch delete and know what each one of those requests are meant for okay and also do some reading up on SSL and security and HTTPS okay so these are just some of the site technologies that you want to learn now you also may want to learn about CSS preprocessors such as sass and less I would I would definitely recommend sass over less it seems to be getting much more traction these days and what a CSS preprocessor does is it allows you to use things like variables and functions or mix-ins inside of your CSS okay and you can you can do things like logic and and just stuff that that you know core CSS does not do and that's something that you may want to look into as well now if you are a JavaScript developer you're gonna want to learn web pack and Babel web pack is a module loader so you can use for instance NPM modules on the client side there's also presets to integrate Babel which is a JavaScript compiler and Babel is used to take newer features of JavaScript from newer standards like es6 es7 and compile them down to older es5 code which is the version of JavaScript that runs on all you know older browsers and if you plan on being a Python or C sharp developer this this isn't as important but if you're going to be a JavaScript developer then you should definitely learn web pack and Babel all right so now we're on to server-side technologies and server-side languages nodejs isn't a language but it is a server-side technology it's a runtime and it uses the JavaScript language so it's basically JavaScript on the server and this would be my recommendation for most developers it's popular it's fast its scalable it's very powerful it's asynchronous it's a language you already know because you've already learned some JavaScript hopefully it runs on the server instead of a browser environment that's the biggest difference but it's the same language you also get NPM which is the the node package manager and you can install endless packages to achieve whatever kind of functionality you want all right so my next recommendation would be Python at this point which is a big change from last year where I would recommend PHP Python I've worked with a lot more for them in the past I'd say six or seven months and it's just a fantastic language it's it's very popular it's great for rapid development you can create things very quickly it has great integration with just about everything so it's definitely something that I would recommend for your server-side technology now PHP is not the best language it's not the prettiest language by far but it is very practical it's easy to deploy you can easily deploy it to shared hosting accounts it's the the language of WordPress which is the most popular content management system it's also it also uses the laravel framework which is very popular even people that don't like PHP tend to like laravel it's just a very elegant framework and you also have Ruby which you know Ruby on Rails which is a great framework great MVC framework it provides rapid development it has a really strong community but I do think that Ruby has fell off a little bit and that may just be my opinion just from the stuff that I've looked at and then I've read and I said this last year too I believe but I think that with nodejs since nodejs has been introduced I think that it's kind of stolen some of the the the glory from Ruby but I don't know you can make your own conclusions about that and then you also have c-sharp in asp.net which is something that I'm I'm just getting into I actually didn't even mention c-sharp last year but it is something that is very powerful it's backed by Microsoft and I really liked the c-sharp language but again I don't have much experience in it so I can't say too much about it so those are some of the main choices for your back-end server side programming now you'll also need to learn a database and you have different types of databases now MongoDB is an incredible no SQL database which is schema-less as far as the data layer goes it's very scalable it's very quick and it pairs fantastically with nodejs so if you choose note as your server-side technology I would recommend MongoDB over anything else alright next we have MySQL which is a traditional relational database that uses tables and rows MySQL is very popular and can be used with virtually any language it's popular with Python PHP Ruby on Rails and you can even use it with nodejs postgrads is similar to MySQL but it's a little more difficult to work with it's a bit more feature full and it's also a bit more powerful ok I don't think it's as popular though then we have SQL Server which is Microsoft's implementation of an SQL database I haven't used this too much so I can't say too much about it as you can see I haven't although I use Windows to develop on a lot I don't really use Microsoft technologies when it comes to web development next you have Oracle which is heavily used in the enterprise world again this is something I don't have much experience with but it is a relational database now we also have firebase which is a real-time cloud database maintained by Google and it is fantastic I really like firebase now I wouldn't recommend just learning firebase I would I would say learn it in addition to one of these other ones it is a cloud database so it doesn't run on your local machine you actually create an account you can create a database it also has authentication and storage and you can even use it as a hosting platform so firebase is definitely something that I would suggest looking at and it pairs really well with frameworks like angular and reacted view alright so now that we have looked at server-side languages and technologies databases now we want to look at server-side frameworks okay just like we have front-end frameworks we have server-side frameworks so let's first look at some of the JavaScript ones so we have Express which is the most popular by far we have happy J s Adonis which is a hard core MVC framework that feels a lot like laravel and then we have new frameworks like loopback and swagger which are frameworks that were built for creating REST API s and back-end services for full stack applications okay I do have a course on nodejs Express in MongoDB on udemy where we build and deploy to applications so I'll put the link in the description for that course if you're interested alright next Python has quite a few frameworks but the two top ones are Django and flask these are very very different from each other Django is a very high-level framework meaning that it does a lot for you it does things the Django way where flask is very low level and you can basically you have the freedom to do things however you want you can put your whole program in one file if you want ok so there's very little convention both are very different but both are great frameworks and then you have other ones like web 2 pi and pylons which I've never used so I can't say too much alright so for PHP laravel is extremely popular like I said people that tend not to like PHP still like laravel because it's it's a very elegant framework you also have symphony which laravel is actually built off of code ignitor which is a really easy to use MVC framework and then ye2 which I've used very little but not not really to build anything that's worth anything alright so Ruby of course we have Ruby on Rails which is a great MVC for work you also have Sinatra Nitro which iron is popular but are also pretty powerful and then of course we have C sharp which has the dotnet framework asp.net MVC which is a great model view controller framework and of course is backed by Microsoft and very powerful so now what I want to do is just take a look at some content management systems because these are this is part of web development especially for smaller firms that don't want to create you know content management systems from the ground up this gives them a really nice option for their clients now the most popular content management systems are wordpress drupal and joomla although drupal and joomla have fell off a little bit or Joomla has fell off quite a bit from back when I was using it about seven or eight years ago but WordPress is still thriving and all of these are built in PHP which again is not the prettiest language but again it's very practical okay WordPress you can actually install WordPress on shared hosting accounts with one or two clicks so like I said these are great for clients because they can log in and they can edit their content if they want to update their about page or something like that they can do that very easily and there's also thousands of plugins and add-ons and themes so you can customize it you can create your own plugins which is pretty easy to create a wordpress plugin maybe promotes very fast development because your again you're not building it from the ground up you're using something that's pre-made now since it's pre-made it can be kind of limiting you know obviously if you're gonna create something from scratch you can do it however you want so you have a lot of freedom when you use something that's pre-made like WordPress even though you can create custom plugins it can still be limiting to you okay so now building apps is great but there's gonna have it there's going to be a time when you're gonna have to make them live on the Internet and to do that you're gonna have to learn about DevOps and deployment now by no means do you need to know everything that I mentioned on this page these are just some of the things that you'll run into as a developer looking to deploy applications all right now like I mentioned what PHP applications are very simple to deploy onto shared hosting accounts but then you have apps apps built with nodejs and Python and Ruby it's a bit more complicated so you'll need either a dedicated server which is your own computer either local or from a hosting company or a VPS which is a virtual private server it's basically a virtualized server so it's it's built in a virtual machine and these are usually much cheaper than dedicated servers but what I would suggest is cloud hosting which is much cheaper using something like digitalocean which is fantastic digitalocean actually has invite pre-made environments for python applications and mean stack applications then you have services like Heroku and Amazon Web Services that are built for dynamic applications written in languages like Ruby and Python and node all right you might also want to look into cloud storage with services like Amazon s3 especially if you're using a service like Heroku which doesn't allow local file uploads you'll need to use some kind of third-party service like s3 now by this time you're going to want to be working with the command line quite a bit and you're going to want to work with SSH and secure sockets it's a very secure way to connect to your server and you know do updates and maintain it which is a very important part of application deployment and maintenance so that's something you're going to want to learn about as well now all of this is very overwhelming usually if you work with a team this kind of stuff will probably be handled by someone else but it doesn't hurt for you to have a basic understanding of how this stuff works so just know that you don't have to master all of this and this goes for everything that I've mentioned in this video you do not have to master everything here I'm just trying to take you through kind of a or a guide of some of the things that you're gonna run into and some of the choices you're gonna have to make as a developer all right now mobile applications this is kind of a side note it's not really something that you need to learn but it will be beneficial if you do and you can build mobile applications now with web development for technologies okay you don't need to know Java or Swift to build a native application you can now use frameworks like react native which uses the react framework to build native applications and it's not a it's not a hybrid application it's an actual native app that you can you know upload to the App Store and do anything that you can do with an application built on Java or Swift okay you also have native script which is similar to react native except it uses angular or pure JavaScript to build native applications and then you have frameworks like ionic which build hybrid applications which are basically web apps inside of a mobile app container and that container is usually created by technology called PhoneGap or code Cordova all right so that provides the what's called a webview so that you can load web apps in a mobile application without having the browser chrome around it and then we also have the xamarin framework which allows you to create native applications with c-sharp okay which I haven't used but I've heard good things about so again mobile applications not something you have to do doesn't mean you're not a real developer if you can't create a mobile app it's just it's just something that is relevant at this time so I figured I'd mention it alright so if you have gone through either even a third of what we've talked about in this video then you're probably a full-stack developer so if you can create simple to advanced web applications front and back-end if you can create a secure REST API that can handle requests and you can send back responses and fetch data from a database if you can deploy maintain applications and mr. databases and I don't mean being a professional database administrator I mean just you know going in and adding data removing data optimizing things like that then you should be able to get a very good job or run your own business okay now that's a choice you need to make it seems most people want to get a really good job with a company myself I I preferred and and I took the my own business route rather than working for someone else and I did it with a lot less knowledge than anything that I've said here and that's that's probably a subject for a different video and I know that all of this stuff is very very overwhelming but like I said I mean I started the business just basically building WordPress websites not really even knowing PHP enough to create a plugin so you can and the same goes for working for a company you need to have confidence in yourself it's something that I've dealt with and struggled with and you guys have probably seen my self-doubt video if you want to check that out I'll put the link in the description or up top but just you know don't get overwhelmed by all this stuff and that's that's not my intention I know a lot of you are watching this thinking how the hell am I gonna learn all this stuff and don't think that don't think that just take your time and take a look at each thing that we've talked about and just make some decisions on on the routes you want to take and the technologies you want to learn I guess that's the best advice that I can give you all right so what are some of the changes from last year okay because we did a very similar video last year so we have some new technologies grid CSS the fetch API materialized native script these are all things that are new this year I'm not saying they weren't around last year but they weren't popular enough to or established enough to put in the video now we're getting to a point where we're more focused on full-stack applications and creating rest api's and then having a front-end framework with that REST API rather than just rendering views on a server that that's becoming more of a trend in web development I've noticed lately we're also more focused and we should be more focused on vanilla JavaScript in addition to frameworks we do need frameworks for complicated applications but there are times when we were using frameworks when we don't need to so I think it's really important especially for you know JavaScript developers to really learn the ins and outs of vanilla JavaScript single page applications they were popular last year they're still popular and they're still gaining popularity and then one of my personal changes from the last video is choosing Python and c-sharp over PHP I'm not saying that PHP is dead or dying I'm just saying that after looking at these other languages I can see the the benefits over PHP even though PHP is practical from a point of deploying and you know WordPress and stuff like that I'm just saying as a language in my opinion Python and c-sharp are better languages overall than PHP all right so what now your full stack developer you know everything that we've talked about now no I'm just kidding nobody knows everything we just talked about but what do you do first thing if you don't have a job you want to look for a job or start your own job start your own business and you want to focus on your career okay whatever technologies that your company uses you want to focus on don't jump from framework to framework or language to language at least on a hardcore level it's okay to learn extra frameworks and languages and stacks in your spare time you know if you're if your company works with angular and nodejs on the backend focus on on those technologies watch all the videos you can read books take courses and then maybe you know a couple hours on the weekend or something learn Python as a hobby all right but focus on your main your main needs okay you will also want to stay up-to-date with current trends and technologies for instance you want to know when when bootstrap for when beta three comes out you want to stay up-to-date with that stuff when when's the next version of angular coming out what's going to be included what features are going to be deprecated you want to be paying attention to that stuff all right and then just have fun with it you know it's for me I love this stuff I love learning new stuff so it's always fun for me all right now I know that was a lot I really hope it was helpful and not just confusing the crap out of you if you like this video leave it a like subscribe follow me on social media join the discord chat if you have any issues we have code doctors and discord that can help you out so you know thanks for watching guys I really appreciate it this was way friggin longer than I thought but thanks and I will see you next time		