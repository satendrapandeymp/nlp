hello everyone thanks for coming to the site trek it's awesome to see it packed out in here can everyone give me a stretch that's good I need to stretch so I look less weird okay so I want to talk about the event loop and what the heck is the event loop as in the event loop inside JavaScript so first up as he said I work for and yet which is an awesome little dev shop slash product company in the u.s. look us up if you need help with real-time stuff that's what we're good at so about 18 months ago I'm a paid professional JavaScript developer I thought to myself how does like JavaScript actually work and I wasn't entirely sure I'd heard v8 as a term you know Chrome's runtime didn't really know what that meant what that did I'd heard things like single-threaded you know obviously I'm using callbacks how to call backs work so I kind of started a journey of like reading and research and experimenting in the browser which basically started like this right I kind of was like JavaScript what are you and it's like I'm a single threaded on blocking asynchronous concurrently glitch right that's uh yeah cool I have a call stack an event leave a callback queue and some other api's and stuff right I did not do a computer science degree I don't I mean these words they're words so you know I heard of like v8 and the various runtimes in different browsers so I like look to v8 and said you have a cool stack an event leave a callback queue and some other guys and stuff I have a call stack and a heap I don't know what those other things are okay interesting so basically 18 months pass like for 18 months later now and like I think I think I get this and so this is what I want to share with you today so hopefully this will be useful if you're relatively new to JavaScript help you understand why javascript is so weird when you compare it to other languages you might have used why callbacks are a thing which calls us hell but are required and also if you're not if you're an experienced JavaScript developer hopefully give you some kind of fresh insights into how the runtime that you're using everyday works so that you can kind of think about it a little better so if we look at the JavaScript runtime itself like v8 for example which is the runtime inside Chrome this is what is this is a simplified view really of what the JavaScript runtime is it's a heap which is we don't need to worry about that it's kind of boring it's just like where memory allocation happens and then there's the call stack which is where you're like stack frames are and all that kind of stuff but if you like clone the v8 code base and grep for things like set timeout or Dom or xml httprequest they're not in there they don't exist in v8 which is kind of a surprise to me right like set time that's one of those like first things you use in JavaScript when you start thinking about async stuff and it's not in the v8 source hmm interesting so over this 18 months of discovery I've come to realize that this is really this is really the bigger picture and this is what I'm hoping to get you all kind of on board with today and understand what these pieces are so we have the v8 runtime but then we have these things called web api s which are extra things that the browser provides so the dom ajax set timeout things like that then we have this mythical event loop and the callback queue I'm sure you've heard some of these terms before but maybe don't quite understand how these pieces like pull together so I'm going to start from the beginning some of this will be new to or you know the words might be new to people other other people might get this but we're going to quickly kind of move on from here so so bear with me if this is if this is obvious but I think for a lot of people it's not so javascript is a single-threaded program language single threaded runtime which means it has a single call stack and it can do one thing at a time like that what a single thread means is like the program can run one one piece of code at a time so let's try and visualize that just to kind of to get our heads around what that means so if I have some code like this on the on your left we've got a few functions a function multiplier which multiplies two numbers square which calls multiplied with that you know the same number twice a function which prints the square of a number by calling Square and then calling console at log and then at the bottom of a file we actually run prints square write this code all good makes sense cool so if we run this well I should back up a step sorry so the call stack is basically it's a data structure which records basically where in the program we are so if we step into a function we push something onto the stack if we return from a function we pop off the top of the stack that's all the stack can do we pushed up on the top pop off the top so if we run this file well there's kind of a main function right like the the file itself so we push that onto the stack then we have some function definitions there just like defining the state of the world and then finally we get to print square right so print square is a function call so we pushed onto the stack and immediately inside print square we're gonna call square we're going to push them to the stack which calls multiply and now we hit a return statement right we've multiplied a and B and we return so I said when we return we pop something off the stack so pop multiply off the stack return into square returns print Square console dot log print square is now there's no return but it's implicit because we got to the end of the function and we're done right so that that is like a visualization of the call stack does that make sense yes Bo ok great so even if you haven't really thought about or visualized the call stack before you've undoubtedly come across it when you've been doing certainly browser side development so if we have code like this a function bars which calls bar which calls foo which throws an error then if we run this in Chrome will we see something like this in the dev tools right on core error oops and it prints the stack trace that is the stack trace right the state of the stack when that error happened so I'm call arrow oops which was called in foo which was called by bar which is called by bars which is called by this function which is our main right equally if you've heard the term like blowing the stack then this is an example of that right have a function free which calls foo so what's gonna happen well we run main we call foo which calls foo which calls foo which calls foo and ultimately chrome says well you probably didn't mean to call foo sixteen thousand times recursively so I'll just like kill things for you and you can figure out where your bug lies right so although I may be representing a new kind of side of the call stack you've probably got some sense of it in your development practice already so the big question then have comes is like what happens when things are slow so we talked about blocking and blocking behavior and blocking there's no strict definition of what isn't isn't blocking really it's just code that is slow right so console dot log is not very slow doing a while loop from 1 to 10 billion is kind of slope doing image processing is slow Network requests are slow so things which are slow and on that stack are what a blocking are blocking means so here's a little example so let's say we have this is like a fake fake bit of code get synchronous right like jQuery is like Ajax requests what would happen if those were synchronous requests so forget what we know about a sink Kovacs they're synchronous so if we just go through it like we have been we call get sink and then we wait right because we're doing network requests networks relative to computers are very very slow hopefully that Network request completes we can move on wait move on wait and I mean this network request might never finish so yeah I guess I'll go home finally those three you know blocking behavior is complete and we can clear the stack right so in a programming language which is single threaded you're not using threads like say Ruby like that's what happens right we make a network we have to just wait till it's done because we we have no way of handling that so why is this actually a problem the problem is because we are running code in browsers so let's I can it okay here we go okay so this is just this is chrome this is the code I just ran I browsers don't give us what they do actually go a synchronously Ajax request but I'm actually just faking this out with a big while loop because while loops are synchronous so I basically while loop for like a second or five seconds I think before continuing so if I open up the console here we can see what happens so we request foo calm and like while this is happening I can't do anything right look even the Run button hasn't finished re-rendering the fact that I previously clicked it because the browser is blocked it's stuck it can't do anything until those requests complete and then all hell breaks loose right because I did some stuff and it figured out that I'd done it it just couldn't actually like render it can do anything and that's because if that call stack has things on it and here it's got these um yeah it's still going uh-huh we've got the synchronous requests right we've blocked the call stack the browser can't do anything else they can't render it can't run any other code it's stuck not ideal right if we want people to have nice fluid you guys we can't block the stack so so how do we handle this well the simplest solution were provided with is asynchronous callbacks right so there are almost no blocking functions in the browser equally nodes they're all made asynchronous which basically means we run some code give it a callback and we run that later right we know what if you've been writing JavaScript you've seen asynchronous callbacks what does this actually look like so simple example throw my people just where we're at code like this console dialog hi right we run this at timeout but that queues the console log for the future somehow so then we skip straight on to J's call for you log that and then five seconds later we log there right makes sense happy basically like that set timeout is doing something so asynchronous callbacks with regards to the stack we saw before how does this work so let's run the code console to look hi set timeout okay what's going to happen here we know that console.log there doesn't run immediately it's going to run in five seconds time we can't push that concert log onto the stack so somehow it just disappears we we don't have like a way of describing this yet but we'll come to it we log just can't for you clear and then five seconds later somehow magically console.log there appears on the stack how does that happen and that's this is basically where the event Li comes in and concurrency right so I've been kind of partially lying to you and telling you that JavaScript can only do one thing at time that is true javascript the runtime can only do one thing at a time it can't make an AJAX request while you're doing other code it can't do a set timeout while you do another cook the reason we can do things concurrently is that the browser is more than just the runtime so remember this diagram the JavaScript runtime can do one thing at a time but the browser gives us these other things right gives us these web api's these are effectively threads that you can't access like threads you can just like make calls to and those pieces of the browser aware this concurrency kicks in if you're a back-end person this diagram looks basically identical for node except instead of web api is we have c++ api's right and the the threading and all that stuff is hidden from you by being running like c++ lab okay so now that we have this picture let's see how this code runs in this kind of more full picture of what a browser looks like so same as before run the code console log by log hide the console simple now we can see what happens when we call set timeout so we call set timeout we are we pass this callback function and a delay to the set timeout call now set timeout is an API provided to us by the browser remember I said it doesn't live like in the v8 source it's like extra we get in the environment we're running the JavaScript runtime in so effectively we kick off a timer right in like the browser kicks off the timer for you and now it's going to handle it's going to handle the countdown for you right so that means that our set timeout call itself is now complete so we can pop off the stack just can't for you clear so now we've got this timer in the Web API which five seconds later is going to complete now the Web API can't just like start modifying your code right it can't just like Chuck stuck on to the stack when it's ready because if it did it would like just appear randomly in the middle of your code so this is where the task queue or the callback queue kicks in so basically any of the web api is when they're done they push your call call back on to the task queue and finally we get to the event loop the title of the talk is what the heck is the event loop the event loop is like the simplest little piece in this whole equation and it has one very simple job the event leaves job is to look at the stack and look at the task queue if the stack is empty it takes the first thing on the queue and pushes onto the stack which effectively runs it right so here we can see that now the stack is clear there's a callback on the task queue Steve only runs it says oh I get to do something here pushes the callback back onto the stack now remember the stack is like JavaScript land right this is back inside v8 so the callback appears on the stack and gets run console the log there and we're done does that make sense everyone with me awesome ok so now we can see how this works with probably one of the first encounters you'd have had with async stuff which is when for some weird reason someone says oh you have to call set time at zero like ok you want me to run the function in zero time why would I wrap it in a set timer like the first time you come across this if you're anything like me you're like okay well I sort of see that's doing something but I don't really know why and the reason is generally if you're trying to defer something until the stack is clear right so we know looking at this um if you run JavaScript that we're just going to see the same result we're going to see hi we're going to see jas called for you and then there is going to somehow appear at the end so running it we can see how that happens consider like high set time at zero now that's going to complete immediately and push the call back onto the queue but remember I said about the event loop it has to wait until the stack is clear before it can push the call back onto the stack so your stack is going to continue to run right your main files going to continue to run consider like John Jay has called for you and clear now that we're clear the event loop can kick in or in your callback so that's like an example of set time at zero is like pushing deferring that execution of code for whatever reason to the end of a stack or until the stack is clear okay so all these web api's work the same way right if we have Ajax requests we make an AJAX request to URL with a callback just works the same way oops sorry console.log hi make an AJAX request the code for running that ajax request does not live in the JavaScript runtime lives in the browser as a web api so we spin up a xhr web api with a callback in the URL your code can continue to run until the xhr request completes or doesn't complete it may never complete but that's okay your stack can continue to run assuming it does complete callback gets pushed onto the queue picked up by the event loop and it's run right that's all that happens when an async call happens okay so let's do a crazy complicated example so I hope this is gonna work if you hadn't kind of realized like oh this is all in keynote there's like I don't know how like 500 animation steps in this whole deck so hopefully that Oh so interesting we were given a link hmm is this big enough can people see okay so basically I wrote this talk for Scotland Jess earlier in the year and I did it there and then after the talk I broke half of the slides and could not be bothered to redo all the slides because it was a total pain in the ass in keynote to do it so instead I took the much easier route of writing a tool which can visualize the JavaScript runtime at runtime and it's called loop so let's just run this example and which was kind of the example we had on the previous slide I haven't shimmed xhr yet it's doable I just haven't done it so as you can see the code we're going to log something this is a simple shame around like document dot add event listener set timeout and we're gonna do a consular book so I'm just going to run it and see what happens so add a Dom API out of timeout time it's going to count down Co is going to continue to run pushes the callback into the queue which runs which runs the consulate log and we're done if I click on here then it's going to trigger the Web API key the callback for the click and run it if I click a hundred times we can see what happens right I clicked the click doesn't get processed immediately the click has pushed on to the queue and as the queue gets processed eventually my click is going to going to get dealt with right so I have a few more examples I want to run run through here except I don't know how to see tabs so let's just see if I can find it here we go ok so I'm just going to run through a few examples just to kind of talk about a few things that you might have run into and not kind of thought about with async api's so in this example we call set timeout four times with a one-second delay and run console dot log hi so if we run it we can see that we run a few timeouts but the timeout callbacks get queued right so that that fourth callback we asked for a one-second delay and it's still waiting the callback hasn't run right so this kind of illustrates the like what set timeouts actually doing set timeout is not a guaranteed time to execution it's a minimum time to execution just like set time at zero doesn't run the code immediately it runs the code next ish sometime right so in this example I want to talk about callbacks so depending on who you speak to and how they phrase things clawbacks can be one of two things callbacks can be any function that another function calls or callbacks can be more explicitly an asynchronous callback as in one that is going to get pushed on to the callback queue at some point in the future so this little bit code illustrates the difference right the for each method on an array it doesn't run it takes a function which you could call a callback but it's not running it asynchronously right it's running it within the current stack we could define an asynchronous for each so we could it's going to take an array in a callback and then for each item in the array it's going to do a set time at zero with that callback right I guess this should actually pass in the value but anyway so I'm going to run it and we can see what the difference is so for the first block of code that runs it's going to sit and block the stack right until it's complete whereas in the async version okay so it's slowed down but we're basically going to queue a bunch of callbacks and they're going to clear and then we can actually run through and do the console that locks so in this example the console log is fast so the benefit of doing it asynchronously isn't obvious but let's say you're doing some like slow processing on each each element in the array think I have that shown somewhere no no I don't okay so let's say oops so I have a delay function which is just slow right it's just a slow thing so let's say processing async and here processing sync okay now I'm going to turn on a thing I've just been literally hacked together this morning which is to simulate the repaint or the render in the browser so something I haven't touched on is how all of this interacts with rendering I kind of touched on it but yeah not really explained it so basically the browser is kind of constrained by what you're doing in JavaScript right the browser would like to repaint the screen every 16.6 milliseconds right 60 frames a second is are ideal like that's as fast as it will do repaint if it possibly can but it's constrained by what you're doing in JavaScript for various reasons so it can't actually do a render if there is code on the stack right it's like the render kind of coal is almost like a callback itself right it has to wait till the stack is clear now the difference is that the render is given a higher priority than your callbacks so basically every 16 milliseconds it's going to queue it's going to cure a render and then it's going to wait to the stack is clear before it can actually do that render so this is this render queue is just simulating a render right so every second it's like kind of do a render yes can I do a render yes kind of do around yes because our code isn't doing anything now however if I run the code we can see that while we're doing this like slow synchronous loop through this array our render is blocked right and if our render is blocked you can't select text on the screen you can't click things and see the response right like that example I showed earlier in this example okay it's blocked while we queue up they sync timeouts but that's relatively quick but we're given we're kind of giving the Ren a chance between each element because we've queued up asynchronously to kind of jump in there and and undo the render did that make sense yeah cool so yeah that's just kind of this is just like a simulation right of how the rendering works but it just really shows you like when people say don't block the event loop this is exactly what they're talking about they're saying don't put shitty slow code on the stack because when you do that the browser can't do what it needs to do which is like create a nice fluid UI right this is why doing things like image processing or whatever or like animating too many things just gets kind of sluggish right if you're not careful about how you queue up that code so we're not an example of that we can see with scroll handlers so scroll hand like scroll events on in the dom trigger a lot right like they trigger like every I presume they trigger on every frame so like 16 every 16 milliseconds so if I have code like this right on document dot scroll animate something or do some work if I have this code like as I scroll it's just going to queue up like a ton of callbacks right and then it has to like go through and process all of those and if each of the processing of those is slow then okay you're not blocking the stack but you're kind of flooding the Q with Q with events right so this is like just helping visualize I guess like what happens when you actually trigger all these callbacks so there's ways you can like debounce that to basically say okay okay we're going to like queue up all those events but let's only do those slow work every like every few seconds or until the user stops scrolling for some amount of time cool so I think that's basically basically it there's like a whole other talk in how the hell this works because basically in running the code like this code runs at runtime right and it slowed down by I run it through ass prima which is a JavaScript parser before and after every single statement in the code would I answer a big while loop that takes half a second um so basically just like slow motions the code ship it to a web worker and then do a whole bunch of stuff to like visualize what's happening while doing it at runtime that makes sense so it's like a whole other talk and all of that but I'm super excited about it and see what I have is a talk to anyone after about it because I think it's kind of neat so with that thanks very much		